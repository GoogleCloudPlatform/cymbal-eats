{
  "$schema": "",
  "framework": "vue",
  "name": "quasar",
  "version": "2.5.3",
  "contributions": {
    "html": {
      "types-syntax": "typescript",
      "tags": [
        {
          "name": "QAjaxBar",
          "source": {
            "module": "quasar",
            "symbol": "QAjaxBar"
          },
          "attributes": [
            {
              "name": "position",
              "value": {
                "kind": "expression",
                "type": "'top'|'right'|'bottom'|'left'"
              },
              "description": "Position within window of where QAjaxBar should be displayed\n\nExamples:\nbottom",
              "doc-url": "https://v2.quasar.dev/vue-components/ajax-bar",
              "default": "\"top\""
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/ajax-bar",
              "default": "\"2px\""
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/ajax-bar"
            },
            {
              "name": "reverse",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Reverse direction of progress",
              "doc-url": "https://v2.quasar.dev/vue-components/ajax-bar",
              "type": "boolean"
            },
            {
              "name": "skip-hijack",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Skip Ajax hijacking (not a reactive prop)",
              "doc-url": "https://v2.quasar.dev/vue-components/ajax-bar",
              "type": "boolean"
            },
            {
              "name": "hijack-filter",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Filter which URL should trigger start() + stop()",
              "doc-url": "https://v2.quasar.dev/vue-components/ajax-bar"
            }
          ],
          "events": [
            {
              "name": "start",
              "description": "Emitted when bar is triggered to appear",
              "doc-url": "https://v2.quasar.dev/vue-components/ajax-bar"
            },
            {
              "name": "stop",
              "description": "Emitted when bar has finished its job",
              "doc-url": "https://v2.quasar.dev/vue-components/ajax-bar"
            }
          ],
          "slots": [],
          "description": "QAjaxBar - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/ajax-bar"
        },
        {
          "name": "QAvatar",
          "source": {
            "module": "quasar",
            "symbol": "QAvatar"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/avatar"
            },
            {
              "name": "font-size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The size in CSS units, including unit name, of the content (icon, text)\n\nExamples:\n18px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/avatar"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/avatar"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/avatar"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/avatar"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Removes border-radius so borders are squared",
              "doc-url": "https://v2.quasar.dev/vue-components/avatar",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a small standard border-radius for a squared shape of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/avatar",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Optional; Suggestions: one character string, <img> tag",
              "doc-url": "https://v2.quasar.dev/vue-components/avatar"
            }
          ],
          "description": "QAvatar - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/avatar"
        },
        {
          "name": "QBadge",
          "source": {
            "module": "quasar",
            "symbol": "QBadge"
          },
          "attributes": [
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/badge"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/badge"
            },
            {
              "name": "floating",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Tell QBadge if it should float to the top right side of the relative positioned parent element or not",
              "doc-url": "https://v2.quasar.dev/vue-components/badge",
              "type": "boolean"
            },
            {
              "name": "transparent",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a 0.8 opacity; Useful especially for floating QBadge",
              "doc-url": "https://v2.quasar.dev/vue-components/badge",
              "type": "boolean"
            },
            {
              "name": "multi-line",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Content can wrap to multiple lines",
              "doc-url": "https://v2.quasar.dev/vue-components/badge",
              "type": "boolean"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Badge's content as string; overrides default slot if specified\n\nExamples:\nJohn Doe\n22",
              "doc-url": "https://v2.quasar.dev/vue-components/badge"
            },
            {
              "name": "align",
              "value": {
                "kind": "expression",
                "type": "'top'|'middle'|'bottom'"
              },
              "description": "Sets vertical-align CSS prop",
              "doc-url": "https://v2.quasar.dev/vue-components/badge"
            },
            {
              "name": "outline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outline' design (colored text and borders only)",
              "doc-url": "https://v2.quasar.dev/vue-components/badge",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Makes a rounded shaped badge",
              "doc-url": "https://v2.quasar.dev/vue-components/badge",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "This is where QBadge content goes, if not using 'label' property",
              "doc-url": "https://v2.quasar.dev/vue-components/badge"
            }
          ],
          "description": "QBadge - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/badge"
        },
        {
          "name": "QBanner",
          "source": {
            "module": "quasar",
            "symbol": "QBanner"
          },
          "attributes": [
            {
              "name": "inline-actions",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display actions on same row as content",
              "doc-url": "https://v2.quasar.dev/vue-components/banner",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/banner",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a small standard border-radius for a squared shape of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/banner",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/banner",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "This is where Banner content goes",
              "doc-url": "https://v2.quasar.dev/vue-components/banner"
            },
            {
              "name": "avatar",
              "description": "Slot for displaying an avatar (suggestions: QIcon, QAvatar)",
              "doc-url": "https://v2.quasar.dev/vue-components/banner"
            },
            {
              "name": "action",
              "description": "Slot for Banner action (suggestions: QBtn)",
              "doc-url": "https://v2.quasar.dev/vue-components/banner"
            }
          ],
          "description": "QBanner - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/banner"
        },
        {
          "name": "QBar",
          "source": {
            "module": "quasar",
            "symbol": "QBar"
          },
          "attributes": [
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/bar",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "The component background color lights up the parent's background (as opposed to default behavior which is to darken it); Works unless you specify a CSS background color for it",
              "doc-url": "https://v2.quasar.dev/vue-components/bar",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/bar"
            }
          ],
          "description": "QBar - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/bar"
        },
        {
          "name": "QBreadcrumbs",
          "source": {
            "module": "quasar",
            "symbol": "QBreadcrumbs"
          },
          "attributes": [
            {
              "name": "separator",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The string used to separate the breadcrumbs\n\nExamples:\n-\n|\n>",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs",
              "default": "\"/\""
            },
            {
              "name": "active-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The color of the active breadcrumb, which can be any color from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs",
              "default": "\"primary\""
            },
            {
              "name": "gutter",
              "value": {
                "kind": "expression",
                "type": "'none'|'xs'|'sm'|'md'|'lg'|'xl'"
              },
              "description": "The gutter value allows you control over the space between the breadcrumb elements.\n\nExamples:\nmd\nlg",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs",
              "default": "\"sm\""
            },
            {
              "name": "separator-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The color used to color the separator, which can be any color from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
            },
            {
              "name": "align",
              "value": {
                "kind": "expression",
                "type": "'left'|'center'|'right'|'between'|'around'|'evenly'"
              },
              "description": "Specify how to align the breadcrumbs horizontally\n\nExamples:\nleft\ncenter",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs",
              "default": "\"left\""
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
            },
            {
              "name": "separator",
              "description": "HTML or component you can slot in to separate the breadcrumbs",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
            }
          ],
          "description": "QBreadcrumbs - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
        },
        {
          "name": "QBreadcrumbsEl",
          "source": {
            "module": "quasar",
            "symbol": "QBreadcrumbsEl"
          },
          "attributes": [
            {
              "name": "to",
              "value": {
                "kind": "expression",
                "type": "string|object"
              },
              "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used\n\nExamples:\n/home/dashboard\n:to=\"{ name: 'my-route-name' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
            },
            {
              "name": "exact",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to Vue Router <router-link> 'exact' property; Superseeded by 'href' prop if used",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs",
              "type": "boolean"
            },
            {
              "name": "replace",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs",
              "type": "boolean"
            },
            {
              "name": "active-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used\n\nExamples:\nmy-active-class",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
            },
            {
              "name": "exact-active-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used\n\nExamples:\nmy-exact-active-class",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
            },
            {
              "name": "href",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link href attribute; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props\n\nExamples:\nhttp://quasar.dev",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
            },
            {
              "name": "target",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link target attribute; Use it only along with 'href' prop; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props\n\nExamples:\n_blank\n_self\n_parent\n_top",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs",
              "type": "boolean"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The label text for the breadcrumb\n\nExamples:\nHome\nIndex",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
            },
            {
              "name": "tag",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "HTML tag to use\n\nExamples:\ndiv\nspan\ndiv\nspan",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs",
              "default": "\"span\""
            },
            {
              "name": "ripple",
              "value": {
                "kind": "expression",
                "type": "boolean|object"
              },
              "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)\n\nExamples:\nfalse\n{ early: true, center: true, color: 'teal', keyCodes: [] }",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs",
              "default": "true"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "This is where custom content goes, unless 'icon' and 'label' props are not enough",
              "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
            }
          ],
          "description": "QBreadcrumbsEl - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/breadcrumbs"
        },
        {
          "name": "QBtnDropdown",
          "source": {
            "module": "quasar",
            "symbol": "QBtnDropdown"
          },
          "attributes": [
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Controls Menu show/hidden state; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"menuState\"",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "type",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "1) Define the button native type attribute (submit, reset, button) or 2) render component with <a> tag so you can access events even if disable or 3) Use 'href' prop and specify 'type' as a media tag\n\nExamples:\na\nsubmit\nbutton\nreset\nimage/png\nhref=\"https://quasar.dev\" target=\"_blank\"",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "default": "\"button\""
            },
            {
              "name": "to",
              "value": {
                "kind": "expression",
                "type": "string|object"
              },
              "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used\n\nExamples:\n/home/dashboard\n:to=\"{ name: 'my-route-name' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "replace",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "href",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link href attribute; Has priority over the 'to' and 'replace' props\n\nExamples:\nhttp://quasar.dev\nhref=\"https://quasar.dev\" target=\"_blank\"",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "target",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link target attribute; Use it only with 'to' or 'href' props\n\nExamples:\n_blank\n_self\n_parent\n_top",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "The text that will be shown on the button\n\nExamples:\nButton Label",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "icon-right",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "outline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outline' design",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'flat' design",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "unelevated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove shadow",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a more prominent border-radius for a squared shape button",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "push",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'push' design",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "glossy",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a glossy effect",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "fab",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Makes button size and shape to fit a Floating Action Button",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "fab-mini",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Makes button size and shape to fit a small Floating Action Button",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "padding",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set\n\nExamples:\n16px\n10px 5px\n2rem\nxs\nmd lg\n2px 2px 5px 7px",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "no-caps",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Avoid turning label text into caps (which happens by default)",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "no-wrap",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Avoid label text wrapping",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "ripple",
              "value": {
                "kind": "expression",
                "type": "boolean|object"
              },
              "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)\n\nExamples:\nfalse\n{ early: true, center: true, color: 'teal', keyCodes: [] }",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "default": "true"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "align",
              "value": {
                "kind": "expression",
                "type": "'left'|'right'|'center'|'around'|'between'|'evenly'"
              },
              "description": "Label or content alignment",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "default": "\"center\""
            },
            {
              "name": "stack",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Stack icon and label vertically instead of on same line (like it is by default)",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "stretch",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "When used on flexbox parent, button will stretch to parent's height",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "loading",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put button into loading state (displays a QSpinner -- can be overridden by using a 'loading' slot)",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "split",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Split dropdown icon into its own button",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "dropdown-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "disable-main-btn",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Disable main button (useful along with 'split' prop)",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "disable-dropdown",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Disables dropdown (dropdown button if using along 'split' prop)",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "no-icon-animation",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Disables the rotation of the dropdown icon when state is toggled",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "content-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Style definitions to be attributed to the menu\n\nExamples:\nbackground-color: #ff0000\n:content-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "content-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Class definitions to be attributed to the menu\n\nExamples:\nmy-special-class\n:content-class=\"{ 'my-special-class': <condition> }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "cover",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the menu to cover the button. When used, the 'menu-self' and 'menu-fit' props are no longer effective",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "persistent",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the menu to not be dismissed by a click/tap outside of the menu or by hitting the ESC key",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "no-route-dismiss",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Changing route app won't dismiss the popup; No need to set it if 'persistent' prop is also set",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "auto-close",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows any click/tap in the menu to close it; Useful instead of attaching events to each menu item that should close the menu on click/tap",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "type": "boolean"
            },
            {
              "name": "menu-anchor",
              "value": {
                "kind": "expression",
                "type": "'top left'|'top middle'|'top right'|'top start'|'top end'|'center left'|'center middle'|'center right'|'center start'|'center end'|'bottom left'|'bottom middle'|'bottom right'|'bottom start'|'bottom end'"
              },
              "description": "Two values setting the starting position or anchor point of the menu relative to its target\n\nExamples:\ntop right\nbottom end",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "default": "\"bottom end\""
            },
            {
              "name": "menu-self",
              "value": {
                "kind": "expression",
                "type": "'top left'|'top middle'|'top right'|'top start'|'top end'|'center left'|'center middle'|'center right'|'center start'|'center end'|'bottom left'|'bottom middle'|'bottom right'|'bottom start'|'bottom end'"
              },
              "description": "Two values setting the menu's own position relative to its target\n\nExamples:\ntop right\nbottom end",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown",
              "default": "\"top end\""
            },
            {
              "name": "menu-offset",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "An array of two numbers to offset the menu horizontally and vertically in pixels\n\nExamples:\n[8, 8]\n[5, 10]",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "boolean",
                  "description": "New state (showing/hidden)",
                  "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
                }
              ],
              "description": "Emitted when showing/hidden state changes; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
                }
              ],
              "description": "Emitted after component has triggered show()",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "before-show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
                }
              ],
              "description": "Emitted when component triggers show() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
                }
              ],
              "description": "Emitted after component has triggered hide()",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "before-hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
                }
              ],
              "description": "Emitted when component triggers hide() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "click",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
                }
              ],
              "description": "Emitted when user clicks/taps on the main button (not the icon one, if using 'split')",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            },
            {
              "name": "label",
              "description": "Customize main button's content through this slot, unless you're using the 'icon' and 'label' props",
              "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
            }
          ],
          "description": "QBtnDropdown - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/button-dropdown"
        },
        {
          "name": "QBtnGroup",
          "source": {
            "module": "quasar",
            "symbol": "QBtnGroup"
          },
          "attributes": [
            {
              "name": "spread",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Spread horizontally to all available space",
              "doc-url": "https://v2.quasar.dev/vue-components/button-group",
              "type": "boolean"
            },
            {
              "name": "outline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outline' design for buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/button-group",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'flat' design for buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/button-group",
              "type": "boolean"
            },
            {
              "name": "unelevated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove shadow on buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/button-group",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a more prominent border-radius for squared shape buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/button-group",
              "type": "boolean"
            },
            {
              "name": "push",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'push' design for buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/button-group",
              "type": "boolean"
            },
            {
              "name": "stretch",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "When used on flexbox parent, buttons will stretch to parent's height",
              "doc-url": "https://v2.quasar.dev/vue-components/button-group",
              "type": "boolean"
            },
            {
              "name": "glossy",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a glossy effect",
              "doc-url": "https://v2.quasar.dev/vue-components/button-group",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Suggestion: QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/button-group"
            }
          ],
          "description": "QBtnGroup - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/button-group"
        },
        {
          "name": "QBtnToggle",
          "source": {
            "module": "quasar",
            "symbol": "QBtnToggle"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Model of the component; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"selected\"",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "required": true
            },
            {
              "name": "options",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Array of Objects defining each option\n\nExamples:\n[ {label: 'One', value: 'one'}, {label: 'Two', value: 'two'} ]",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "required": true
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
            },
            {
              "name": "toggle-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "default": "\"primary\""
            },
            {
              "name": "toggle-text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
            },
            {
              "name": "spread",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Spread horizontally to all available space",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "outline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outline' design",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'flat' design",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "unelevated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove shadow",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a more prominent border-radius for a squared shape button",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "push",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'push' design",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "glossy",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a glossy effect",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Button size name or a CSS unit including unit name\n\nExamples:\nxs\nsm\nmd\nlg\nxl\n25px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
            },
            {
              "name": "padding",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set\n\nExamples:\n16px\n10px 5px\n2rem\nxs\nmd lg\n2px 2px 5px 7px",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
            },
            {
              "name": "no-caps",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Avoid turning label text into caps (which happens by default)",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "no-wrap",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Avoid label text wrapping",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "ripple",
              "value": {
                "kind": "expression",
                "type": "boolean|object"
              },
              "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)\n\nExamples:\nfalse\n{ early: true, center: true, color: 'teal', keyCodes: [] }",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "default": "true"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "stack",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Stack icon and label vertically instead of on same line (like it is by default)",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "stretch",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "When used on flexbox parent, button will stretch to parent's height",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            },
            {
              "name": "clearable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Clears model on click of the already selected button",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
            },
            {
              "name": "clear",
              "description": "When using the 'clearable' property, this event is emitted when the already selected button is clicked",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Suggestions: QTooltip, QBadge",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
            },
            {
              "name": "...",
              "description": "Any other dynamic slots to be used with 'slot' property of the 'options' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
            }
          ],
          "description": "QBtnToggle - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/button-toggle"
        },
        {
          "name": "QBtn",
          "source": {
            "module": "quasar",
            "symbol": "QBtn"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "type",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "1) Define the button native type attribute (submit, reset, button) or 2) render component with <a> tag so you can access events even if disable or 3) Use 'href' prop and specify 'type' as a media tag\n\nExamples:\na\nsubmit\nbutton\nreset\nimage/png\nhref=\"https://quasar.dev\" target=\"_blank\"",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "default": "\"button\""
            },
            {
              "name": "to",
              "value": {
                "kind": "expression",
                "type": "string|object"
              },
              "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used\n\nExamples:\n/home/dashboard\n:to=\"{ name: 'my-route-name' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "replace",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "href",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link href attribute; Has priority over the 'to' and 'replace' props\n\nExamples:\nhttp://quasar.dev\nhref=\"https://quasar.dev\" target=\"_blank\"",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "target",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link target attribute; Use it only with 'to' or 'href' props\n\nExamples:\n_blank\n_self\n_parent\n_top",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "The text that will be shown on the button\n\nExamples:\nButton Label",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "icon-right",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "outline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outline' design",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'flat' design",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "unelevated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove shadow",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a more prominent border-radius for a squared shape button",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "push",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'push' design",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "glossy",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a glossy effect",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "fab",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Makes button size and shape to fit a Floating Action Button",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "fab-mini",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Makes button size and shape to fit a small Floating Action Button",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "padding",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set\n\nExamples:\n16px\n10px 5px\n2rem\nxs\nmd lg\n2px 2px 5px 7px",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "no-caps",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Avoid turning label text into caps (which happens by default)",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "no-wrap",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Avoid label text wrapping",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "ripple",
              "value": {
                "kind": "expression",
                "type": "boolean|object"
              },
              "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)\n\nExamples:\nfalse\n{ early: true, center: true, color: 'teal', keyCodes: [] }",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "default": "true"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "align",
              "value": {
                "kind": "expression",
                "type": "'left'|'right'|'center'|'around'|'between'|'evenly'"
              },
              "description": "Label or content alignment",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "default": "\"center\""
            },
            {
              "name": "stack",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Stack icon and label vertically instead of on same line (like it is by default)",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "stretch",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "When used on flexbox parent, button will stretch to parent's height",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "loading",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put button into loading state (displays a QSpinner -- can be overridden by using a 'loading' slot)",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "round",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Makes a circle shaped button",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            },
            {
              "name": "percentage",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Percentage (0.0 < x < 100.0); To be used along 'loading' prop; Display a progress bar on the background\n\nExamples:\n23",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "dark-percentage",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Progress bar on the background should have dark color; To be used along with 'percentage' and 'loading' props",
              "doc-url": "https://v2.quasar.dev/vue-components/button",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "click",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object; If you want to cancel navigation set synchronously 'evt.navigate' to false",
                  "doc-url": "https://v2.quasar.dev/vue-components/button"
                },
                {
                  "name": "navigateFn",
                  "type": "Function",
                  "description": "When you need to control the time at which the button should trigger the route navigation then set 'evt.navigate' to false and call this function; Useful if you have async work to be done before the actual route navigation",
                  "doc-url": "https://v2.quasar.dev/vue-components/button"
                }
              ],
              "description": "Emitted when component is clicked (activated)",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Use for custom content, instead of relying on 'icon' and 'label' props",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            },
            {
              "name": "loading",
              "description": "Override the default QSpinner when in 'loading' state",
              "doc-url": "https://v2.quasar.dev/vue-components/button"
            }
          ],
          "description": "QBtn - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/button"
        },
        {
          "name": "QCard",
          "source": {
            "module": "quasar",
            "symbol": "QCard"
          },
          "attributes": [
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/card",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Removes border-radius so borders are squared",
              "doc-url": "https://v2.quasar.dev/vue-components/card",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a 'flat' design (no default shadow)",
              "doc-url": "https://v2.quasar.dev/vue-components/card",
              "type": "boolean"
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/vue-components/card",
              "type": "boolean"
            },
            {
              "name": "tag",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "HTML tag to use\n\nExamples:\ndiv\nspan\ndiv\nform",
              "doc-url": "https://v2.quasar.dev/vue-components/card",
              "default": "\"div\""
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/card"
            }
          ],
          "description": "QCard - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/card"
        },
        {
          "name": "QCardActions",
          "source": {
            "module": "quasar",
            "symbol": "QCardActions"
          },
          "attributes": [
            {
              "name": "align",
              "value": {
                "kind": "expression",
                "type": "'left'|'center'|'right'|'between'|'around'|'evenly'|'stretch'"
              },
              "description": "Specify how to align the actions",
              "doc-url": "https://v2.quasar.dev/vue-components/card",
              "default": "\"left (for horizontal mode) / stretch (for vertical mode)\""
            },
            {
              "name": "vertical",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display actions one below the other",
              "doc-url": "https://v2.quasar.dev/vue-components/card",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Suggestions: QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/card"
            }
          ],
          "description": "QCardActions - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/card"
        },
        {
          "name": "QCardSection",
          "source": {
            "module": "quasar",
            "symbol": "QCardSection"
          },
          "attributes": [
            {
              "name": "horizontal",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display a horizontal section (will have no padding and can contain other QCardSection)",
              "doc-url": "https://v2.quasar.dev/vue-components/card",
              "type": "boolean"
            },
            {
              "name": "tag",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "HTML tag to use\n\nExamples:\ndiv\nspan\ndiv\nform",
              "doc-url": "https://v2.quasar.dev/vue-components/card",
              "default": "\"div\""
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/card"
            }
          ],
          "description": "QCardSection - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/card"
        },
        {
          "name": "QCarousel",
          "source": {
            "module": "quasar",
            "symbol": "QCarousel"
          },
          "attributes": [
            {
              "name": "fullscreen",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Fullscreen mode\n\nExamples:\nv-model:fullscreen=\"isFullscreen\"",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "no-route-fullscreen-exit",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Changing route app won't exit fullscreen",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Model of the component defining the current panel's name; If a Number is used, it does not define the panel's index, but rather the panel's name which can also be an Integer; Either use this property (along with a listener for 'update:model-value' event) OR use the v-model directive.\n\nExamples:\nv-model=\"panelName\"",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "keep-alive",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to using Vue's native <keep-alive> component on the content",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "keep-alive-include",
              "value": {
                "kind": "expression",
                "type": "string|any[]|RegExp"
              },
              "description": "Equivalent to using Vue's native include prop for <keep-alive>; Values must be valid Vue component names\n\nExamples:\na,b\n/a|b/\n['a', 'b']",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "keep-alive-exclude",
              "value": {
                "kind": "expression",
                "type": "string|any[]|RegExp"
              },
              "description": "Equivalent to using Vue's native exclude prop for <keep-alive>; Values must be valid Vue component names\n\nExamples:\na,b\n/a|b/\n['a', 'b']",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "keep-alive-max",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Equivalent to using Vue's native max prop for <keep-alive>\n\nExamples:\n2",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "animated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enable transitions between panel (also see 'transition-prev' and 'transition-next' props)",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "infinite",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Makes component appear as infinite (when reaching last panel, next one will become the first one)",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "swipeable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enable swipe events (may interfere with content's touch/mouse events)",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "vertical",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Default transitions and swipe actions will be on the vertical axis",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "transition-prev",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "default": "\"fade\""
            },
            {
              "name": "transition-next",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "default": "\"fade\""
            },
            {
              "name": "transition-duration",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Transition duration (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "default": "300"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "height",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Height of Carousel in CSS units, including unit name\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "padding",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default padding to each slide, according to the usage of 'arrows' and 'navigation' props",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "control-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for QCarousel button controls (arrows, navigation) from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "control-text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for text color of QCarousel button controls (arrows, navigation) from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "control-type",
              "value": {
                "kind": "expression",
                "type": "'regular'|'flat'|'outline'|'push'|'unelevated'"
              },
              "description": "Type of button to use for controls (arrows, navigation)",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "autoplay",
              "value": {
                "kind": "expression",
                "type": "number|boolean"
              },
              "description": "Jump to next slide (if 'true' or val > 0) or previous slide (if val < 0) at fixed time intervals (in milliseconds); 'false' disables autoplay, 'true' enables it for 5000ms intervals\n\nExamples:\n:autoplay=\"2500\"\ntrue\nfalse",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "arrows",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show navigation arrow buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "prev-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "next-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "navigation",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show navigation dots",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "navigation-position",
              "value": {
                "kind": "expression",
                "type": "'top'|'right'|'bottom'|'left'"
              },
              "description": "Side to stick navigation to\n\nExamples:\nleft",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "default": "\"bottom/right\""
            },
            {
              "name": "navigation-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "navigation-active-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention for the active (current slide) navigation icon; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "thumbnails",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show thumbnails",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "string|number",
                  "description": "New current panel name\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/carousel"
                }
              ],
              "description": "Emitted when the component changes the model; This event _isn't_ fired if the model is changed externally; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "before-transition",
              "arguments": [
                {
                  "name": "newVal",
                  "type": "string|number",
                  "description": "Panel name towards transition is going\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/carousel"
                },
                {
                  "name": "oldVal",
                  "type": "string|number",
                  "description": "Panel name from which transition is happening\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/carousel"
                }
              ],
              "description": "Emitted before transitioning to a new panel",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "transition",
              "arguments": [
                {
                  "name": "newVal",
                  "type": "string|number",
                  "description": "Panel name towards transition has occurred\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/carousel"
                },
                {
                  "name": "oldVal",
                  "type": "string|number",
                  "description": "Panel name from which transition has happened\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/carousel"
                }
              ],
              "description": "Emitted after component transitioned to a new panel",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Suggestion: QCarouselSlide",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "control",
              "description": "Slot specific for QCarouselControl",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            },
            {
              "name": "navigation-icon",
              "description": "Slot for navigation icon/btn; Suggestion: QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            }
          ],
          "description": "QCarousel - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/carousel"
        },
        {
          "name": "QCarouselControl",
          "source": {
            "module": "quasar",
            "symbol": "QCarouselControl"
          },
          "attributes": [
            {
              "name": "position",
              "value": {
                "kind": "expression",
                "type": "'top-right'|'top-left'|'bottom-right'|'bottom-left'|'top'|'right'|'bottom'|'left'"
              },
              "description": "Side/corner to stick to\n\nExamples:\ntop-right",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "default": "\"bottom-right\""
            },
            {
              "name": "offset",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "An array of two numbers to offset the component horizontally and vertically (in pixels)\n\nExamples:\n[8, 8]\n[5, 10]",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "default": "\"[18, 18]\""
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            }
          ],
          "description": "QCarouselControl - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/carousel"
        },
        {
          "name": "QCarouselSlide",
          "source": {
            "module": "quasar",
            "symbol": "QCarouselSlide"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Slide name\n\nExamples:\naccounts\nfirstPanel\n:name=\"1\"\naccounts\nfirstSlide\n:name=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "required": true
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel",
              "type": "boolean"
            },
            {
              "name": "img-src",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "URL pointing to a slide background image (use public folder)\n\nExamples:\n(public folder) src=\"img/my-bg.png\"\n(assets folder) src=\"~assets/my-img.png\"\n(relative path format) :src=\"require('./my_img.jpg')\"\n(URL) src=\"https://placeimg.com/500/300/nature\"",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/carousel"
            }
          ],
          "description": "QCarouselSlide - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/carousel"
        },
        {
          "name": "QChatMessage",
          "source": {
            "module": "quasar",
            "symbol": "QChatMessage"
          },
          "attributes": [
            {
              "name": "sent",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Render as a sent message (so from current user)",
              "doc-url": "https://v2.quasar.dev/vue-components/chat",
              "type": "boolean"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Renders a label header/section only\n\nExamples:\nFriday, 18th",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "bg-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name (from the Quasar Color Palette) for chat bubble background\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name (from the Quasar Color Palette) for chat bubble text\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Author's name\n\nExamples:\nJohn Doe",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "avatar",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "URL to the avatar image of the author\n\nExamples:\n(public folder) src=\"boy-avatar.png\"\n(assets folder) src=\"~assets/boy-avatar.png\"\n(relative path format) :src=\"require('./my_img.jpg')\"\n(URL) src=\"https://placeimg.com/500/300/nature\"",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "text",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Array of strings that are the message body. Strings are not sanitized (see details in docs)\n\nExamples:\n:text=\"['How are you?']\"\n:text=\"['I\\'m good, thank you!', 'And you?']\"",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "stamp",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Creation timestamp\n\nExamples:\n13:55\nYesterday at 13:51",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "1-12 out of 12 (same as col-*)\n\nExamples:\n4\n6\n12",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "label-html",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Render the label as HTML; This can lead to XSS attacks so make sure that you sanitize the message first",
              "doc-url": "https://v2.quasar.dev/vue-components/chat",
              "type": "boolean"
            },
            {
              "name": "name-html",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Render the name as HTML; This can lead to XSS attacks so make sure that you sanitize the message first",
              "doc-url": "https://v2.quasar.dev/vue-components/chat",
              "type": "boolean"
            },
            {
              "name": "text-html",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Render the text as HTML; This can lead to XSS attacks so make sure that you sanitize the message first",
              "doc-url": "https://v2.quasar.dev/vue-components/chat",
              "type": "boolean"
            },
            {
              "name": "stamp-html",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Render the stamp as HTML; This can lead to XSS attacks so make sure that you sanitize the message first",
              "doc-url": "https://v2.quasar.dev/vue-components/chat",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "You can use this slot to define a custom message (overrides props)",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "avatar",
              "description": "Slot for avatar; Suggestion: QAvatar, img",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "name",
              "description": "Slot for name; Overrides the 'name' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "stamp",
              "description": "Slot for stamp; Overrides the 'stamp' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            },
            {
              "name": "label",
              "description": "Slot for label; Overrides the 'label' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/chat"
            }
          ],
          "description": "QChatMessage - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/chat"
        },
        {
          "name": "QCheckbox",
          "source": {
            "module": "quasar",
            "symbol": "QCheckbox"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "any|any[]"
              },
              "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive\n\nExamples:\nfalse\n['car', 'building']",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox",
              "required": true
            },
            {
              "name": "val",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Works when model ('value') is Array. It tells the component which value should add/remove when ticked/unticked\n\nExamples:\ncar",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            },
            {
              "name": "true-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "What model value should be considered as checked/ticked/on?\n\nExamples:\nAgreed",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox",
              "default": "true"
            },
            {
              "name": "false-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "What model value should be considered as unchecked/unticked/off?\n\nExamples:\nDisagree",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            },
            {
              "name": "indeterminate-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "What model value should be considered as 'indeterminate'?\n\nExamples:\n0\nnot_answered",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            },
            {
              "name": "toggle-order",
              "value": {
                "kind": "expression",
                "type": "'tf'|'ft'"
              },
              "description": "Determines toggle order of the two states ('t' stands for state of true, 'f' for state of false); If 'toggle-indeterminate' is true, then the order is: indet -> first state -> second state -> indet (and repeat), otherwise: indet -> first state -> second state -> first state -> second state -> ...",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox",
              "default": "\"tf\""
            },
            {
              "name": "toggle-indeterminate",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "When user clicks/taps on the component, should we toggle through the indeterminate state too?",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox",
              "type": "boolean"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Label to display along the component (or use the default slot instead of this prop)\n\nExamples:\nI agree with the Terms and Conditions",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            },
            {
              "name": "left-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Label (if any specified) should be displayed on the left side of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox",
              "type": "boolean"
            },
            {
              "name": "checked-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The icon to be used when the model is truthy (instead of the default design)\n\nExamples:\nvisibility",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            },
            {
              "name": "unchecked-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The icon to be used when the toggle is falsy (instead of the default design)\n\nExamples:\nvisibility_off",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            },
            {
              "name": "indeterminate-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The icon to be used when the model is indeterminate (instead of the default design)\n\nExamples:\nhelp",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            },
            {
              "name": "keep-color",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Should the color (if specified any) be kept when the component is unticked/ off?",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox",
              "type": "boolean"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
                },
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot can be used as label, unless 'label' prop is specified; Suggestion: string",
              "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
            }
          ],
          "description": "QCheckbox - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/checkbox"
        },
        {
          "name": "QChip",
          "source": {
            "module": "quasar",
            "symbol": "QChip"
          },
          "attributes": [
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/chip",
              "type": "boolean"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "QChip size name or a CSS unit including unit name\n\nExamples:\nxs\nsm\nmd\nlg\nxl\n25px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/chip",
              "type": "boolean"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            },
            {
              "name": "icon-right",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            },
            {
              "name": "icon-remove",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            },
            {
              "name": "icon-selected",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Chip's content as string; overrides default slot if specified\n\nExamples:\nJohn Doe\nBook",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Model of the component determining if QChip should be rendered or not",
              "doc-url": "https://v2.quasar.dev/vue-components/chip",
              "default": "true",
              "type": "boolean"
            },
            {
              "name": "selected",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Model for QChip if it's selected or not\n\nExamples:\nv-model:selected=\"myState\"",
              "doc-url": "https://v2.quasar.dev/vue-components/chip",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Sets a low value for border-radius instead of the default one, making it close to a square",
              "doc-url": "https://v2.quasar.dev/vue-components/chip",
              "type": "boolean"
            },
            {
              "name": "outline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display using the 'outline' design",
              "doc-url": "https://v2.quasar.dev/vue-components/chip",
              "type": "boolean"
            },
            {
              "name": "clickable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Is QChip clickable? If it's the case, then it will add hover effects and emit 'click' events",
              "doc-url": "https://v2.quasar.dev/vue-components/chip",
              "type": "boolean"
            },
            {
              "name": "removable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "If set, then it displays a 'remove' icon that when clicked the QChip emits 'remove' event",
              "doc-url": "https://v2.quasar.dev/vue-components/chip",
              "type": "boolean"
            },
            {
              "name": "ripple",
              "value": {
                "kind": "expression",
                "type": "boolean|object"
              },
              "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)\n\nExamples:\nfalse\n{ early: true, center: true, color: 'teal', keyCodes: [] }",
              "doc-url": "https://v2.quasar.dev/vue-components/chip",
              "default": "true"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/chip",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "click",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/chip"
                }
              ],
              "description": "Emitted on QChip click if 'clickable' property is set",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            },
            {
              "name": "update:selected",
              "arguments": [
                {
                  "name": "state",
                  "type": "boolean",
                  "description": "Selected state",
                  "doc-url": "https://v2.quasar.dev/vue-components/chip"
                }
              ],
              "description": "Used by Vue on 'v-model:selected' for updating its value",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            },
            {
              "name": "remove",
              "arguments": [
                {
                  "name": "state",
                  "type": "boolean",
                  "description": "Render state (render or not)",
                  "doc-url": "https://v2.quasar.dev/vue-components/chip"
                }
              ],
              "description": "Works along with 'value' and 'removable' prop. Emitted when toggling rendering state of the QChip",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "This is where QChip content goes, if not using 'label' property",
              "doc-url": "https://v2.quasar.dev/vue-components/chip"
            }
          ],
          "description": "QChip - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/chip"
        },
        {
          "name": "QCircularProgress",
          "source": {
            "module": "quasar",
            "symbol": "QCircularProgress"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress"
            },
            {
              "name": "value",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Current progress (must be between min/max)\n\nExamples:\n0\n100\n52.32",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress"
            },
            {
              "name": "min",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Minimum value defining 'no progress' (must be lower than 'max')\n\nExamples:\n0\n100\n52.32",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress"
            },
            {
              "name": "max",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Maximum value defining 100% progress made (must be higher than 'min')\n\nExamples:\n100\n52.32",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress",
              "default": "100"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the arc progress from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress"
            },
            {
              "name": "center-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the center part of the component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress"
            },
            {
              "name": "track-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the track of the component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress"
            },
            {
              "name": "font-size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size of text in CSS units, including unit name. Suggestion: use 'em' units to sync with component size\n\nExamples:\n1em\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress",
              "default": "\"0.25em\""
            },
            {
              "name": "thickness",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Thickness of progress arc as a ratio (0.0 < x < 1.0) of component size\n\nExamples:\n1\n0.3",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress",
              "default": "0.2"
            },
            {
              "name": "angle",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Angle to rotate progress arc by\n\nExamples:\n0\n40\n90",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress"
            },
            {
              "name": "indeterminate",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component into 'indeterminate' state; Ignores 'value' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress",
              "type": "boolean"
            },
            {
              "name": "show-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enables the default slot and uses it (if available), otherwise it displays the 'value' prop as text; Make sure the text has enough space to be displayed inside the component",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress",
              "type": "boolean"
            },
            {
              "name": "reverse",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Reverses the direction of progress; Only for determined state",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress",
              "type": "boolean"
            },
            {
              "name": "instant-feedback",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "No animation when model changes",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress",
              "type": "boolean"
            },
            {
              "name": "animation-speed",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Animation speed (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress",
              "default": "600"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Used for component content only if 'show-value' prop is set; Make sure the content has enough space to be displayed inside the component",
              "doc-url": "https://v2.quasar.dev/vue-components/circular-progress"
            }
          ],
          "description": "QCircularProgress - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/circular-progress",
          "vue-model": {
            "prop": "value",
            "event": "input"
          }
        },
        {
          "name": "QColor",
          "source": {
            "module": "quasar",
            "symbol": "QColor"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "string|null|undefined"
              },
              "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive\n\nExamples:\nv-model=\"myColor\"",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "required": true
            },
            {
              "name": "default-value",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The default value to show when the model doesn't have one\n\nExamples:\ndefault-value=\"#c0c0c0\"",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker"
            },
            {
              "name": "default-view",
              "value": {
                "kind": "expression",
                "type": "'spectrum'|'tune'|'palette'"
              },
              "description": "The default view of the picker",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "default": "\"spectrum\""
            },
            {
              "name": "format-model",
              "value": {
                "kind": "expression",
                "type": "'auto'|'hex'|'rgb'|'hexa'|'rgba'"
              },
              "description": "Forces a certain model format upon the model\n\nExamples:\nhex",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "default": "\"auto\""
            },
            {
              "name": "palette",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Use a custom palette of colors for the palette tab\n\nExamples:\n:palette=\"[ '#019A9D', '#D9B801', 'rgb(23,120,0)', '#B2028A' ]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "default": "\"(hard-coded palette)\""
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Removes border-radius so borders are squared",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a 'flat' design (no default shadow)",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "type": "boolean"
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "type": "boolean"
            },
            {
              "name": "no-header",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not render header",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "type": "boolean"
            },
            {
              "name": "no-header-tabs",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not render header tabs (only the input)",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "type": "boolean"
            },
            {
              "name": "no-footer",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not render footer; Useful when you want a specific view ('default-view' prop) and don't want the user to be able to switch it",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "string|null",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/color-picker"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker"
            },
            {
              "name": "change",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/color-picker"
                }
              ],
              "description": "Emitted on lazy model value change (after user finishes selecting a color)",
              "doc-url": "https://v2.quasar.dev/vue-components/color-picker"
            }
          ],
          "slots": [],
          "description": "QColor - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/color-picker"
        },
        {
          "name": "QDate",
          "source": {
            "module": "quasar",
            "symbol": "QDate"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "landscape",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display the component in landscape mode",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "mask",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Mask (formatting string) used for parsing and formatting value\n\nExamples:\nYYYY-MM-DD\nMMMM Do, YYYY\nYYYY-MM-DD HH:mm:ss",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "default": "\"YYYY/MM/DD\""
            },
            {
              "name": "locale",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "Locale formatting options\n\nExamples:\n:locale=\"{ monthsShort: ['Ian', 'Feb', 'Mar', '...'] }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "calendar",
              "value": {
                "kind": "expression",
                "type": "'gregorian'|'persian'"
              },
              "description": "Specify calendar type",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "default": "\"gregorian\""
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Removes border-radius so borders are squared",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a 'flat' design (no default shadow)",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object|null|undefined"
              },
              "description": "Date(s) of the component; Must be Array if using 'multiple' prop; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive\n\nExamples:\nv-model=\"myDate\"\nv-model=\"[myDate1, myDate2]\"\nv-model=\"[{ from: myDateFrom, to: myDateTo }]\"\nv-model=\"[myDate1, { from: myDateFrom, to: myDateTo }, myDate2]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "required": true
            },
            {
              "name": "title",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "When specified, it overrides the default header title; Makes sense when not in 'minimal' mode\n\nExamples:\nBirthday",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "subtitle",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "When specified, it overrides the default header subtitle; Makes sense when not in 'minimal' mode\n\nExamples:\nJohn Doe",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "default-year-month",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The default year and month to display (in YYYY/MM format) when model is unfilled (undefined or null); Please ensure it is within the navigation min/max year-month (if using them)\n\nExamples:\n1986/02",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "default-view",
              "value": {
                "kind": "expression",
                "type": "'Calendar'|'Months'|'Years'"
              },
              "description": "The view which will be displayed by default",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "default": "\"Calendar\""
            },
            {
              "name": "years-in-month-view",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show the years selector in months view",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "events",
              "value": {
                "kind": "expression",
                "type": "any[]|Function"
              },
              "description": "A list of events to highlight on the calendar; If using a function, it receives the date as a String and must return a Boolean (matches or not); If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\n:events=\"['2018/11/05', '2018/11/06', '2018/11/09', '2018/11/23']\"\n:events=\"date => date[9] % 3 === 0\"",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "event-color",
              "value": {
                "kind": "expression",
                "type": "string|Function"
              },
              "description": "Color name (from the Quasar Color Palette); If using a function, it receives the date as a String and must return a String (color for the received date); If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\nteal-10\n:event-color=\"(date) => date[9] % 2 === 0 ? 'teal' : 'orange'\"",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "options",
              "value": {
                "kind": "expression",
                "type": "any[]|Function"
              },
              "description": "Optionally configure the days that are selectable; If using a function, it receives the date as a String and must return a Boolean (is date acceptable or not); If using a function then for best performance, reference it from your scope and do not define it inline; Incompatible with 'range' prop\n\nExamples:\n:options=\"['2018/11/05', '2018/11/12', '2018/11/19', '2018/11/26' ]\"\n:options=\"date => date[9] % 3 === 0\"\n:options=\"date => date >= '2018/11/03' && date <= '2018/11/15'\"",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "navigation-min-year-month",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Lock user from navigating below a specific year+month (in YYYY/MM format); This prop is not used to correct the model; You might want to also use 'default-year-month' prop\n\nExamples:\n2020/07",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "navigation-max-year-month",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Lock user from navigating above a specific year+month (in YYYY/MM format); This prop is not used to correct the model; You might want to also use 'default-year-month' prop\n\nExamples:\n2020/10",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "no-unset",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove ability to unselect a date; It does not apply to selecting a range over already selected dates",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "first-day-of-week",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Sets the day of the week that is considered the first day (0 - Sunday, 1 - Monday, ...); This day will show in the left-most column of the calendar\n\nExamples:\nfirst-day-of-week=\"1\"\n:first-day-of-week=\"selectedFirstDayOfTheWeek\"",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "default": "\"(based on configured Quasar lang language)\""
            },
            {
              "name": "today-btn",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display a button that selects the current day",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "minimal",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Don’t display the header",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "multiple",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allow multiple selection; Model must be Array",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "range",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allow range selection; Partial compatibility with 'options' prop: selected ranges might also include 'unselectable' days",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            },
            {
              "name": "emit-immediately",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Emit model when user browses month and year too; ONLY for single selection (non-multiple, non-range)",
              "doc-url": "https://v2.quasar.dev/vue-components/date",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "string|any[]|object|null",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/date"
                },
                {
                  "name": "reason",
                  "type": "'add-day'|'remove-day'|'add-range'|'remove-range'|'mask'|'locale'|'year'|'month'",
                  "description": "Reason of the user interaction (what was picked)",
                  "doc-url": "https://v2.quasar.dev/vue-components/date"
                },
                {
                  "name": "details",
                  "type": "object",
                  "description": "Object of properties on the new model",
                  "doc-url": "https://v2.quasar.dev/vue-components/date"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "navigation",
              "arguments": [
                {
                  "name": "view",
                  "type": "object",
                  "description": "Definition of the current view (year, month)",
                  "doc-url": "https://v2.quasar.dev/vue-components/date"
                }
              ],
              "description": "Emitted when user navigates to a different month or year (and even when the model changes from an outside source)",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "range-start",
              "arguments": [
                {
                  "name": "from",
                  "type": "object",
                  "description": "Definition of date from where the range begins",
                  "doc-url": "https://v2.quasar.dev/vue-components/date"
                }
              ],
              "description": "User has started a range selection",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            },
            {
              "name": "range-end",
              "arguments": [
                {
                  "name": "range",
                  "type": "object",
                  "description": "Definition of the range",
                  "doc-url": "https://v2.quasar.dev/vue-components/date"
                }
              ],
              "description": "User has ended a range selection",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "This is where additional buttons can go",
              "doc-url": "https://v2.quasar.dev/vue-components/date"
            }
          ],
          "description": "QDate - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/date"
        },
        {
          "name": "QDialog",
          "source": {
            "module": "quasar",
            "symbol": "QDialog"
          },
          "attributes": [
            {
              "name": "transition-show",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "default": "\"fade\""
            },
            {
              "name": "transition-hide",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "default": "\"fade\""
            },
            {
              "name": "transition-duration",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Transition duration (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "default": "300"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "persistent",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "User cannot dismiss Dialog if clicking outside of it or hitting ESC key; Also, an app route change won't dismiss it",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "no-esc-dismiss",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "User cannot dismiss Dialog by hitting ESC key; No need to set it if 'persistent' prop is also set",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "no-backdrop-dismiss",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "User cannot dismiss Dialog by clicking outside of it; No need to set it if 'persistent' prop is also set",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "no-route-dismiss",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Changing route app won't dismiss Dialog; No need to set it if 'persistent' prop is also set",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "auto-close",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Any click/tap inside of the dialog will close it",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "seamless",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put Dialog into seamless mode; Does not use a backdrop so user is able to interact with the rest of the page too",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "maximized",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put Dialog into maximized mode",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "full-width",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dialog will try to render with same width as the window",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "full-height",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dialog will try to render with same height as the window",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "position",
              "value": {
                "kind": "expression",
                "type": "'standard'|'top'|'right'|'bottom'|'left'"
              },
              "description": "Stick dialog to one of the sides (top, right, bottom or left)\n\nExamples:\ntop\nright",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "default": "\"standard\""
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Forces content to have squared borders",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "no-refocus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "(Accessibility) When Dialog gets hidden, do not refocus on the DOM element that previously had focus",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "no-focus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "(Accessibility) When Dialog gets shown, do not switch focus on it",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            },
            {
              "name": "no-shake",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not shake up the Dialog to catch user's attention",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "boolean",
                  "description": "New state (showing/hidden)",
                  "doc-url": "https://v2.quasar.dev/vue-components/dialog"
                }
              ],
              "description": "Emitted when showing/hidden state changes; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog"
            },
            {
              "name": "show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/dialog"
                }
              ],
              "description": "Emitted after component has triggered show()",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog"
            },
            {
              "name": "before-show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/dialog"
                }
              ],
              "description": "Emitted when component triggers show() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog"
            },
            {
              "name": "hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/dialog"
                }
              ],
              "description": "Emitted after component has triggered hide()",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog"
            },
            {
              "name": "before-hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/dialog"
                }
              ],
              "description": "Emitted when component triggers hide() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog"
            },
            {
              "name": "shake",
              "description": "Emitted when the Dialog shakes in order to catch user's attention, unless the 'no-shake' property is set",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog"
            },
            {
              "name": "escape-key",
              "description": "Emitted when ESC key is pressed; Does not get emitted if Dialog is 'persistent' or it has 'no-esc-key' set",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/dialog"
            }
          ],
          "description": "QDialog - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/dialog"
        },
        {
          "name": "QDrawer",
          "source": {
            "module": "quasar",
            "symbol": "QDrawer"
          },
          "attributes": [
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            },
            {
              "name": "side",
              "value": {
                "kind": "expression",
                "type": "'left'|'right'"
              },
              "description": "Side to attach to\n\nExamples:\nright",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "default": "\"left\""
            },
            {
              "name": "overlay",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Puts drawer into overlay mode (does not occupy space on screen, narrowing the page)",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            },
            {
              "name": "width",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Width of drawer (in pixels)\n\nExamples:\n:width=\"350\"",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "default": "300"
            },
            {
              "name": "mini",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Puts drawer into mini mode",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            },
            {
              "name": "mini-width",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Width of drawer (in pixels) when in mini mode\n\nExamples:\n:mini-width=\"100\"",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "default": "60"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            },
            {
              "name": "mini-to-overlay",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Mini mode will expand as an overlay",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            },
            {
              "name": "breakpoint",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Breakpoint (in pixels) of layout width up to which mobile mode is used\n\nExamples:\n1200\n:breakpoint=\"1400\"",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "default": "1023"
            },
            {
              "name": "behavior",
              "value": {
                "kind": "expression",
                "type": "'default'|'desktop'|'mobile'"
              },
              "description": "Overrides the default dynamic mode into which the drawer is put on\n\nExamples:\nmobile",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "default": "\"default\""
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            },
            {
              "name": "elevated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Adds a default shadow to the header",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            },
            {
              "name": "persistent",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Prevents drawer from auto-closing when app's route changes",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            },
            {
              "name": "show-if-above",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Forces drawer to be shown on screen on initial render if the layout width is above breakpoint, regardless of v-model; This is the default behavior when SSR is taken over by client on initial render",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            },
            {
              "name": "no-swipe-open",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Disables the default behavior where drawer can be swiped into view; Useful for iOS platforms where it might interfere with Safari's 'swipe to go to previous/next page' feature",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            },
            {
              "name": "no-swipe-close",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Disables the default behavior where drawer can be swiped out of view (applies to drawer content only); Useful for iOS platforms where it might interfere with Safari's 'swipe to go to previous/next page' feature",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            },
            {
              "name": "no-swipe-backdrop",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Disables the default behavior where drawer backdrop can be swiped",
              "doc-url": "https://v2.quasar.dev/layout/drawer",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "boolean",
                  "description": "New state (showing/hidden)",
                  "doc-url": "https://v2.quasar.dev/layout/drawer"
                }
              ],
              "description": "Emitted when showing/hidden state changes; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            },
            {
              "name": "show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/layout/drawer"
                }
              ],
              "description": "Emitted after component has triggered show()",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            },
            {
              "name": "before-show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/layout/drawer"
                }
              ],
              "description": "Emitted when component triggers show() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            },
            {
              "name": "hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/layout/drawer"
                }
              ],
              "description": "Emitted after component has triggered hide()",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            },
            {
              "name": "before-hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/layout/drawer"
                }
              ],
              "description": "Emitted when component triggers hide() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            },
            {
              "name": "on-layout",
              "arguments": [
                {
                  "name": "state",
                  "type": "boolean",
                  "description": "New state",
                  "doc-url": "https://v2.quasar.dev/layout/drawer"
                }
              ],
              "description": "Emitted when drawer toggles between occupying space on page or not",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            },
            {
              "name": "click",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/layout/drawer"
                }
              ],
              "description": "Emitted when user clicks/taps on the component and drawer is NOT in mobile mode; Useful for when taking a decision to toggle mini mode",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            },
            {
              "name": "mouseover",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/layout/drawer"
                }
              ],
              "description": "Emitted when user moves mouse cursor over the component and drawer is NOT in mobile mode; Useful for when taking a decision to toggle mini mode",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            },
            {
              "name": "mouseout",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/layout/drawer"
                }
              ],
              "description": "Emitted when user moves mouse cursor out of the component and drawer is NOT in mobile mode; Useful for when taking a decision to toggle mini mode",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            },
            {
              "name": "mini-state",
              "arguments": [
                {
                  "name": "state",
                  "type": "boolean",
                  "description": "New state",
                  "doc-url": "https://v2.quasar.dev/layout/drawer"
                }
              ],
              "description": "Emitted when drawer changes the mini-mode state (sometimes it is forced to do so)",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component (overridden by 'mini' slot if used and drawer is in mini mode)",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            },
            {
              "name": "mini",
              "description": "Content to show when in mini mode (overrides 'default' slot)",
              "doc-url": "https://v2.quasar.dev/layout/drawer"
            }
          ],
          "description": "QDrawer - Quasar component",
          "doc-url": "https://v2.quasar.dev/layout/drawer"
        },
        {
          "name": "QEditor",
          "source": {
            "module": "quasar",
            "symbol": "QEditor"
          },
          "attributes": [
            {
              "name": "fullscreen",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Fullscreen mode\n\nExamples:\nv-model:fullscreen=\"isFullscreen\"",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "type": "boolean"
            },
            {
              "name": "no-route-fullscreen-exit",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Changing route app won't exit fullscreen",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "type": "boolean"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Model of the component; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"content\"",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "required": true
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Removes border-radius so borders are squared",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a 'flat' design (no borders)",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; toolbar buttons are shown on one-line only",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "type": "boolean"
            },
            {
              "name": "min-height",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "CSS unit for the minimum height of the editable area\n\nExamples:\n15rem\n50vh",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "default": "\"10rem\""
            },
            {
              "name": "max-height",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "CSS unit for maximum height of the input area\n\nExamples:\n1000px\n90vh",
              "doc-url": "https://v2.quasar.dev/vue-components/editor"
            },
            {
              "name": "height",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "CSS value to set the height of the editable area\n\nExamples:\n100px\n50vh",
              "doc-url": "https://v2.quasar.dev/vue-components/editor"
            },
            {
              "name": "definitions",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "Definition of commands and their buttons to be included in the 'toolbar' prop\n\nExamples:\n:definitions=\"{ save: { tip: 'Save your work', icon: 'save', label: 'Save', handler: saveWork }, upload: { tip: 'Upload to cloud', icon: 'cloud_upload', label: 'Upload', handler: uploadIt } }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/editor"
            },
            {
              "name": "fonts",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "Object with definitions of fonts\n\nExamples:\n:fonts=\"{ arial: 'Arial', arial_black: 'Arial Black', comic_sans: 'Comic Sans MS' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/editor"
            },
            {
              "name": "toolbar",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "An array of arrays of Objects/Strings that you use to define the construction of the elements and commands available in the toolbar\n\nExamples:\nleft,center,right,justify",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "default": "[[\"left\",\"center\",\"right\",\"justify\"],[\"bold\",\"italic\",\"underline\",\"strike\"],[\"undo\",\"redo\"]]"
            },
            {
              "name": "toolbar-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Font color (from the Quasar Palette) of buttons and text in the toolbar\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/editor"
            },
            {
              "name": "toolbar-text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Text color (from the Quasar Palette) of toolbar commands\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/editor"
            },
            {
              "name": "toolbar-toggle-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Choose the active color (from the Quasar Palette) of toolbar commands button\n\nExamples:\nsecondary\nblue-3",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "default": "\"primary\""
            },
            {
              "name": "toolbar-bg",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Toolbar background color (from Quasar Palette)\n\nExamples:\nsecondary\nblue-3",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "default": "\"grey-3\""
            },
            {
              "name": "toolbar-outline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Toolbar buttons are rendered \"outlined\"",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "type": "boolean"
            },
            {
              "name": "toolbar-push",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Toolbar buttons are rendered as a \"push-button\" type",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "type": "boolean"
            },
            {
              "name": "toolbar-rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Toolbar buttons are rendered \"rounded\"",
              "doc-url": "https://v2.quasar.dev/vue-components/editor",
              "type": "boolean"
            },
            {
              "name": "paragraph-tag",
              "value": {
                "kind": "expression",
                "type": "'div'|'p'"
              },
              "description": "Paragraph tag to be used",
              "doc-url": "https://v2.quasar.dev/vue-components/editor"
            },
            {
              "name": "content-style",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "Object with CSS properties and values for styling the container of QEditor\n\nExamples:\n:content-style=\"{ backgroundColor: '#C0C0C0' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/editor"
            },
            {
              "name": "content-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "CSS classes for the input area\n\nExamples:\nmy-special-class\n:content-class=\"{ 'my-special-class': <condition> }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/editor"
            },
            {
              "name": "placeholder",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Text to display as placeholder\n\nExamples:\nType your story here ...",
              "doc-url": "https://v2.quasar.dev/vue-components/editor"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "string",
                  "description": "The pure HTML of the content",
                  "doc-url": "https://v2.quasar.dev/vue-components/editor"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/editor"
            }
          ],
          "slots": [],
          "description": "QEditor - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/editor"
        },
        {
          "name": "QExpansionItem",
          "source": {
            "module": "quasar",
            "symbol": "QExpansionItem"
          },
          "attributes": [
            {
              "name": "to",
              "value": {
                "kind": "expression",
                "type": "string|object"
              },
              "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used\n\nExamples:\n/home/dashboard\n:to=\"{ name: 'my-route-name' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "exact",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to Vue Router <router-link> 'exact' property; Superseeded by 'href' prop if used",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "replace",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "active-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used\n\nExamples:\nmy-active-class",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "exact-active-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used\n\nExamples:\nmy-exact-active-class",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "href",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link href attribute; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props\n\nExamples:\nhttp://quasar.dev",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "target",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link target attribute; Use it only along with 'href' prop; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props\n\nExamples:\n_blank\n_self\n_parent\n_top",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Model of the component defining 'open' state; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "expand-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "expanded-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Expand icon name (following Quasar convention) for when QExpansionItem is expanded; When used, it also disables the rotation animation of the expand icon; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "expand-icon-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Apply custom class(es) to the expand icon item section\n\nExamples:\ntext-purple",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Header label (unless using 'header' slot)\n\nExamples:\nMy expansion item",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "label-lines",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Apply ellipsis when there's not enough space to render on the specified number of lines; If more than one line specified, then it will only work on webkit browsers because it uses the '-webkit-line-clamp' CSS property!\n\nExamples:\n1\n3\n:label-lines=\"2\"",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "caption",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Header sub-label (unless using 'header' slot)\n\nExamples:\nUnread message: 5",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "caption-lines",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Apply ellipsis when there's not enough space to render on the specified number of lines; If more than one line specified, then it will only work on webkit browsers because it uses the '-webkit-line-clamp' CSS property!\n\nExamples:\n1\n3\n:caption-lines=\"2\"",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "duration",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Animation duration (in milliseconds)\n\nExamples:\n:duration=\"1000\"",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "default": "300"
            },
            {
              "name": "header-inset-level",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Apply an inset to header (unless using 'header' slot); Useful when header avatar/left side is missing but you want to align content with other items that do have a left side, or when you're building a menu\n\nExamples:\n:header-inset-level=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "content-inset-level",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Apply an inset to content (changes content padding)\n\nExamples:\n:content-inset-level=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "expand-separator",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Apply a top and bottom separator when expansion item is opened",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "default-opened",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Puts expansion item into open state on initial render; Overridden by v-model if used",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "expand-icon-toggle",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies the expansion events to the expand icon only and not to the whole header",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "switch-toggle-side",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Switch expand icon side (from default 'right' to 'left')",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "dense-toggle",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use dense mode for expand icon",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "group",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Register expansion item into a group (unique name that must be applied to all expansion items in that group) for coordinated open/close state within the group a.k.a. 'accordion mode'\n\nExamples:\nmy-emails",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "popup",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put expansion list into 'popup' mode",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item",
              "type": "boolean"
            },
            {
              "name": "header-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Apply custom style to the header\n\nExamples:\nbackground: '#ff0000'\n:header-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "header-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Apply custom class(es) to the header\n\nExamples:\nmy-custom-class\n:header-class=\"{ 'my-custom-class': someCondition }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "boolean",
                  "description": "New state (showing/hidden)",
                  "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
                }
              ],
              "description": "Emitted when showing/hidden state changes; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
                }
              ],
              "description": "Emitted after component has triggered show()",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "before-show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
                }
              ],
              "description": "Emitted when component triggers show() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
                }
              ],
              "description": "Emitted after component has triggered hide()",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "before-hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
                }
              ],
              "description": "Emitted when component triggers hide() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "after-show",
              "description": "Emitted when component show animation is finished",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "after-hide",
              "description": "Emitted when component hide animation is finished",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Slot used for expansion item's content",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            },
            {
              "name": "header",
              "description": "Slot used for overriding default header",
              "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
            }
          ],
          "description": "QExpansionItem - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/expansion-item"
        },
        {
          "name": "QFab",
          "source": {
            "module": "quasar",
            "symbol": "QFab"
          },
          "attributes": [
            {
              "name": "type",
              "value": {
                "kind": "expression",
                "type": "'a'|'submit'|'button'|'reset'"
              },
              "description": "Define the button HTML DOM type",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "default": "\"a\""
            },
            {
              "name": "outline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outline' design for Fab button",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "push",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'push' design for Fab button",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'flat' design for Fab button",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "unelevated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove shadow",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "padding",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set\n\nExamples:\n16px\n10px 5px\n2rem\nxs\nmd lg",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "glossy",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Apply the glossy effect over the button",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "external-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display label besides the FABs, as external content",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "The label that will be shown when Fab is extended\n\nExamples:\nButton Label",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "label-position",
              "value": {
                "kind": "expression",
                "type": "'top'|'right'|'bottom'|'left'"
              },
              "description": "Position of the label around the icon",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "hide-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide the label; Useful for animation purposes where you toggle the visibility of the label",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "label-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Class definitions to be attributed to the label container\n\nExamples:\nmy-special-class\n:input-class=\"{ 'my-special-class': <condition> }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "label-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Style definitions to be attributed to the label container\n\nExamples:\nbackground-color: #ff0000\n:input-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Apply a rectangle aspect to the FAB",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Controls state of fab actions (showing/hidden); Works best with v-model directive, otherwise use along listening to 'update:modelValue' event",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "active-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "hide-icon",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide the icon (don't use any)",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "direction",
              "value": {
                "kind": "expression",
                "type": "'up'|'right'|'down'|'left'"
              },
              "description": "Direction to expand Fab Actions to\n\nExamples:\ndown",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "default": "\"right\""
            },
            {
              "name": "vertical-actions-align",
              "value": {
                "kind": "expression",
                "type": "'left'|'center'|'right'"
              },
              "description": "The side of the Fab where Fab Actions will expand (only when direction is 'up' or 'down')",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "default": "\"center\""
            },
            {
              "name": "persistent",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "By default, Fab Actions are hidden when user navigates to another route and this prop disables this behavior",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "boolean",
                  "description": "New state (showing/hidden)",
                  "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
                }
              ],
              "description": "Emitted when fab actions are shown/hidden; Captured by v-model directive",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
                }
              ],
              "description": "Emitted after component has triggered show()",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "before-show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
                }
              ],
              "description": "Emitted when component triggers show() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
                }
              ],
              "description": "Emitted after component has triggered hide()",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "before-hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
                }
              ],
              "description": "Emitted when component triggers hide() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "This is where QFabActions may go into",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "tooltip",
              "description": "Slot specifically designed for a QTooltip",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "icon",
              "description": "Slot for icon shown when FAB is closed; Suggestion: QIcon",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "active-icon",
              "description": "Slot for icon shown when FAB is opened; Suggestion: QIcon",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "label",
              "description": "Slot for label",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            }
          ],
          "description": "QFab - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
        },
        {
          "name": "QFabAction",
          "source": {
            "module": "quasar",
            "symbol": "QFabAction"
          },
          "attributes": [
            {
              "name": "type",
              "value": {
                "kind": "expression",
                "type": "'a'|'submit'|'button'|'reset'"
              },
              "description": "Define the button HTML DOM type",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "default": "\"a\""
            },
            {
              "name": "outline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outline' design for Fab button",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "push",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'push' design for Fab button",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'flat' design for Fab button",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "unelevated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove shadow",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "padding",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set\n\nExamples:\n16px\n10px 5px\n2rem\nxs\nmd lg",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "glossy",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Apply the glossy effect over the button",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "external-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display label besides the FABs, as external content",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "The label that will be shown when Fab is extended\n\nExamples:\nButton Label",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "label-position",
              "value": {
                "kind": "expression",
                "type": "'top'|'right'|'bottom'|'left'"
              },
              "description": "Position of the label around the icon",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "hide-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide the label; Useful for animation purposes where you toggle the visibility of the label",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "label-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Class definitions to be attributed to the label container\n\nExamples:\nmy-special-class\n:input-class=\"{ 'my-special-class': <condition> }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "label-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Style definitions to be attributed to the label container\n\nExamples:\nbackground-color: #ff0000\n:input-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Apply a rectangle aspect to the FAB",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "anchor",
              "value": {
                "kind": "expression",
                "type": "'start'|'center'|'end'"
              },
              "description": "How to align the Fab Action relative to Fab expand side; By default it uses the align specified in QFab",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "to",
              "value": {
                "kind": "expression",
                "type": "string|object"
              },
              "description": "Equivalent to Vue Router <router-link> 'to' property\n\nExamples:\n/home/dashboard\n:to=\"{ name: 'my-route-name' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "replace",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to Vue Router <router-link> 'replace' property",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "click",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
                }
              ],
              "description": "Emitted when user clicks/taps on the component",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Suggestion for this slot: QTooltip",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "icon",
              "description": "Slot for icon; Suggestion: QIcon",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            },
            {
              "name": "label",
              "description": "Slot for label",
              "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
            }
          ],
          "description": "QFabAction - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/floating-action-button"
        },
        {
          "name": "QField",
          "source": {
            "module": "quasar",
            "symbol": "QField"
          },
          "attributes": [
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "error",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Does field have validation errors?",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "error-message",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Validation error message (gets displayed only if 'error' is set to 'true')\n\nExamples:\nUsername must have at least 5 characters",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "no-error-icon",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide error icon when there is an error",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "rules",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules\n\nExamples:\n:rules=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"\n:rules=\"[ 'fulltime' ]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "reactive-rules",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "lazy-rules",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper QForm submits itself",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "A text label that will “float” up above the input field, once the field gets focus\n\nExamples:\nUsername",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "stack-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Label will be always shown above the field regardless of field content (if any)",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "hint",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Helper (hint) text which gets placed below your wrapped form component\n\nExamples:\nFill in between 3 and 12 characters",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "hide-hint",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide the helper (hint) text when field doesn't have focus",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "prefix",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Prefix\n\nExamples:\n$",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "suffix",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Suffix\n\nExamples:\n@gmail.com",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "label-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the label from the Quasar Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "bg-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "loading",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "clearable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "clear-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Custom icon to use for the clear button when using along with 'clearable' prop\n\nExamples:\nclose",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "filled",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'filled' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "outlined",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outlined' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "borderless",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'borderless' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "standout",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)\n\nExamples:\nstandout\nstandout=\"bg-primary text-white\"",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "label-slot",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "bottom-slots",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enables bottom slots ('error', 'hint', 'counter')",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "hide-bottom-space",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "counter",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show an automatic counter on bottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a small standard border-radius for a squared shape of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove border-radius so borders are squared; Overrides 'rounded' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "item-aligned",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Match inner content alignment to that of QItem",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "autofocus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Focus field on initial component render",
              "doc-url": "https://v2.quasar.dev/vue-components/field",
              "type": "boolean"
            },
            {
              "name": "for",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well\n\nExamples:\nmyFieldsId",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "maxlength",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Specify a max length of model\n\nExamples:\n12",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            }
          ],
          "events": [
            {
              "name": "clear",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "The previous value before clearing it",
                  "doc-url": "https://v2.quasar.dev/vue-components/field"
                }
              ],
              "description": "When using the 'clearable' property, this event is emitted when the clear icon is clicked",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/field"
                }
              ],
              "description": "Emitted when the model changes, only when used with 'clearable' or the 'control' scoped slot.",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "focus",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/field"
                }
              ],
              "description": "Emitted when component gets focused",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "blur",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/field"
                }
              ],
              "description": "Emitted when component loses focus",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Field main content",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "prepend",
              "description": "Prepend inner field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "append",
              "description": "Append to inner field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "before",
              "description": "Prepend outer field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "after",
              "description": "Append outer field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "label",
              "description": "Slot for label; Used only if 'label-slot' prop is set or the 'label' prop is set; When it is used the text in the 'label' prop is ignored",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "error",
              "description": "Slot for errors; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "hint",
              "description": "Slot for hint text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "counter",
              "description": "Slot for counter text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "loading",
              "description": "Override default spinner when component is in loading mode; Use in conjunction with 'loading' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "control",
              "description": "Slot for controls; Suggestion QSlider, QRange, QKnob, ...",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            },
            {
              "name": "rawControl",
              "doc-url": "https://v2.quasar.dev/vue-components/field"
            }
          ],
          "description": "QField - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/field"
        },
        {
          "name": "QFile",
          "source": {
            "module": "quasar",
            "symbol": "QFile"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists\n\nExamples:\ncar_id\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "multiple",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allow multiple file uploads",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "accept",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Comma separated list of unique file type specifiers. Maps to 'accept' attribute of native input type=file element\n\nExamples:\n.jpg, .pdf, image/*\nimage/jpeg, .pdf",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "capture",
              "value": {
                "kind": "expression",
                "type": "'user'|'environment'"
              },
              "description": "Optionally, specify that a new file should be captured, and which device should be used to capture that new media of a type defined by the 'accept' prop. Maps to 'capture' attribute of native input type=file element",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "max-file-size",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Maximum size of individual file in bytes\n\nExamples:\n1024\n1048576",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "max-total-size",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Maximum size of all files combined in bytes\n\nExamples:\n1024\n1048576",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "max-files",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Maximum number of files to contain\n\nExamples:\n:max-files=\"5\"\n10",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "filter",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Custom filter for added files; Only files that pass this filter will be added to the queue and uploaded; For best performance, reference it from your scope and do not define it inline\n\nExamples:\n:filter=\"files => files.filter(file => file.size === 1024)\"",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "File|FileList|any[]|null|undefined"
              },
              "description": "Model of the component; Must be FileList or Array if using 'multiple' prop; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"myModel\"",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "required": true
            },
            {
              "name": "error",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Does field have validation errors?",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "error-message",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Validation error message (gets displayed only if 'error' is set to 'true')\n\nExamples:\nUsername must have at least 5 characters",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "no-error-icon",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide error icon when there is an error",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "rules",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules\n\nExamples:\n:rules=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"\n:rules=\"[ 'fulltime' ]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "reactive-rules",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "lazy-rules",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper QForm submits itself",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "A text label that will “float” up above the input field, once the field gets focus\n\nExamples:\nUsername",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "stack-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Label will be always shown above the field regardless of field content (if any)",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "hint",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Helper (hint) text which gets placed below your wrapped form component\n\nExamples:\nFill in between 3 and 12 characters",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "hide-hint",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide the helper (hint) text when field doesn't have focus",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "prefix",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Prefix\n\nExamples:\n$",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "suffix",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Suffix\n\nExamples:\n@gmail.com",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "label-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the label from the Quasar Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "bg-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "loading",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "clearable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "clear-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Custom icon to use for the clear button when using along with 'clearable' prop\n\nExamples:\nclose",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "filled",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'filled' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "outlined",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outlined' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "borderless",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'borderless' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "standout",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)\n\nExamples:\nstandout\nstandout=\"bg-primary text-white\"",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "label-slot",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "bottom-slots",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enables bottom slots ('error', 'hint', 'counter')",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "hide-bottom-space",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "counter",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show an automatic counter on bottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a small standard border-radius for a squared shape of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove border-radius so borders are squared; Overrides 'rounded' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "item-aligned",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Match inner content alignment to that of QItem",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "autofocus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Focus field on initial component render",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "for",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well\n\nExamples:\nmyFieldsId",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "append",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Append file(s) to current model rather than replacing them; Has effect only when using 'multiple' mode",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "display-value",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Override default selection string, if not using 'file' or 'selected' scoped slots and if not using 'use-chips' prop\n\nExamples:\nOptions: x, y, z",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "use-chips",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use QChip to show picked files",
              "doc-url": "https://v2.quasar.dev/vue-components/file",
              "type": "boolean"
            },
            {
              "name": "counter-label",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Label for the counter; The 'counter' prop is necessary to enable this one\n\nExamples:\n:counter-label=\"counterLabelFn\"",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "input-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Class definitions to be attributed to the underlying selection container\n\nExamples:\nmy-special-class\n:input-class=\"{ 'my-special-class': <condition> }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "input-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Style definitions to be attributed to the underlying selection container\n\nExamples:\nbackground-color: #ff0000\n:input-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            }
          ],
          "events": [
            {
              "name": "rejected",
              "arguments": [
                {
                  "name": "rejectedEntries",
                  "type": "any[]",
                  "description": "Array of { failedPropValidation: string, file: File } Objects for files that do not pass the validation",
                  "doc-url": "https://v2.quasar.dev/vue-components/file"
                }
              ],
              "description": "Emitted after files are picked and some do not pass the validation props (accept, max-file-size, max-total-size, filter, etc)",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "clear",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "The previous value before clearing it",
                  "doc-url": "https://v2.quasar.dev/vue-components/file"
                }
              ],
              "description": "When using the 'clearable' property, this event is emitted when the clear icon is clicked",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/file"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Field main content",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "prepend",
              "description": "Prepend inner field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "append",
              "description": "Append to inner field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "before",
              "description": "Prepend outer field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "after",
              "description": "Append outer field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "label",
              "description": "Slot for label; Used only if 'label-slot' prop is set or the 'label' prop is set; When it is used the text in the 'label' prop is ignored",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "error",
              "description": "Slot for errors; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "hint",
              "description": "Slot for hint text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "counter",
              "description": "Slot for counter text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "loading",
              "description": "Override default spinner when component is in loading mode; Use in conjunction with 'loading' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "file",
              "description": "Override default node to render a file from the user picked list",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            },
            {
              "name": "selected",
              "description": "Override default selection slot; Suggestion: QChip",
              "doc-url": "https://v2.quasar.dev/vue-components/file"
            }
          ],
          "description": "QFile - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/file"
        },
        {
          "name": "QFooter",
          "source": {
            "module": "quasar",
            "symbol": "QFooter"
          },
          "attributes": [
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Model of the component defining if it is shown or hidden to the user; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"footerState\"",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer",
              "default": "true",
              "type": "boolean"
            },
            {
              "name": "reveal",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enable 'reveal' mode; Takes into account user scroll to temporarily show/hide footer",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer",
              "type": "boolean"
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer",
              "type": "boolean"
            },
            {
              "name": "elevated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Adds a default shadow to the footer",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer",
              "type": "boolean"
            },
            {
              "name": "height-hint",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "When using SSR, you can optionally hint of the height (in pixels) of the QFooter\n\nExamples:\n150",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer",
              "default": "50"
            }
          ],
          "events": [
            {
              "name": "reveal",
              "arguments": [
                {
                  "name": "value",
                  "type": "boolean",
                  "description": "New 'reveal' state",
                  "doc-url": "https://v2.quasar.dev/layout/header-and-footer"
                }
              ],
              "description": "Emitted when 'reveal' state gets changed",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component; Suggestion: QToolbar",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer"
            }
          ],
          "description": "QFooter - Quasar component",
          "doc-url": "https://v2.quasar.dev/layout/header-and-footer"
        },
        {
          "name": "QForm",
          "source": {
            "module": "quasar",
            "symbol": "QForm"
          },
          "attributes": [
            {
              "name": "autofocus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Focus first focusable element on initial component render",
              "doc-url": "https://v2.quasar.dev/vue-components/form",
              "type": "boolean"
            },
            {
              "name": "no-error-focus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not try to focus on first component that has a validation error when submitting form",
              "doc-url": "https://v2.quasar.dev/vue-components/form",
              "type": "boolean"
            },
            {
              "name": "no-reset-focus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not try to focus on first component when resetting form",
              "doc-url": "https://v2.quasar.dev/vue-components/form",
              "type": "boolean"
            },
            {
              "name": "greedy",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Validate all fields in form (by default it stops after finding the first invalid field with synchronous validation)",
              "doc-url": "https://v2.quasar.dev/vue-components/form",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "submit",
              "description": "Emitted when all validations have passed when tethered to a submit button",
              "doc-url": "https://v2.quasar.dev/vue-components/form"
            },
            {
              "name": "reset",
              "description": "Emitted when all validations have been reset when tethered to a reset button; It is recommended to manually reset the wrapped components models in this handler",
              "doc-url": "https://v2.quasar.dev/vue-components/form"
            },
            {
              "name": "validation-success",
              "description": "Emitted after a validation was triggered and all inner Quasar components models are valid",
              "doc-url": "https://v2.quasar.dev/vue-components/form"
            },
            {
              "name": "validation-error",
              "arguments": [
                {
                  "name": "ref",
                  "type": "Component",
                  "description": "Vue reference to the first component that triggered the validation error",
                  "doc-url": "https://v2.quasar.dev/vue-components/form"
                }
              ],
              "description": "Emitted after a validation was triggered and at least one of the inner Quasar components models are NOT valid",
              "doc-url": "https://v2.quasar.dev/vue-components/form"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/form"
            }
          ],
          "description": "QForm - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/form"
        },
        {
          "name": "QFormChildMixin",
          "source": {
            "module": "quasar",
            "symbol": "QFormChildMixin"
          },
          "attributes": [],
          "slots": [],
          "description": "QFormChildMixin - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/form"
        },
        {
          "name": "QHeader",
          "source": {
            "module": "quasar",
            "symbol": "QHeader"
          },
          "attributes": [
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Model of the component defining if it is shown or hidden to the user; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"headerState\"",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer",
              "default": "true",
              "type": "boolean"
            },
            {
              "name": "reveal",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enable 'reveal' mode; Takes into account user scroll to temporarily show/hide header",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer",
              "type": "boolean"
            },
            {
              "name": "reveal-offset",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Amount of scroll (in pixels) that should trigger a 'reveal' state change\n\nExamples:\n:reveal-offset=\"500\"",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer",
              "default": "250"
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer",
              "type": "boolean"
            },
            {
              "name": "elevated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Adds a default shadow to the header",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer",
              "type": "boolean"
            },
            {
              "name": "height-hint",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "When using SSR, you can optionally hint of the height (in pixels) of the QHeader\n\nExamples:\n150",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer",
              "default": "50"
            }
          ],
          "events": [
            {
              "name": "reveal",
              "arguments": [
                {
                  "name": "value",
                  "type": "boolean",
                  "description": "New 'reveal' state",
                  "doc-url": "https://v2.quasar.dev/layout/header-and-footer"
                }
              ],
              "description": "Emitted when 'reveal' state gets changed",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component; Suggestion: QToolbar",
              "doc-url": "https://v2.quasar.dev/layout/header-and-footer"
            }
          ],
          "description": "QHeader - Quasar component",
          "doc-url": "https://v2.quasar.dev/layout/header-and-footer"
        },
        {
          "name": "QIcon",
          "source": {
            "module": "quasar",
            "symbol": "QIcon"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/icon"
            },
            {
              "name": "tag",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "HTML tag to render, unless no icon is supplied or it's an svg icon\n\nExamples:\ndiv\nspan\ndiv\ni",
              "doc-url": "https://v2.quasar.dev/vue-components/icon",
              "default": "\"i\""
            },
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Name of the icon, following Quasar convention\n\nExamples:\nmap\nion-add",
              "doc-url": "https://v2.quasar.dev/vue-components/icon"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/icon"
            },
            {
              "name": "left",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Useful if icon is on the left side of something: applies a standard margin on the right side of Icon",
              "doc-url": "https://v2.quasar.dev/vue-components/icon",
              "type": "boolean"
            },
            {
              "name": "right",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Useful if icon is on the right side of something: applies a standard margin on the left side of Icon",
              "doc-url": "https://v2.quasar.dev/vue-components/icon",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Suggestions: QTooltip or QMenu",
              "doc-url": "https://v2.quasar.dev/vue-components/icon"
            }
          ],
          "description": "QIcon - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/icon"
        },
        {
          "name": "QImg",
          "source": {
            "module": "quasar",
            "symbol": "QImg"
          },
          "attributes": [
            {
              "name": "ratio",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Force the component to maintain an aspect ratio\n\nExamples:\n:ratio=\"4/3\"\n:ratio=\"16/9\"\nratio=\"1\"\n(Number format) :ratio=\"16/9\"\n(String format) ratio=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "src",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Path to image\n\nExamples:\n(public folder) src=\"img/something.png\"\n(assets folder) src=\"~assets/my-img.gif\"\n(relative path format) :src=\"require('./my_img.jpg')\"\n(URL) src=\"https://placeimg.com/500/300/nature\"",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "srcset",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Same syntax as <img> srcset attribute\n\nExamples:\nelva-fairy-320w.jpg 320w, elva-fairy-480w.jpg 480w",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "sizes",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Same syntax as <img> sizes attribute\n\nExamples:\n(max-width: 320px) 280px, (max-width: 480px) 440px, 800px",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "placeholder-src",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "While waiting for your image to load, you can use a placeholder image\n\nExamples:\n(public folder) src=\"img/some-placeholder.png\"\n(assets folder) src=\"~assets/my-placeholder.gif\"\n(relative path format) :src=\"require('./placeholder.jpg')\"\n(URL) src=\"https://placeimg.com/500/300/nature\"",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "initial-ratio",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Use it when not specifying 'ratio' but still wanting an initial aspect ratio\n\nExamples:\n(Number format) :initial-ratio=\"16/9\"\n(String format) initial-ratio=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/img",
              "default": "\"16/9\""
            },
            {
              "name": "width",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Forces image width; Must also include the unit (px or %)\n\nExamples:\n280px\n70%",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "height",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Forces image height; Must also include the unit (px or %)\n\nExamples:\n280px\n70%",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "loading",
              "value": {
                "kind": "expression",
                "type": "'lazy'|'eager'"
              },
              "description": "Lazy or immediate load; Same syntax as <img> loading attribute",
              "doc-url": "https://v2.quasar.dev/vue-components/img",
              "default": "\"lazy\""
            },
            {
              "name": "crossorigin",
              "value": {
                "kind": "expression",
                "type": "'anonymous'|'use-credentials'"
              },
              "description": "Same syntax as <img> crossorigin attribute",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "decoding",
              "value": {
                "kind": "expression",
                "type": "'sync'|'async'|'auto'"
              },
              "description": "Same syntax as <img> decoding attribute",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "referrerpolicy",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Same syntax as <img> referrerpolicy attribute",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "fit",
              "value": {
                "kind": "expression",
                "type": "'cover'|'fill'|'contain'|'none'|'scale-down'"
              },
              "description": "How the image will fit into the container; Equivalent of the object-fit prop; Can be coordinated with 'position' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/img",
              "default": "\"cover\""
            },
            {
              "name": "position",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The alignment of the image into the container; Equivalent of the object-position CSS prop\n\nExamples:\n0 0\n20px 50px",
              "doc-url": "https://v2.quasar.dev/vue-components/img",
              "default": "\"50% 50%\""
            },
            {
              "name": "alt",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Specifies an alternate text for the image, if the image cannot be displayed\n\nExamples:\nTwo cats",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "draggable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Adds the native 'draggable' attribute",
              "doc-url": "https://v2.quasar.dev/vue-components/img",
              "type": "boolean"
            },
            {
              "name": "img-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "CSS classes to be attributed to the native img element\n\nExamples:\nmy-special-class",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "img-style",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "Apply CSS to the native img element\n\nExamples:\n:img-style=\"{ transform: 'rotate(45deg)' }\" ",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "spinner-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for default Spinner (unless using a 'loading' slot)\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "spinner-size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name, for default Spinner (unless using a 'loading' slot)\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "no-spinner",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not display the default spinner while waiting for the image to be loaded; It is overriden by the 'loading' slot when one is present",
              "doc-url": "https://v2.quasar.dev/vue-components/img",
              "type": "boolean"
            },
            {
              "name": "no-native-menu",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Disables the native context menu for the image",
              "doc-url": "https://v2.quasar.dev/vue-components/img",
              "type": "boolean"
            },
            {
              "name": "no-transition",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Disable default transition when switching between old and new image",
              "doc-url": "https://v2.quasar.dev/vue-components/img",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "load",
              "arguments": [
                {
                  "name": "src",
                  "type": "string",
                  "description": "URL of image that has been loaded; useful when using 'srcset' and/or 'sizes'\n\nExamples:\nhttps://some-site.net/some-img.gif",
                  "doc-url": "https://v2.quasar.dev/vue-components/img"
                }
              ],
              "description": "Emitted when image has been loaded by the browser",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "error",
              "arguments": [
                {
                  "name": "src",
                  "type": "Error",
                  "description": "JS Error object",
                  "doc-url": "https://v2.quasar.dev/vue-components/img"
                }
              ],
              "description": "Emitted when browser could not load the image",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot can be used for captions. See examples",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "loading",
              "description": "While image is loading, this slot is being displayed on top of the component; Suggestions: a spinner or text",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            },
            {
              "name": "error",
              "description": "Optional slot to be used when image could not be loaded; make sure you assign a min-height and min-width to the component through CSS",
              "doc-url": "https://v2.quasar.dev/vue-components/img"
            }
          ],
          "description": "QImg - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/img"
        },
        {
          "name": "QInfiniteScroll",
          "source": {
            "module": "quasar",
            "symbol": "QInfiniteScroll"
          },
          "attributes": [
            {
              "name": "offset",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Offset (pixels) to bottom of Infinite Scroll container from which the component should start loading more content in advance\n\nExamples:\n:offset=\"250\"",
              "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll",
              "default": "500"
            },
            {
              "name": "debounce",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Debounce amount (in milliseconds)\n\nExamples:\n0\n530",
              "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll",
              "default": "100"
            },
            {
              "name": "initial-index",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Initialize the pagination index (used for the @load event)\n\nExamples:\n2\n3",
              "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll"
            },
            {
              "name": "scroll-target",
              "value": {
                "kind": "expression",
                "type": "Element|string"
              },
              "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one\n\nExamples:\n:scroll-target=\"$refs.scrollTarget\"\nscroll-target=\".scroll-target-class\"\nscroll-target=\"#scroll-target-id\"\nscroll-target=\"body\"",
              "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll",
              "type": "boolean"
            },
            {
              "name": "reverse",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Scroll area should behave like a messenger - starting scrolled to bottom and loading when reaching the top",
              "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "load",
              "arguments": [
                {
                  "name": "index",
                  "type": "number",
                  "description": "The index parameter can be used to make some sort of pagination on the content you load. It takes numeric values starting with 1 and incrementing with each call\n\nExamples:\n12",
                  "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll"
                },
                {
                  "name": "done",
                  "type": "Function",
                  "description": "Function to call when you made all necessary updates. DO NOT forget to call it otherwise your loading message will continue to be displayed",
                  "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll"
                }
              ],
              "description": "Emitted when Infinite Scroll needs to load more data",
              "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll"
            },
            {
              "name": "loading",
              "description": "Slot displaying something while loading content; Example: QSpinner",
              "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll"
            }
          ],
          "description": "QInfiniteScroll - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/infinite-scroll"
        },
        {
          "name": "QInnerLoading",
          "source": {
            "module": "quasar",
            "symbol": "QInnerLoading"
          },
          "attributes": [
            {
              "name": "transition-show",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/inner-loading",
              "default": "\"fade\""
            },
            {
              "name": "transition-hide",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/inner-loading",
              "default": "\"fade\""
            },
            {
              "name": "transition-duration",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Transition duration (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/inner-loading",
              "default": "300"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name, or standard size name (xs|sm|md|lg|xl), for the inner Spinner (unless using the default slot)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/inner-loading",
              "default": "\"42px\""
            },
            {
              "name": "showing",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "State - loading or not",
              "doc-url": "https://v2.quasar.dev/vue-components/inner-loading",
              "type": "boolean"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette for the inner Spinner (unless using the default slot)\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/inner-loading"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Add a label; Gets overriden when using the default slot\n\nExamples:\nPlease wait...",
              "doc-url": "https://v2.quasar.dev/vue-components/inner-loading"
            },
            {
              "name": "label-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Add CSS class(es) to the label; Works along the 'label' prop only\n\nExamples:\ntext-red q-mt-xl",
              "doc-url": "https://v2.quasar.dev/vue-components/inner-loading"
            },
            {
              "name": "label-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Apply custom style to the label; Works along the 'label' prop only\n\nExamples:\nfont-size: 28px\n:label-style=\"{ color: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/inner-loading"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/inner-loading",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot is used for replacing default Spinner; Suggestions: a spinner or text",
              "doc-url": "https://v2.quasar.dev/vue-components/inner-loading"
            }
          ],
          "description": "QInnerLoading - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/inner-loading"
        },
        {
          "name": "QInput",
          "source": {
            "module": "quasar",
            "symbol": "QInput"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists\n\nExamples:\ncar_id\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "mask",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Custom mask or one of the predefined mask names\n\nExamples:\n###-##\ndate\ndatetime\ntime\nfulltime\nphone\ncard",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "fill-mask",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "Fills string with specified characters (or underscore if value is not string) to fill mask's length\n\nExamples:\ntrue\n'0'\n'_'",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "reverse-fill-mask",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Fills string from the right side of the mask",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "unmasked-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Model will be unmasked (won't contain tokens/separation characters)",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "string|number|null|undefined"
              },
              "description": "Model of the component; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"myText\"",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "required": true
            },
            {
              "name": "error",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Does field have validation errors?",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "error-message",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Validation error message (gets displayed only if 'error' is set to 'true')\n\nExamples:\nUsername must have at least 5 characters",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "no-error-icon",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide error icon when there is an error",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "rules",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules\n\nExamples:\n:rules=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"\n:rules=\"[ 'fulltime' ]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "reactive-rules",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "lazy-rules",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper QForm submits itself",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "A text label that will “float” up above the input field, once the field gets focus\n\nExamples:\nUsername",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "stack-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Label will be always shown above the field regardless of field content (if any)",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "hint",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Helper (hint) text which gets placed below your wrapped form component\n\nExamples:\nFill in between 3 and 12 characters",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "hide-hint",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide the helper (hint) text when field doesn't have focus",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "prefix",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Prefix\n\nExamples:\n$",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "suffix",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Suffix\n\nExamples:\n@gmail.com",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "label-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the label from the Quasar Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "bg-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "loading",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "clearable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "clear-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Custom icon to use for the clear button when using along with 'clearable' prop\n\nExamples:\nclose",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "filled",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'filled' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "outlined",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outlined' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "borderless",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'borderless' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "standout",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)\n\nExamples:\nstandout\nstandout=\"bg-primary text-white\"",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "label-slot",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "bottom-slots",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enables bottom slots ('error', 'hint', 'counter')",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "hide-bottom-space",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "counter",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show an automatic counter on bottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a small standard border-radius for a squared shape of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove border-radius so borders are squared; Overrides 'rounded' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "item-aligned",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Match inner content alignment to that of QItem",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "autofocus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Focus field on initial component render",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "for",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well\n\nExamples:\nmyFieldsId",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "shadow-text",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Text to be displayed as shadow at the end of the text in the control; Does NOT applies to type=file\n\nExamples:\nrest of the fill value",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "type",
              "value": {
                "kind": "expression",
                "type": "'text'|'password'|'textarea'|'email'|'search'|'tel'|'file'|'number'|'url'|'time'|'date'"
              },
              "description": "Input type\n\nExamples:\npassword",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "default": "\"text\""
            },
            {
              "name": "debounce",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Debounce amount (in milliseconds) when updating model\n\nExamples:\n0\n530",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "maxlength",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Specify a max length of model\n\nExamples:\n12",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "autogrow",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Make field autogrow along with its content (uses a textarea)",
              "doc-url": "https://v2.quasar.dev/vue-components/input",
              "type": "boolean"
            },
            {
              "name": "input-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Class definitions to be attributed to the underlying input tag\n\nExamples:\nmy-special-class\n:input-class=\"{ 'my-special-class': <condition> }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "input-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Style definitions to be attributed to the underlying input tag\n\nExamples:\nbackground-color: #ff0000\n:input-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            }
          ],
          "events": [
            {
              "name": "clear",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "The previous value before clearing it",
                  "doc-url": "https://v2.quasar.dev/vue-components/input"
                }
              ],
              "description": "When using the 'clearable' property, this event is emitted when the clear icon is clicked",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "string|number|null",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/input"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "focus",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/input"
                }
              ],
              "description": "Emitted when component gets focused",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "blur",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/input"
                }
              ],
              "description": "Emitted when component loses focus",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Field main content",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "prepend",
              "description": "Prepend inner field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "append",
              "description": "Append to inner field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "before",
              "description": "Prepend outer field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "after",
              "description": "Append outer field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "label",
              "description": "Slot for label; Used only if 'label-slot' prop is set or the 'label' prop is set; When it is used the text in the 'label' prop is ignored",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "error",
              "description": "Slot for errors; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "hint",
              "description": "Slot for hint text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "counter",
              "description": "Slot for counter text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            },
            {
              "name": "loading",
              "description": "Override default spinner when component is in loading mode; Use in conjunction with 'loading' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/input"
            }
          ],
          "description": "QInput - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/input"
        },
        {
          "name": "QIntersection",
          "source": {
            "module": "quasar",
            "symbol": "QIntersection"
          },
          "attributes": [
            {
              "name": "tag",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "HTML tag to use\n\nExamples:\ndiv\nspan\ndiv\nspan\nblockquote",
              "doc-url": "https://v2.quasar.dev/vue-components/intersection",
              "default": "\"div\""
            },
            {
              "name": "once",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Get triggered only once",
              "doc-url": "https://v2.quasar.dev/vue-components/intersection",
              "type": "boolean"
            },
            {
              "name": "ssr-prerender",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Pre-render content on server side if using SSR (use it to pre-render above the fold content)",
              "doc-url": "https://v2.quasar.dev/vue-components/intersection",
              "type": "boolean"
            },
            {
              "name": "root",
              "value": {
                "kind": "expression",
                "type": "Element"
              },
              "description": "[Intersection API root prop] Lets you define an alternative to the viewport as your root (through its DOM element); It is important to keep in mind that root needs to be an ancestor of the observed element\n\nExamples:\n$refs.myTable.$el\ngetElementById(\"myTable\")",
              "doc-url": "https://v2.quasar.dev/vue-components/intersection"
            },
            {
              "name": "margin",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "[Intersection API rootMargin prop] Allows you to specify the margins for the root, effectively allowing you to either grow or shrink the area used for intersections\n\nExamples:\n-20px 0px\n10px 20px 30px 40px",
              "doc-url": "https://v2.quasar.dev/vue-components/intersection"
            },
            {
              "name": "threshold",
              "value": {
                "kind": "expression",
                "type": "any[]|number"
              },
              "description": "[Intersection API threshold prop] Threshold(s) at which to trigger, specified as a ratio, or list of ratios, of (visible area / total area) of the observed element\n\nExamples:\n[ 0, 0.25, 0.5, 0.75, 1 ]\n:threshold=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/intersection"
            },
            {
              "name": "transition",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/intersection"
            },
            {
              "name": "transition-duration",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Transition duration (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/intersection",
              "default": "300"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Disable visibility observable (content will remain as it was, visible or hidden)",
              "doc-url": "https://v2.quasar.dev/vue-components/intersection",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "visibility",
              "arguments": [
                {
                  "name": "isVisible",
                  "type": "boolean",
                  "description": "Visibility status (true/false)",
                  "doc-url": "https://v2.quasar.dev/vue-components/intersection"
                }
              ],
              "description": "Fires when visibility changes",
              "doc-url": "https://v2.quasar.dev/vue-components/intersection"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/intersection"
            }
          ],
          "description": "QIntersection - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/intersection"
        },
        {
          "name": "QItem",
          "source": {
            "module": "quasar",
            "symbol": "QItem"
          },
          "attributes": [
            {
              "name": "to",
              "value": {
                "kind": "expression",
                "type": "string|object"
              },
              "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used\n\nExamples:\n/home/dashboard\n:to=\"{ name: 'my-route-name' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            },
            {
              "name": "exact",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to Vue Router <router-link> 'exact' property; Superseeded by 'href' prop if used",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "replace",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "active-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used\n\nExamples:\nmy-active-class",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            },
            {
              "name": "exact-active-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used\n\nExamples:\nmy-exact-active-class",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            },
            {
              "name": "href",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link href attribute; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props\n\nExamples:\nhttp://quasar.dev",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            },
            {
              "name": "target",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link target attribute; Use it only along with 'href' prop; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props\n\nExamples:\n_blank\n_self\n_parent\n_top",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "active",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put item into 'active' state",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "clickable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Is QItem clickable? If it's the case, then it will add hover effects and emit 'click' events",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "inset-level",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Apply an inset; Useful when avatar/left side is missing but you want to align content with other items that do have a left side, or when you're building a menu\n\nExamples:\n:inset-level=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            },
            {
              "name": "tag",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "HTML tag to render; Suggestion: use 'label' when encapsulating a QCheckbox/QRadio/QToggle so that when user clicks/taps on the whole item it will trigger a model change for the mentioned components\n\nExamples:\ndiv\nspan\na\nlabel\ndiv",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "default": "\"div\""
            },
            {
              "name": "manual-focus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put item into a manual focus state; Enables 'focused' prop which will determine if item is focused or not, rather than relying on native hover/focus states",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "focused",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Determines focus state, ONLY if 'manual-focus' is enabled / set to true",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "This is where QItem's content goes",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            }
          ],
          "description": "QItem - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
        },
        {
          "name": "QItemLabel",
          "source": {
            "module": "quasar",
            "symbol": "QItemLabel"
          },
          "attributes": [
            {
              "name": "overline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Renders an overline label",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "caption",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Renders a caption label",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "header",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Renders a header label",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "lines",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Apply ellipsis when there's not enough space to render on the specified number of lines;\n\nExamples:\n1\n3\n:lines=\"2\"",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "The content of the label; Suggestion: text",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            }
          ],
          "description": "QItemLabel - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
        },
        {
          "name": "QItemSection",
          "source": {
            "module": "quasar",
            "symbol": "QItemSection"
          },
          "attributes": [
            {
              "name": "avatar",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Render an avatar item side (does not needs 'side' prop to be set)",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "thumbnail",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Render a thumbnail item side (does not needs 'side' prop to be set)",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "side",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Renders as a side of the item",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "top",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Align content to top (useful for multi-line items)",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "no-wrap",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not wrap text (useful for item's main content)",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Section's actual content",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            }
          ],
          "description": "QItemSection - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
        },
        {
          "name": "QList",
          "source": {
            "module": "quasar",
            "symbol": "QList"
          },
          "attributes": [
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "separator",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a separator between contained items",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            },
            {
              "name": "padding",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a material design-like padding on top and bottom",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "This is where the content goes; Suggestion: QItem, QExpansionItem, ...",
              "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
            }
          ],
          "description": "QList - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/list-and-list-items"
        },
        {
          "name": "QKnob",
          "source": {
            "module": "quasar",
            "symbol": "QKnob"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Any number to indicate the given value of the knob. Either use this property (along with a listener for 'update:modelValue' event) OR use the v-model directive\n\nExamples:\nv-model=\"myValue\"",
              "doc-url": "https://v2.quasar.dev/vue-components/knob",
              "required": true
            },
            {
              "name": "min",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "The minimum value that the model (the knob value) should start at\n\nExamples:\n20\n5",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            },
            {
              "name": "max",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "The maximum value that the model (the knob value) should go to\n\nExamples:\n100\n50",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            },
            {
              "name": "step",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "A number representing steps in the value of the model, while adjusting the knob\n\nExamples:\n1\n5",
              "doc-url": "https://v2.quasar.dev/vue-components/knob",
              "default": "\"1\""
            },
            {
              "name": "instant-feedback",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "No animation when model changes",
              "doc-url": "https://v2.quasar.dev/vue-components/knob",
              "type": "boolean"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            },
            {
              "name": "center-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the center part of the component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            },
            {
              "name": "track-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the track of the component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            },
            {
              "name": "font-size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size of text in CSS units, including unit name. Suggestion: use 'em' units to sync with component size\n\nExamples:\n1em\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/knob",
              "default": "\"0.25em\""
            },
            {
              "name": "thickness",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Thickness of progress arc as a ratio (0.0 < x < 1.0) of component size\n\nExamples:\n1\n0.3",
              "doc-url": "https://v2.quasar.dev/vue-components/knob",
              "default": "0.2"
            },
            {
              "name": "angle",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Angle to rotate progress arc by\n\nExamples:\n0\n40\n90",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            },
            {
              "name": "show-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enables the default slot and uses it (if available), otherwise it displays the 'value' prop as text; Make sure the text has enough space to be displayed inside the component",
              "doc-url": "https://v2.quasar.dev/vue-components/knob",
              "type": "boolean"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/knob",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/knob",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "number",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/knob"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            },
            {
              "name": "change",
              "arguments": [
                {
                  "name": "value",
                  "type": "number",
                  "description": "New model value\n\nExamples:\n12",
                  "doc-url": "https://v2.quasar.dev/vue-components/knob"
                }
              ],
              "description": "Fires at the end of a knob's adjustment and offers the value of the model",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            },
            {
              "name": "drag-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "number",
                  "description": "New model value\n\nExamples:\n12",
                  "doc-url": "https://v2.quasar.dev/vue-components/knob"
                }
              ],
              "description": "The value of the model while dragging is still in progress",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/knob"
            }
          ],
          "description": "QKnob - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/knob"
        },
        {
          "name": "QLayout",
          "source": {
            "module": "quasar",
            "symbol": "QLayout"
          },
          "attributes": [
            {
              "name": "view",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Defines how your layout components (header/footer/drawer) should be placed on screen; See docs examples\n\nExamples:\nhHh lpR fFf",
              "doc-url": "https://v2.quasar.dev/layout/layout",
              "default": "\"hhh lpr fff\""
            },
            {
              "name": "container",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Containerize the layout which means it changes the default behavior of expanding to the whole window; Useful (but not limited to) for when using on a QDialog",
              "doc-url": "https://v2.quasar.dev/layout/layout",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "resize",
              "arguments": [
                {
                  "name": "size",
                  "type": "object",
                  "description": "New size",
                  "doc-url": "https://v2.quasar.dev/layout/layout"
                }
              ],
              "description": "Emitted when layout size (height, width) changes",
              "doc-url": "https://v2.quasar.dev/layout/layout"
            },
            {
              "name": "scroll",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Scroll details",
                  "doc-url": "https://v2.quasar.dev/layout/layout"
                }
              ],
              "description": "Emitted when user scrolls within layout",
              "doc-url": "https://v2.quasar.dev/layout/layout"
            },
            {
              "name": "scroll-height",
              "arguments": [
                {
                  "name": "height",
                  "type": "number",
                  "description": "New scroll height of layout\n\nExamples:\n1442",
                  "doc-url": "https://v2.quasar.dev/layout/layout"
                }
              ],
              "description": "Emitted when the scroll size of layout changes",
              "doc-url": "https://v2.quasar.dev/layout/layout"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Suggestion: QHeader, QFooter, QDrawer, QPageContainer",
              "doc-url": "https://v2.quasar.dev/layout/layout"
            }
          ],
          "description": "QLayout - Quasar component",
          "doc-url": "https://v2.quasar.dev/layout/layout"
        },
        {
          "name": "QLinearProgress",
          "source": {
            "module": "quasar",
            "symbol": "QLinearProgress"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress"
            },
            {
              "name": "value",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Progress value (0.0 < x < 1.0)\n\nExamples:\n:value=\"0.28\"",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress"
            },
            {
              "name": "buffer",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Optional buffer value (0.0 < x < 1.0)\n\nExamples:\n:buffer=\"0.78\"",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress"
            },
            {
              "name": "track-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component's track from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress",
              "type": "boolean"
            },
            {
              "name": "reverse",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Reverse direction of progress",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress",
              "type": "boolean"
            },
            {
              "name": "stripe",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Draw stripes; For determinate state only (for performance reasons)",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress",
              "type": "boolean"
            },
            {
              "name": "indeterminate",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component into indeterminate mode",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress",
              "type": "boolean"
            },
            {
              "name": "query",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component into query mode",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a small standard border-radius for a squared shape of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress",
              "type": "boolean"
            },
            {
              "name": "instant-feedback",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "No transition when model changes",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress",
              "type": "boolean"
            },
            {
              "name": "animation-speed",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Animation speed (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress",
              "default": "2100"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Suggestion: QTooltip",
              "doc-url": "https://v2.quasar.dev/vue-components/linear-progress"
            }
          ],
          "description": "QLinearProgress - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/linear-progress",
          "vue-model": {
            "prop": "value",
            "event": "input"
          }
        },
        {
          "name": "QMarkupTable",
          "source": {
            "module": "quasar",
            "symbol": "QMarkupTable"
          },
          "attributes": [
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/markup-table",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/markup-table",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a 'flat' design (no default shadow)",
              "doc-url": "https://v2.quasar.dev/vue-components/markup-table",
              "type": "boolean"
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/vue-components/markup-table",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Removes border-radius so borders are squared",
              "doc-url": "https://v2.quasar.dev/vue-components/markup-table",
              "type": "boolean"
            },
            {
              "name": "separator",
              "value": {
                "kind": "expression",
                "type": "'horizontal'|'vertical'|'cell'|'none'"
              },
              "description": "Use a separator/border between rows, columns or all cells\n\nExamples:\ncell",
              "doc-url": "https://v2.quasar.dev/vue-components/markup-table",
              "default": "\"horizontal\""
            },
            {
              "name": "wrap-cells",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Wrap text within table cells",
              "doc-url": "https://v2.quasar.dev/vue-components/markup-table",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/markup-table"
            }
          ],
          "description": "QMarkupTable - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/markup-table"
        },
        {
          "name": "QMenu",
          "source": {
            "module": "quasar",
            "symbol": "QMenu"
          },
          "attributes": [
            {
              "name": "transition-show",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "default": "\"fade\""
            },
            {
              "name": "transition-hide",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "default": "\"fade\""
            },
            {
              "name": "transition-duration",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Transition duration (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "default": "300"
            },
            {
              "name": "target",
              "value": {
                "kind": "expression",
                "type": "boolean|string|Element"
              },
              "description": "Configure a target element to trigger component toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) or a DOM element it attaches the events to the specified DOM element (if it exists)\n\nExamples:\n:target=\"false\"\n:target=\"$refs.target\"\ntarget=\".my-parent\"\ntarget=\"#target-id\"",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "default": "true"
            },
            {
              "name": "no-parent-event",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Skips attaching events to the target DOM element (that trigger the element to get shown)",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "context-menu",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the component to behave like a context menu, which opens with a right mouse click (or long tap on mobile)",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "fit",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the menu to match at least the full width of its target",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "cover",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the menu to cover its target. When used, the 'self' and 'fit' props are no longer effective",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "anchor",
              "value": {
                "kind": "expression",
                "type": "'top left'|'top middle'|'top right'|'top start'|'top end'|'center left'|'center middle'|'center right'|'center start'|'center end'|'bottom left'|'bottom middle'|'bottom right'|'bottom start'|'bottom end'"
              },
              "description": "Two values setting the starting position or anchor point of the menu relative to its target\n\nExamples:\ntop left\nbottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            },
            {
              "name": "self",
              "value": {
                "kind": "expression",
                "type": "'top left'|'top middle'|'top right'|'top start'|'top end'|'center left'|'center middle'|'center right'|'center start'|'center end'|'bottom left'|'bottom middle'|'bottom right'|'bottom start'|'bottom end'"
              },
              "description": "Two values setting the menu's own position relative to its target\n\nExamples:\ntop left\nbottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            },
            {
              "name": "offset",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "An array of two numbers to offset the menu horizontally and vertically in pixels\n\nExamples:\n[8, 8]\n[5, 10]",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            },
            {
              "name": "scroll-target",
              "value": {
                "kind": "expression",
                "type": "Element|string"
              },
              "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one\n\nExamples:\n:scroll-target=\"$refs.scrollTarget\"\nscroll-target=\".scroll-target-class\"\nscroll-target=\"#scroll-target-id\"\nscroll-target=\"body\"",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            },
            {
              "name": "touch-position",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows for the target position to be set by the mouse position, when the target of the menu is either clicked or touched",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "persistent",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the menu to not be dismissed by a click/tap outside of the menu or by hitting the ESC key",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "no-route-dismiss",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Changing route app won't dismiss the popup; No need to set it if 'persistent' prop is also set",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "auto-close",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows any click/tap in the menu to close it; Useful instead of attaching events to each menu item that should close the menu on click/tap",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "separate-close-popup",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Separate from parent menu, marking it as a separate closing point for v-close-popup (without this, chained menus close all together)",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Forces content to have squared borders",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "no-refocus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "(Accessibility) When Menu gets hidden, do not refocus on the DOM element that previously had focus",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "no-focus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "(Accessibility) When Menu gets shown, do not switch focus on it",
              "doc-url": "https://v2.quasar.dev/vue-components/menu",
              "type": "boolean"
            },
            {
              "name": "max-height",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The maximum height of the menu; Size in CSS units, including unit name\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            },
            {
              "name": "max-width",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The maximum width of the menu; Size in CSS units, including unit name\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "boolean",
                  "description": "New state (showing/hidden)",
                  "doc-url": "https://v2.quasar.dev/vue-components/menu"
                }
              ],
              "description": "Emitted when showing/hidden state changes; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            },
            {
              "name": "show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/menu"
                }
              ],
              "description": "Emitted after component has triggered show()",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            },
            {
              "name": "before-show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/menu"
                }
              ],
              "description": "Emitted when component triggers show() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            },
            {
              "name": "hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/menu"
                }
              ],
              "description": "Emitted after component has triggered hide()",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            },
            {
              "name": "before-hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/menu"
                }
              ],
              "description": "Emitted when component triggers hide() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            },
            {
              "name": "escape-key",
              "description": "Emitted when ESC key is pressed; Does not get emitted if Menu is 'persistent'",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/menu"
            }
          ],
          "description": "QMenu - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/menu"
        },
        {
          "name": "QNoSsr",
          "source": {
            "module": "quasar",
            "symbol": "QNoSsr"
          },
          "attributes": [
            {
              "name": "tag",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "HTML tag to use\n\nExamples:\ndiv\nspan\ndiv\nspan\nblockquote",
              "doc-url": "https://v2.quasar.dev/vue-components/no-ssr",
              "default": "\"div\""
            },
            {
              "name": "placeholder",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Text to display on server-side render (unless using 'placeholder' slot)\n\nExamples:\nThis is server-side only",
              "doc-url": "https://v2.quasar.dev/vue-components/no-ssr"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot is used to render content on client-side",
              "doc-url": "https://v2.quasar.dev/vue-components/no-ssr"
            },
            {
              "name": "placeholder",
              "description": "Slot used as placeholder on server-side render, which gets replaced by the default slot on client-side; overrides 'placeholder' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/no-ssr"
            }
          ],
          "description": "QNoSsr - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/no-ssr"
        },
        {
          "name": "QOptionGroup",
          "source": {
            "module": "quasar",
            "symbol": "QOptionGroup"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive\n\nExamples:\nv-model=\"group\"",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group",
              "required": true
            },
            {
              "name": "options",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Array of objects with value, label, and disable (optional) props. The binary components will be created according to this array; Props from QToggle, QCheckbox or QRadio can also be added as key/value pairs to control the components singularly\n\nExamples:\n:options=\"[ { label: 'Option 1', value: 'op1' }, { label: 'Option 2', value: 'op2' }, { label: 'Option 3', value: 'op3', disable: true } ]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group"
            },
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the controls; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group"
            },
            {
              "name": "type",
              "value": {
                "kind": "expression",
                "type": "'radio'|'checkbox'|'toggle'"
              },
              "description": "The type of input component to be used\n\nExamples:\ncheckbox",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group",
              "default": "\"radio\""
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group"
            },
            {
              "name": "keep-color",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Should the color (if specified any) be kept when input components are unticked?",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group",
              "type": "boolean"
            },
            {
              "name": "left-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Label (if any specified) should be displayed on the left side of the input components",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group",
              "type": "boolean"
            },
            {
              "name": "inline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show input components as inline-block rather than each having their own row",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/option-group"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group"
            }
          ],
          "slots": [
            {
              "name": "label",
              "description": "Generic slot for all labels",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group"
            },
            {
              "name": "label-[name]",
              "description": "Slot to define the specific label for the option at '[name]' where name is a 0-based index; Overrides the generic 'label' slot if used",
              "doc-url": "https://v2.quasar.dev/vue-components/option-group"
            }
          ],
          "description": "QOptionGroup - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/option-group"
        },
        {
          "name": "QPageScroller",
          "source": {
            "module": "quasar",
            "symbol": "QPageScroller"
          },
          "attributes": [
            {
              "name": "position",
              "value": {
                "kind": "expression",
                "type": "'top-right'|'top-left'|'bottom-right'|'bottom-left'|'top'|'right'|'bottom'|'left'"
              },
              "description": "Page side/corner to stick to\n\nExamples:\ntop-right",
              "doc-url": "https://v2.quasar.dev/layout/page-scroller",
              "default": "\"bottom-right\""
            },
            {
              "name": "offset",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "An array of two numbers to offset the component horizontally and vertically in pixels\n\nExamples:\n[8, 8]\n[5, 10]",
              "doc-url": "https://v2.quasar.dev/layout/page-scroller",
              "default": "[18,18]"
            },
            {
              "name": "expand",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "By default the component shrinks to content's size; By using this prop you make the component fully expand horizontally or vertically, based on 'position' prop",
              "doc-url": "https://v2.quasar.dev/layout/page-scroller",
              "type": "boolean"
            },
            {
              "name": "scroll-offset",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Scroll offset (in pixels) from which point the component is shown on page; Measured from the top of the page (or from the bottom if in 'reverse' mode)\n\nExamples:\n550",
              "doc-url": "https://v2.quasar.dev/layout/page-scroller",
              "default": "1000"
            },
            {
              "name": "reverse",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Work in reverse (shows when scrolling to the top of the page and scrolls to bottom when triggered)",
              "doc-url": "https://v2.quasar.dev/layout/page-scroller",
              "type": "boolean"
            },
            {
              "name": "duration",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Duration (in milliseconds) of the scrolling until it reaches its target\n\nExamples:\n500",
              "doc-url": "https://v2.quasar.dev/layout/page-scroller",
              "default": "300"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/layout/page-scroller"
            }
          ],
          "description": "QPageScroller - Quasar component",
          "doc-url": "https://v2.quasar.dev/layout/page-scroller"
        },
        {
          "name": "QPageSticky",
          "source": {
            "module": "quasar",
            "symbol": "QPageSticky"
          },
          "attributes": [
            {
              "name": "position",
              "value": {
                "kind": "expression",
                "type": "'top-right'|'top-left'|'bottom-right'|'bottom-left'|'top'|'right'|'bottom'|'left'"
              },
              "description": "Page side/corner to stick to\n\nExamples:\ntop-right",
              "doc-url": "https://v2.quasar.dev/layout/page-sticky",
              "default": "\"bottom-right\""
            },
            {
              "name": "offset",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "An array of two numbers to offset the component horizontally and vertically in pixels\n\nExamples:\n[8, 8]\n[5, 10]",
              "doc-url": "https://v2.quasar.dev/layout/page-sticky"
            },
            {
              "name": "expand",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "By default the component shrinks to content's size; By using this prop you make the component fully expand horizontally or vertically, based on 'position' prop",
              "doc-url": "https://v2.quasar.dev/layout/page-sticky",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/layout/page-sticky"
            }
          ],
          "description": "QPageSticky - Quasar component",
          "doc-url": "https://v2.quasar.dev/layout/page-sticky"
        },
        {
          "name": "QPage",
          "source": {
            "module": "quasar",
            "symbol": "QPage"
          },
          "attributes": [
            {
              "name": "padding",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default responsive page padding",
              "doc-url": "https://v2.quasar.dev/layout/page",
              "type": "boolean"
            },
            {
              "name": "style-fn",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Override default CSS style applied to the component (sets minHeight); Function(offset: Number) => CSS props/value: Object; For best performance, reference it from your scope and do not define it inline\n\nExamples:\n(see source code)",
              "doc-url": "https://v2.quasar.dev/layout/page",
              "default": "\"(see source code)\""
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/layout/page"
            }
          ],
          "description": "QPage - Quasar component",
          "doc-url": "https://v2.quasar.dev/layout/page"
        },
        {
          "name": "QPageContainer",
          "source": {
            "module": "quasar",
            "symbol": "QPageContainer"
          },
          "attributes": [],
          "slots": [
            {
              "name": "default",
              "description": "Encapsulates a QPage (either directly or through <router-view>)",
              "doc-url": "https://v2.quasar.dev/layout/page"
            }
          ],
          "description": "QPageContainer - Quasar component",
          "doc-url": "https://v2.quasar.dev/layout/page"
        },
        {
          "name": "QPagination",
          "source": {
            "module": "quasar",
            "symbol": "QPagination"
          },
          "attributes": [
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Current page (must be between min/max)\n\nExamples:\n3",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "required": true
            },
            {
              "name": "min",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Minimum page (must be lower than 'max')\n\nExamples:\n3",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "default": "1"
            },
            {
              "name": "max",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Number of last page (must be higher than 'min')\n\nExamples:\n10",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "required": true
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "default": "\"primary\""
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            },
            {
              "name": "active-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "default": "\"primary\""
            },
            {
              "name": "active-text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color (useful when you are using it along with the 'input' prop)",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "input-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Style definitions to be attributed to the input (if using one)\n\nExamples:\nbackground-color: #ff0000\n:input-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            },
            {
              "name": "input-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Class definitions to be attributed to the input (if using one)\n\nExamples:\nmy-special-class\n:input-class=\"{ 'my-special-class': <condition> }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Button size in CSS units, including unit name\n\nExamples:\n20px",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "input",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use an input instead of buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "icon-prev",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            },
            {
              "name": "icon-next",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            },
            {
              "name": "icon-first",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            },
            {
              "name": "icon-last",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            },
            {
              "name": "to-fn",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Generate link for page buttons; For best performance, reference it from your scope and do not define it inline\n\nExamples:\n:to-fn=\"page => ({ query: { page } })\"",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            },
            {
              "name": "boundary-links",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show boundary button links",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "boundary-numbers",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Always show first and last page buttons (if not using 'input')",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "direction-links",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show direction buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "ellipses",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show ellipses (...) when pages are available",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "max-pages",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Maximum number of page links to display at a time; 0 means Infinite\n\nExamples:\n5",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            },
            {
              "name": "ripple",
              "value": {
                "kind": "expression",
                "type": "boolean|object"
              },
              "description": "Configure buttons material ripple (disable it by setting it to 'false' or supply a config object); Does not applies to boundary and ellipsis buttons\n\nExamples:\nfalse\n{ early: true, center: true, color: 'teal', keyCodes: [] }",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "default": "true"
            },
            {
              "name": "round",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Makes a circle shaped button for all buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a more prominent border-radius for a squared shape button for all buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'flat' design for current page button",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "outline",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outline' design for current page button",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "unelevated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove shadow for current page button",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "push",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'push' design for current page button",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "glossy",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a glossy effect for all buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination",
              "type": "boolean"
            },
            {
              "name": "padding",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set\n\nExamples:\n16px\n10px 5px\n2rem\nxs\nmd lg\n2px 2px 5px 7px",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "string",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/pagination"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/pagination"
            }
          ],
          "slots": [],
          "description": "QPagination - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/pagination"
        },
        {
          "name": "QParallax",
          "source": {
            "module": "quasar",
            "symbol": "QParallax"
          },
          "attributes": [
            {
              "name": "src",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Path to image (unless a 'media' slot is used)\n\nExamples:\n(public folder) src=\"img/something.png\"\n(assets folder) src=\"~assets/my-img.png\"\n(relative path format) :src=\"require('./my_img.jpg')\"\n(URL) src=\"https://some-site.net/some-img.jpg\"",
              "doc-url": "https://v2.quasar.dev/vue-components/parallax"
            },
            {
              "name": "height",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Height of component (in pixels)\n\nExamples:\n:height=\"1000\"",
              "doc-url": "https://v2.quasar.dev/vue-components/parallax",
              "default": "500"
            },
            {
              "name": "speed",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Speed of parallax effect (0.0 < x < 1.0)\n\nExamples:\n:speed=\"0.24\"",
              "doc-url": "https://v2.quasar.dev/vue-components/parallax"
            },
            {
              "name": "scroll-target",
              "value": {
                "kind": "expression",
                "type": "Element|string"
              },
              "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one\n\nExamples:\n:scroll-target=\"$refs.scrollTarget\"\nscroll-target=\".scroll-target-class\"\nscroll-target=\"#scroll-target-id\"\nscroll-target=\"body\"",
              "doc-url": "https://v2.quasar.dev/vue-components/parallax"
            }
          ],
          "events": [
            {
              "name": "scroll",
              "arguments": [
                {
                  "name": "percentage",
                  "type": "number",
                  "description": "Number between 0.0 and 1.0 defining the scrolled percentage of the component\n\nExamples:\n0.234",
                  "doc-url": "https://v2.quasar.dev/vue-components/parallax"
                }
              ],
              "description": "Emitted when scrolling occurs",
              "doc-url": "https://v2.quasar.dev/vue-components/parallax"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot can be used for content that gets displayed on top of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/parallax"
            },
            {
              "name": "media",
              "description": "Slot for describing <img> or <video> tags",
              "doc-url": "https://v2.quasar.dev/vue-components/parallax"
            },
            {
              "name": "content",
              "description": "Scoped slot for describing content that gets displayed on top of the component; If specified, it overrides the default slot",
              "doc-url": "https://v2.quasar.dev/vue-components/parallax"
            }
          ],
          "description": "QParallax - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/parallax"
        },
        {
          "name": "QPopupEdit",
          "source": {
            "module": "quasar",
            "symbol": "QPopupEdit"
          },
          "attributes": [
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive\n\nExamples:\nv-model=\"myValue\"",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit",
              "required": true
            },
            {
              "name": "title",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Optional title (unless 'title' slot is used)\n\nExamples:\nCalories",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "buttons",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show Set and Cancel buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit",
              "type": "boolean"
            },
            {
              "name": "label-set",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Override Set button label\n\nExamples:\nOK",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "label-cancel",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Override Cancel button label\n\nExamples:\nCancel",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "auto-save",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Automatically save the model (if changed) when user clicks/taps outside of the popup; It does not apply to ESC key",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit",
              "type": "boolean"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit",
              "default": "\"primary\""
            },
            {
              "name": "validate",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Validates model then triggers 'save' and closes Popup; Returns a Boolean ('true' means valid, 'false' means abort); Syntax: validate(value); For best performance, reference it from your scope and do not define it inline\n\nExamples:\n:validate=\"myValidation\"",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit",
              "type": "boolean"
            },
            {
              "name": "fit",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the menu to match at least the full width of its target",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit",
              "type": "boolean"
            },
            {
              "name": "cover",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the menu to cover its target. When used, the 'self' and 'fit' props are no longer effective",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit",
              "default": "true",
              "type": "boolean"
            },
            {
              "name": "anchor",
              "value": {
                "kind": "expression",
                "type": "'top left'|'top middle'|'top right'|'top start'|'top end'|'center left'|'center middle'|'center right'|'center start'|'center end'|'bottom left'|'bottom middle'|'bottom right'|'bottom start'|'bottom end'"
              },
              "description": "Two values setting the starting position or anchor point of the menu relative to its target\n\nExamples:\ntop left\nbottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "self",
              "value": {
                "kind": "expression",
                "type": "'top left'|'top middle'|'top right'|'top start'|'top end'|'center left'|'center middle'|'center right'|'center start'|'center end'|'bottom left'|'bottom middle'|'bottom right'|'bottom start'|'bottom end'"
              },
              "description": "Two values setting the menu's own position relative to its target\n\nExamples:\ntop left\nbottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "offset",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "An array of two numbers to offset the menu horizontally and vertically in pixels\n\nExamples:\n[8, 8]\n[5, 10]",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "touch-position",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows for the target position to be set by the mouse position, when the target of the menu is either clicked or touched",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit",
              "type": "boolean"
            },
            {
              "name": "persistent",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Avoid menu closing by hitting ESC key or by clicking/tapping outside of the Popup",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit",
              "type": "boolean"
            },
            {
              "name": "separate-close-popup",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Separate from parent menu, marking it as a separate closing point for v-close-popup (without this, chained menus close all together)",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Forces menu to have squared borders",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit",
              "type": "boolean"
            },
            {
              "name": "max-height",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The maximum height of the menu; Size in CSS units, including unit name\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "max-width",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The maximum width of the menu; Size in CSS units, including unit name\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
                }
              ],
              "description": "Emitted when Popup gets cancelled in order to reset model to its initial value; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "before-show",
              "description": "Emitted right before Popup gets shown",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "show",
              "description": "Emitted right after Popup gets shown",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "before-hide",
              "description": "Emitted right before Popup gets dismissed",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "hide",
              "description": "Emitted right after Popup gets dismissed",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "save",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "Validated value to be saved",
                  "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
                },
                {
                  "name": "initialValue",
                  "type": "any",
                  "description": "Initial value, before changes",
                  "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
                }
              ],
              "description": "Emitted when value has been successfully validated and it should be saved",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            },
            {
              "name": "cancel",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "Edited value",
                  "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
                },
                {
                  "name": "initialValue",
                  "type": "any",
                  "description": "Initial value, before changes",
                  "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
                }
              ],
              "description": "Emitted when user cancelled the change (hit ESC key or clicking outside of Popup or hit 'Cancel' button)",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Used for injecting the form component; Do NOT destructure it",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
            }
          ],
          "description": "QPopupEdit - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/popup-edit"
        },
        {
          "name": "QPopupProxy",
          "source": {
            "module": "quasar",
            "symbol": "QPopupProxy"
          },
          "attributes": [
            {
              "name": "target",
              "value": {
                "kind": "expression",
                "type": "boolean|string|Element"
              },
              "description": "Configure a target element to trigger component toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) or a DOM element it attaches the events to the specified DOM element (if it exists)\n\nExamples:\n:target=\"false\"\n:target=\"$refs.target\"\ntarget=\".my-parent\"\ntarget=\"#target-id\"",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy",
              "default": "true"
            },
            {
              "name": "no-parent-event",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Skips attaching events to the target DOM element (that trigger the element to get shown)",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy",
              "type": "boolean"
            },
            {
              "name": "context-menu",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the component to behave like a context menu, which opens with a right mouse click (or long tap on mobile)",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy",
              "type": "boolean"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Defines the state of the component (shown/hidden); Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy",
              "type": "boolean"
            },
            {
              "name": "breakpoint",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Breakpoint (in pixels) of window width/height (whichever is smaller) from where a Menu will get to be used instead of a Dialog\n\nExamples:\n992\n:breakpoint=\"1024\"",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy",
              "default": "450"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
            },
            {
              "name": "before-show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
                }
              ],
              "description": "Emitted when component triggers show() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
            },
            {
              "name": "show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
                }
              ],
              "description": "Emitted after component has triggered show()",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
            },
            {
              "name": "before-hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
                }
              ],
              "description": "Emitted when component triggers hide() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
            },
            {
              "name": "hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
                }
              ],
              "description": "Emitted after component has triggered hide()",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
            }
          ],
          "description": "QPopupProxy - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/popup-proxy"
        },
        {
          "name": "QPullToRefresh",
          "source": {
            "module": "quasar",
            "symbol": "QPullToRefresh"
          },
          "attributes": [
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the icon from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/pull-to-refresh"
            },
            {
              "name": "bg-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for background of the icon container from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/pull-to-refresh"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon to display when refreshing the content\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/pull-to-refresh"
            },
            {
              "name": "no-mouse",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Don't listen for mouse events",
              "doc-url": "https://v2.quasar.dev/vue-components/pull-to-refresh",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/pull-to-refresh",
              "type": "boolean"
            },
            {
              "name": "scroll-target",
              "value": {
                "kind": "expression",
                "type": "Element|string"
              },
              "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one\n\nExamples:\n:scroll-target=\"$refs.scrollTarget\"\nscroll-target=\".scroll-target-class\"\nscroll-target=\"#scroll-target-id\"\nscroll-target=\"body\"",
              "doc-url": "https://v2.quasar.dev/vue-components/pull-to-refresh"
            }
          ],
          "events": [
            {
              "name": "refresh",
              "arguments": [
                {
                  "name": "done",
                  "type": "Function",
                  "description": "Call the done() function when your data has been refreshed",
                  "doc-url": "https://v2.quasar.dev/vue-components/pull-to-refresh"
                }
              ],
              "description": "Called whenever a refresh is triggered; at this time, your function should load more data",
              "doc-url": "https://v2.quasar.dev/vue-components/pull-to-refresh"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Content (area controlled by the component) goes here",
              "doc-url": "https://v2.quasar.dev/vue-components/pull-to-refresh"
            }
          ],
          "description": "QPullToRefresh - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/pull-to-refresh"
        },
        {
          "name": "QRadio",
          "source": {
            "module": "quasar",
            "symbol": "QRadio"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/radio"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/radio"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "number|string|null|undefined"
              },
              "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive\n\nExamples:\nv-model=\"option\"",
              "doc-url": "https://v2.quasar.dev/vue-components/radio",
              "required": true
            },
            {
              "name": "val",
              "value": {
                "kind": "expression",
                "type": "number|string|null|undefined"
              },
              "description": "The actual value of the option with which model value is changed\n\nExamples:\nopt1\n50",
              "doc-url": "https://v2.quasar.dev/vue-components/radio",
              "required": true
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Label to display along the radio control (or use the default slot instead of this prop)\n\nExamples:\nlabel=\"Option 1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/radio"
            },
            {
              "name": "left-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Label (if any specified) should be displayed on the left side of the checkbox",
              "doc-url": "https://v2.quasar.dev/vue-components/radio",
              "type": "boolean"
            },
            {
              "name": "checked-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The icon to be used when selected (instead of the default design)\n\nExamples:\nvisibility",
              "doc-url": "https://v2.quasar.dev/vue-components/radio"
            },
            {
              "name": "unchecked-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The icon to be used when un-selected (instead of the default design)\n\nExamples:\nvisibility_off",
              "doc-url": "https://v2.quasar.dev/vue-components/radio"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/radio"
            },
            {
              "name": "keep-color",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Should the color (if specified any) be kept when checkbox is unticked?",
              "doc-url": "https://v2.quasar.dev/vue-components/radio",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/radio",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/radio",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/radio",
              "type": "boolean"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/radio"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/radio"
                },
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/radio"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/radio"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot can be used as label, unless 'label' prop is specified; Suggestion: string",
              "doc-url": "https://v2.quasar.dev/vue-components/radio"
            }
          ],
          "description": "QRadio - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/radio"
        },
        {
          "name": "QRange",
          "source": {
            "module": "quasar",
            "symbol": "QRange"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "min",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Minimum value of the model; Set track's minimum value\n\nExamples:\n:min=\"0\"",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "max",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Maximum value of the model; Set track's maximum value\n\nExamples:\n:max=\"100\"",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "default": "100"
            },
            {
              "name": "inner-min",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Inner minimum value of the model; Use in case you need the model value to be inside of the track's min-max values; Needs to be higher or equal to 'min' prop; Defaults to 'min' prop\n\nExamples:\n:inner-min=\"0\"",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "inner-max",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Inner maximum value of the model; Use in case you need the model value to be inside of the track's min-max values; Needs to be lower or equal to 'max' prop; Defaults to 'max' prop\n\nExamples:\n:max-value=\"100\"",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "step",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Specify step amount between valid values (> 0.0); When step equals to 0 it defines infinite granularity\n\nExamples:\n:step=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "default": "1"
            },
            {
              "name": "snap",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Snap on valid values, rather than sliding freely; Suggestion: use with 'step' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "reverse",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Work in reverse (changes direction)",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "vertical",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display in vertical direction",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "track-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the track (can be 'transparent' too) from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "track-img",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply a pattern image on the track\n\nExamples:\n~assets/my-pattern.png",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "inner-track-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the inner track (can be 'transparent' too) from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "inner-track-img",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply a pattern image on the inner track\n\nExamples:\n~assets/my-pattern.png",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "selection-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the selection bar (can be 'transparent' too) from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "selection-img",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply a pattern image on the selection bar\n\nExamples:\n~assets/my-pattern.png",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Popup a label when user clicks/taps on the slider thumb and moves it",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "label-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "label-text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "switch-label-side",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Switch the position of the label (top <-> bottom or left <-> right)",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "label-always",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Always display the label",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "markers",
              "value": {
                "kind": "expression",
                "type": "boolean|number"
              },
              "description": "Display markers on the track, one for each possible value for the model or using a custom step (when specifying a Number)\n\nExamples:\nmarkers\n:markers=\"5\"",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "marker-labels",
              "value": {
                "kind": "expression",
                "type": "boolean|any[]|object|Function"
              },
              "description": "Configure the marker labels (or show the default ones if 'true'); Array of definition Objects or Object with key-value where key is the model and the value is the marker label definition\n\nExamples:\ntrue\n[ { value: 0, label: '0%' }, { value: 5, classes: 'my-class', style: { width: '24px' } } ]\n{ 0: '0%', 5: { label: '5%', classes: 'my-class', style: { width: '24px' } } }\nval => (10 * val) + '%'\nval => ({ label: (10 * val) + '%', classes: 'my-class', style: { width: '24px' } })",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "marker-labels-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "CSS class(es) to apply to the marker labels container\n\nExamples:\ntext-orange",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "switch-marker-labels-side",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Switch the position of the marker labels (top <-> bottom or left <-> right)",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "track-size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Track size (including CSS unit)\n\nExamples:\n35px",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "default": "\"4px\""
            },
            {
              "name": "thumb-size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Thumb size (including CSS unit)\n\nExamples:\n20px",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "default": "\"20px\""
            },
            {
              "name": "thumb-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "thumb-path",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Set custom thumb svg path\n\nExamples:\nM5 5 h10 v10 h-10 v-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "default": "\"M 4, 10 a 6,6 0 1,0 12,0 a 6,6 0 1,0 -12,0\""
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "object|null|undefined"
              },
              "description": "Model of the component of type { min, max } (both values must be between global min/max); Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"positionModel\"",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "required": true
            },
            {
              "name": "drag-range",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "User can drag range instead of just the two thumbs",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "drag-only-range",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "User can drag only the range instead and NOT the two thumbs",
              "doc-url": "https://v2.quasar.dev/vue-components/range",
              "type": "boolean"
            },
            {
              "name": "left-label-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for left label background from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "left-label-text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for left label text from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "right-label-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for right label background from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "right-label-text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for right label text from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "left-label-value",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Override default label for min value\n\nExamples:\n:left-label-value=\"model.min + 'px'\"",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "right-label-value",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Override default label for max value\n\nExamples:\n:right-label-value=\"model.max + 'px'\"",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "left-thumb-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name (from the Quasar Color Palette) for left thumb\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "right-thumb-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name (from the Quasar Color Palette) for right thumb\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            }
          ],
          "events": [
            {
              "name": "change",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/range"
                }
              ],
              "description": "Emitted on lazy model value change (after user slides then releases the thumb)",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "pan",
              "arguments": [
                {
                  "name": "phase",
                  "type": "'start'|'end'",
                  "description": "Phase of panning",
                  "doc-url": "https://v2.quasar.dev/vue-components/range"
                }
              ],
              "description": "Triggered when user starts panning on the component",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/range"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            }
          ],
          "slots": [
            {
              "name": "marker-label",
              "description": "What should the menu display after filtering options and none are left to be displayed; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            },
            {
              "name": "marker-label-group",
              "description": "What should the menu display after filtering options and none are left to be displayed; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/range"
            }
          ],
          "description": "QRange - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/range"
        },
        {
          "name": "QRating",
          "source": {
            "module": "quasar",
            "symbol": "QRating"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/rating"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/rating"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive\n\nExamples:\nv-model=\"rating\"\n:model-value=\"rating\"\n:model-value=\"2\"",
              "doc-url": "https://v2.quasar.dev/vue-components/rating",
              "required": true
            },
            {
              "name": "max",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Number of icons to display\n\nExamples:\n3\n:max=\"5\"",
              "doc-url": "https://v2.quasar.dev/vue-components/rating",
              "default": "5"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string|any[]"
              },
              "description": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix; If an array is provided each rating value will use the corresponding icon in the array (0 based)\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/rating"
            },
            {
              "name": "icon-selected",
              "value": {
                "kind": "expression",
                "type": "string|any[]"
              },
              "description": "Icon name following Quasar convention to be used when selected (optional); make sure you have the icon library installed unless you are using 'img:' prefix; If an array is provided each rating value will use the corresponding icon in the array (0 based)\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/rating"
            },
            {
              "name": "icon-half",
              "value": {
                "kind": "expression",
                "type": "string|any[]"
              },
              "description": "Icon name following Quasar convention to be used when selected (optional); make sure you have the icon library installed unless you are using 'img:' prefix; If an array is provided each rating value will use the corresponding icon in the array (0 based)\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/rating"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string|any[]"
              },
              "description": "Color name for component from the Quasar Color Palette; v1.5.0+: If an array is provided each rating value will use the corresponding color in the array (0 based)\n\nExamples:\nprimary\nteal-10\nprimary\nteal-10\n[\"accent\", \"grey-7\"] ",
              "doc-url": "https://v2.quasar.dev/vue-components/rating"
            },
            {
              "name": "color-selected",
              "value": {
                "kind": "expression",
                "type": "string|any[]"
              },
              "description": "Color name from the Quasar Palette for selected icons\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/rating"
            },
            {
              "name": "color-half",
              "value": {
                "kind": "expression",
                "type": "string|any[]"
              },
              "description": "Color name from the Quasar Palette for half selected icons\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/rating"
            },
            {
              "name": "no-dimming",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Does not lower opacity for unselected icons",
              "doc-url": "https://v2.quasar.dev/vue-components/rating",
              "type": "boolean"
            },
            {
              "name": "no-reset",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "When used, disables default behavior of clicking/tapping on icon which represents current model value to reset model to 0",
              "doc-url": "https://v2.quasar.dev/vue-components/rating",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/rating",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/rating",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/rating"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/rating"
            }
          ],
          "slots": [
            {
              "name": "tip-[name]",
              "description": "Slot to define the tooltip of icon at '[name]' where name is a 1-based index; Suggestion: QTooltip",
              "doc-url": "https://v2.quasar.dev/vue-components/rating"
            }
          ],
          "description": "QRating - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/rating"
        },
        {
          "name": "QResizeObserver",
          "source": {
            "module": "quasar",
            "symbol": "QResizeObserver"
          },
          "attributes": [
            {
              "name": "debounce",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Debounce amount (in milliseconds)\n\nExamples:\n0\n530",
              "doc-url": "https://v2.quasar.dev/vue-components/resize-observer",
              "default": "100"
            }
          ],
          "events": [
            {
              "name": "resize",
              "arguments": [
                {
                  "name": "size",
                  "type": "object",
                  "description": "New size",
                  "doc-url": "https://v2.quasar.dev/vue-components/resize-observer"
                }
              ],
              "description": "Parent element has resized (width or height changed)",
              "doc-url": "https://v2.quasar.dev/vue-components/resize-observer"
            }
          ],
          "slots": [],
          "description": "QResizeObserver - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/resize-observer"
        },
        {
          "name": "QResponsive",
          "source": {
            "module": "quasar",
            "symbol": "QResponsive"
          },
          "attributes": [
            {
              "name": "ratio",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Aspect ratio for the content; If value is a String, then avoid using a computational statement (like '16/9') and instead specify the String value of the result directly (eg. '1.7777')\n\nExamples:\n:ratio=\"4/3\"\n:ratio=\"16/9\"\nratio=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/responsive"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/responsive"
            }
          ],
          "description": "QResponsive - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/responsive"
        },
        {
          "name": "QScrollArea",
          "source": {
            "module": "quasar",
            "symbol": "QScrollArea"
          },
          "attributes": [
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area",
              "type": "boolean"
            },
            {
              "name": "bar-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Object with CSS properties and values for custom styling the scrollbars (both vertical and horizontal)\n\nExamples:\n:bar-style=\"{ borderRadius: '5px', background: 'red', opacity: 1 }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
            },
            {
              "name": "vertical-bar-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Object with CSS properties and values for custom styling the vertical scrollbar; Is applied on top of 'bar-style' prop\n\nExamples:\n:bar-style=\"{ right: '4px', borderRadius: '5px', background: 'red', width: '10px', opacity: 1 }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
            },
            {
              "name": "horizontal-bar-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Object with CSS properties and values for custom styling the horizontal scrollbar; Is applied on top of 'bar-style' prop\n\nExamples:\n:bar-style=\"{ bottom: '4px', borderRadius: '5px', background: 'red', height: '10px', opacity: 1 }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
            },
            {
              "name": "thumb-style",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "Object with CSS properties and values for custom styling the thumb of scrollbars (both vertical and horizontal)\n\nExamples:\n:thumb-style=\"{ right: '4px', borderRadius: '5px', background: 'red', width: '10px', opacity: 1 }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
            },
            {
              "name": "vertical-thumb-style",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "Object with CSS properties and values for custom styling the thumb of the vertical scrollbar; Is applied on top of 'thumb-style' prop\n\nExamples:\n:thumb-style=\"{ right: '4px', borderRadius: '5px', background: 'red', width: '10px', opacity: 1 }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
            },
            {
              "name": "horizontal-thumb-style",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "Object with CSS properties and values for custom styling the thumb of the horizontal scrollbar; Is applied on top of 'thumb-style' prop\n\nExamples:\n:thumb-style=\"{ bottom: '4px', borderRadius: '5px', background: 'red', height: '10px', opacity: 1 }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
            },
            {
              "name": "content-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Object with CSS properties and values for styling the container of QScrollArea\n\nExamples:\n:content-style=\"{ backgroundColor: '#C0C0C0' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
            },
            {
              "name": "content-active-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Object with CSS properties and values for styling the container of QScrollArea when scroll area becomes active (is mouse hovered)\n\nExamples:\n:content-active-style=\"{ backgroundColor: 'white' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
            },
            {
              "name": "visible",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Manually control the visibility of the scrollbar; Overrides default mouse over/leave behavior",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area",
              "type": "boolean"
            },
            {
              "name": "delay",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "When content changes, the scrollbar appears; this delay defines the amount of time (in milliseconds) before scrollbars disappear again (if component is not hovered)\n\nExamples:\n500\n:delay=\"550\"",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area",
              "default": "1000"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
            }
          ],
          "events": [
            {
              "name": "scroll",
              "arguments": [
                {
                  "name": "info",
                  "type": "object",
                  "description": "An object containing scroll information",
                  "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
                }
              ],
              "description": "Emitted when scroll information changes (and listener is configured)",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
            }
          ],
          "description": "QScrollArea - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/scroll-area"
        },
        {
          "name": "QScrollObserver",
          "source": {
            "module": "quasar",
            "symbol": "QScrollObserver"
          },
          "attributes": [
            {
              "name": "debounce",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Debounce amount (in milliseconds)\n\nExamples:\n0\n530",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-observer"
            },
            {
              "name": "axis",
              "value": {
                "kind": "expression",
                "type": "'both'|'vertical'|'horizontal'"
              },
              "description": "Axis on which to detect changes",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-observer",
              "default": "\"vertical\""
            },
            {
              "name": "scroll-target",
              "value": {
                "kind": "expression",
                "type": "Element|string"
              },
              "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one\n\nExamples:\n:scroll-target=\"$refs.scrollTarget\"\nscroll-target=\".scroll-target-class\"\nscroll-target=\"#scroll-target-id\"\nscroll-target=\"body\"",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-observer"
            }
          ],
          "events": [
            {
              "name": "scroll",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Scroll details",
                  "doc-url": "https://v2.quasar.dev/vue-components/scroll-observer"
                }
              ],
              "description": "Emitted when scroll position changes",
              "doc-url": "https://v2.quasar.dev/vue-components/scroll-observer"
            }
          ],
          "slots": [],
          "description": "QScrollObserver - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/scroll-observer"
        },
        {
          "name": "QSelect",
          "source": {
            "module": "quasar",
            "symbol": "QSelect"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists\n\nExamples:\ncar_id\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "virtual-scroll-horizontal",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Make virtual list work in horizontal mode",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "virtual-scroll-slice-size",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Minimum number of items to render in the virtual list\n\nExamples:\nvirtual-scroll-slice-size=\"60\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"30\""
            },
            {
              "name": "virtual-scroll-slice-ratio-before",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Ratio of number of items in visible zone to render before it\n\nExamples:\nvirtual-scroll-slice-ratio-before=\"0.3\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"1\""
            },
            {
              "name": "virtual-scroll-slice-ratio-after",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Ratio of number of items in visible zone to render after it\n\nExamples:\nvirtual-scroll-slice-ratio-after=\"2\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"1\""
            },
            {
              "name": "virtual-scroll-item-size",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Default size in pixels (height if vertical, width if horizontal) of an item; This value is used for rendering the initial list; Try to use a value close to the minimum size of an item\n\nExamples:\nvirtual-scroll-item-size=\"48\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"24\""
            },
            {
              "name": "virtual-scroll-sticky-size-start",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the start of the list; A correct value will improve scroll precision\n\nExamples:\nvirtual-scroll-sticky-size-start=\"48\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"0\""
            },
            {
              "name": "virtual-scroll-sticky-size-end",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the end of the list; A correct value will improve scroll precision\n\nExamples:\nvirtual-scroll-sticky-size-end=\"48\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"0\""
            },
            {
              "name": "table-colspan",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "The number of columns in the table (you need this if you use table-layout: fixed)\n\nExamples:\ntable-colspan=\"12\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Model of the component; Must be Array if using 'multiple' prop; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"myModel\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "required": true
            },
            {
              "name": "error",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Does field have validation errors?",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "error-message",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Validation error message (gets displayed only if 'error' is set to 'true')\n\nExamples:\nUsername must have at least 5 characters",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "no-error-icon",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide error icon when there is an error",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "rules",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules\n\nExamples:\n:rules=\"[ val => val.length <= 3 || 'Please use maximum 3 characters' ]\"\n:rules=\"[ 'fulltime' ]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "reactive-rules",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "lazy-rules",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper QForm submits itself",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "A text label that will “float” up above the input field, once the field gets focus\n\nExamples:\nUsername",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "stack-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Label will be always shown above the field regardless of field content (if any)",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "hint",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Helper (hint) text which gets placed below your wrapped form component\n\nExamples:\nFill in between 3 and 12 characters",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "hide-hint",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide the helper (hint) text when field doesn't have focus",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "prefix",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Prefix\n\nExamples:\n$",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "suffix",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Suffix\n\nExamples:\n@gmail.com",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "label-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the label from the Quasar Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "bg-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "loading",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot.",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "clearable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "clear-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Custom icon to use for the clear button when using along with 'clearable' prop\n\nExamples:\nclose",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "filled",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'filled' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "outlined",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'outlined' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "borderless",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use 'borderless' design for the field",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "standout",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)\n\nExamples:\nstandout\nstandout=\"bg-primary text-white\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "label-slot",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "bottom-slots",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enables bottom slots ('error', 'hint', 'counter')",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "hide-bottom-space",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "counter",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Show an automatic counter on bottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a small standard border-radius for a squared shape of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Remove border-radius so borders are squared; Overrides 'rounded' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "item-aligned",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Match inner content alignment to that of QItem",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "autofocus",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Focus field on initial component render",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "for",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well\n\nExamples:\nmyFieldsId",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "multiple",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allow multiple selection; Model must be Array",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "display-value",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Override default selection string, if not using 'selected' slot/scoped slot and if not using 'use-chips' prop\n\nExamples:\nOptions: x, y, z",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "display-value-html",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Force render the selected option(s) as HTML; This can lead to XSS attacks so make sure that you sanitize the content; Does NOT apply when using 'selected' or 'selected-item' slots!",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "options",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Available options that the user can select from. For best performance freeze the list of options.\n\nExamples:\n:options=\"[ 'BMW', 'Samsung Phone' ]\"\n:options=\"[ { label: 'BMW', value: 'car' }, { label: 'Samsung Phone', value: 'phone' } ]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"[]\""
            },
            {
              "name": "option-value",
              "value": {
                "kind": "expression",
                "type": "Function|string"
              },
              "description": "Property of option which holds the 'value'; If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\noption-value=\"modelNumber\"\n:option-value=\"(item) => item === null ? null : item.modelNumber\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"value\""
            },
            {
              "name": "option-label",
              "value": {
                "kind": "expression",
                "type": "Function|string"
              },
              "description": "Property of option which holds the 'label'; If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\noption-label=\"itemName\"\n:option-label=\"(item) => item === null ? 'Null value' : item.itemName\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"label\""
            },
            {
              "name": "option-disable",
              "value": {
                "kind": "expression",
                "type": "Function|string"
              },
              "description": "Property of option which tells it's disabled; The value of the property must be a Boolean; If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\noption-disable=\"cannotSelect\"\n:option-disable=\"(item) => item === null ? true : item.cannotSelect\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"disable\""
            },
            {
              "name": "hide-selected",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hides selection; Use the underlying input tag to hold the label (instead of showing it to the right of the input) of the selected option; Only works for non 'multiple' Selects",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "hide-dropdown-icon",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hides dropdown icon",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "dropdown-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "max-values",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Allow a maximum number of selections that the user can do\n\nExamples:\n5",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "options-dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode for options list; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "options-dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Options menu will be colored with a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "options-selected-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "CSS class name for options that are active/selected; Set it to an empty string to stop applying the default (which is text-* where * is the 'color' prop value)\n\nExamples:\ntext-orange",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "options-html",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Force render the options as HTML; This can lead to XSS attacks so make sure that you sanitize the content; Does NOT apply when using 'option' slot!",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "options-cover",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Expanded menu will cover the component (will not work along with 'use-input' prop for obvious reasons)",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "menu-shrink",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allow the options list to be narrower than the field (only in menu mode)",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "menu-anchor",
              "value": {
                "kind": "expression",
                "type": "'top left'|'top middle'|'top right'|'top start'|'top end'|'center left'|'center middle'|'center right'|'center start'|'center end'|'bottom left'|'bottom middle'|'bottom right'|'bottom start'|'bottom end'"
              },
              "description": "Two values setting the starting position or anchor point of the options list relative to the field (only in menu mode)\n\nExamples:\ntop left\nbottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "menu-self",
              "value": {
                "kind": "expression",
                "type": "'top left'|'top middle'|'top right'|'top start'|'top end'|'center left'|'center middle'|'center right'|'center start'|'center end'|'bottom left'|'bottom middle'|'bottom right'|'bottom start'|'bottom end'"
              },
              "description": "Two values setting the options list's own position relative to its target (only in menu mode)\n\nExamples:\ntop left\nbottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "menu-offset",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "An array of two numbers to offset the options list horizontally and vertically in pixels (only in menu mode)\n\nExamples:\n[8, 8]\n[5, 10]",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "popup-content-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Class definitions to be attributed to the popup content\n\nExamples:\nmy-special-class",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "popup-content-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Style definitions to be attributed to the popup content\n\nExamples:\nbackground-color: #ff0000\n:popup-content-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "use-input",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use an input tag where users can type",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "use-chips",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use QChip to show what is currently selected",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "fill-input",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Fills the input with current value; Useful along with 'hide-selected'; Does NOT works along with 'multiple' selection",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "new-value-mode",
              "value": {
                "kind": "expression",
                "type": "'add'|'add-unique'|'toggle'"
              },
              "description": "Enables creation of new values and defines behavior when a new value is added: 'add' means it adds the value (even if possible duplicate), 'add-unique' adds only unique values, and 'toggle' adds or removes the value (based on if it exists or not already); When using this prop then listening for @new-value becomes optional (only to override the behavior defined by 'new-value-mode')",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "map-options",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Try to map labels of model from 'options' Array; has a small performance penalty; If you are using emit-value you will probably need to use map-options to display the label text in the select field rather than the value;  Refer to the 'Affecting model' section above",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "emit-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Update model with the value of the selected option instead of the whole option",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "type": "boolean"
            },
            {
              "name": "input-debounce",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Debounce the input model update with an amount of milliseconds\n\nExamples:\n650",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "500"
            },
            {
              "name": "input-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Class definitions to be attributed to the underlying input tag\n\nExamples:\nmy-special-class\n:input-class=\"{ 'my-special-class': <condition> }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "input-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Style definitions to be attributed to the underlying input tag\n\nExamples:\nbackground-color: #ff0000\n:input-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "autocomplete",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Autocomplete attribute for field\n\nExamples:\nautocomplete=\"country\"",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "transition-show",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Transition when showing the menu/dialog; One of Quasar's embedded transitions\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"fade\""
            },
            {
              "name": "transition-hide",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Transition when hiding the menu/dialog; One of Quasar's embedded transitions\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"fade\""
            },
            {
              "name": "transition-duration",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Transition duration when hiding the menu/dialog (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "300"
            },
            {
              "name": "behavior",
              "value": {
                "kind": "expression",
                "type": "'default'|'menu'|'dialog'"
              },
              "description": "Overrides the default dynamic mode of showing as menu on desktop and dialog on mobiles",
              "doc-url": "https://v2.quasar.dev/vue-components/select",
              "default": "\"default\""
            }
          ],
          "events": [
            {
              "name": "virtual-scroll",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Object of properties on the new scroll position",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                }
              ],
              "description": "Emitted when the virtual scroll occurs",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "clear",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "The previous value before clearing it",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                }
              ],
              "description": "When using the 'clearable' property, this event is emitted when the clear icon is clicked",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "input-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "string",
                  "description": "New text value",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                }
              ],
              "description": "Emitted when the value in the text input changes",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "remove",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Removal details",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                }
              ],
              "description": "Emitted when an option is removed from selection",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "add",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Addition details",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                }
              ],
              "description": "Emitted when an option is added to the selection",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "new-value",
              "arguments": [
                {
                  "name": "inputValue",
                  "type": "string",
                  "description": "What the user typed\n\nExamples:\nphone",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                },
                {
                  "name": "doneFn",
                  "type": "Function",
                  "description": "Adds (optional) value to the model; Do not forget to call it after you validate the newly created value; Call it with no parameters if nothing should be added",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                }
              ],
              "description": "Enables creation of new values; Emitted when a new value has been created; You can override 'new-value-mode' property with it",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "filter",
              "arguments": [
                {
                  "name": "inputValue",
                  "type": "string",
                  "description": "What the user typed\n\nExamples:\nphone",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                },
                {
                  "name": "doneFn",
                  "type": "Function",
                  "description": "Supply a function which makes the necessary updates",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                },
                {
                  "name": "abortFn",
                  "type": "Function",
                  "description": "Call this function if something went wrong",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                }
              ],
              "description": "Emitted when user wants to filter a value",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "filter-abort",
              "description": "Emitted when a filtering was aborted; Probably a new one was requested?",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "popup-show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                }
              ],
              "description": "Emitted when the select options menu or dialog is shown.",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "popup-hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/select"
                }
              ],
              "description": "Emitted when the select options menu or dialog is hidden.",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Field main content",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "prepend",
              "description": "Prepend inner field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "append",
              "description": "Append to inner field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "before",
              "description": "Prepend outer field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "after",
              "description": "Append outer field; Suggestions: QIcon, QBtn",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "label",
              "description": "Slot for label; Used only if 'label-slot' prop is set or the 'label' prop is set; When it is used the text in the 'label' prop is ignored",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "error",
              "description": "Slot for errors; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "hint",
              "description": "Slot for hint text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "counter",
              "description": "Slot for counter text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "loading",
              "description": "Override default spinner when component is in loading mode; Suggestion: spinners",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "selected",
              "description": "Override default selection slot; Suggestion: QChip",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "before-options",
              "description": "Template slot for the elements that should be rendered before the list of options",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "after-options",
              "description": "Template slot for the elements that should be rendered after the list of options",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "no-option",
              "description": "What should the menu display after filtering options and none are left to be displayed; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "selected-item",
              "description": "Override default selection slot; Suggestion: QChip",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            },
            {
              "name": "option",
              "description": "Customize how options are rendered; Suggestion: QItem",
              "doc-url": "https://v2.quasar.dev/vue-components/select"
            }
          ],
          "description": "QSelect - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/select"
        },
        {
          "name": "QSeparator",
          "source": {
            "module": "quasar",
            "symbol": "QSeparator"
          },
          "attributes": [
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/separator",
              "type": "boolean"
            },
            {
              "name": "spaced",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "If set to true, the corresponding direction margins will be set to 8px; It can also be set to a size in CSS units, including unit name, or one of the xs|sm|md|lg|xl predefined sizes\n\nExamples:\n12px\nsm\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/separator",
              "default": "\"md\""
            },
            {
              "name": "inset",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "If set to Boolean true, the left and right margins will be set to 16px. If set to 'item' then it will match a QItem's design. If set to 'item-thumbnail' then it will match the design of a QItem with a thumbnail on the left side\n\nExamples:\nitem\nitem-thumbnail",
              "doc-url": "https://v2.quasar.dev/vue-components/separator"
            },
            {
              "name": "vertical",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "If set to true, the separator will be vertical.",
              "doc-url": "https://v2.quasar.dev/vue-components/separator",
              "type": "boolean"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/separator"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/separator"
            }
          ],
          "slots": [],
          "description": "QSeparator - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/separator"
        },
        {
          "name": "QSkeleton",
          "source": {
            "module": "quasar",
            "symbol": "QSkeleton"
          },
          "attributes": [
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/skeleton",
              "type": "boolean"
            },
            {
              "name": "type",
              "value": {
                "kind": "expression",
                "type": "'text'|'rect'|'circle'|'QBtn'|'QBadge'|'QChip'|'QToolbar'|'QCheckbox'|'QRadio'|'QToggle'|'QSlider'|'QRange'|'QInput'|'QAvatar'"
              },
              "description": "Type of skeleton placeholder",
              "doc-url": "https://v2.quasar.dev/vue-components/skeleton",
              "default": "\"rect\""
            },
            {
              "name": "animation",
              "value": {
                "kind": "expression",
                "type": "'wave'|'pulse'|'pulse-x'|'pulse-y'|'fade'|'blink'|'none'"
              },
              "description": "The animation effect of the skeleton placeholder",
              "doc-url": "https://v2.quasar.dev/vue-components/skeleton",
              "default": "\"wave\""
            },
            {
              "name": "animation-speed",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Animation speed (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/skeleton",
              "default": "300"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Removes border-radius so borders are squared",
              "doc-url": "https://v2.quasar.dev/vue-components/skeleton",
              "type": "boolean"
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/vue-components/skeleton",
              "type": "boolean"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name; Overrides 'height' and 'width' props and applies the value to both height and width\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/skeleton"
            },
            {
              "name": "width",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Width in CSS units, including unit name; Apply custom width; Use this prop or through CSS; Overridden by 'size' prop if used\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/skeleton"
            },
            {
              "name": "height",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Height in CSS units, including unit name; Apply custom height; Use this prop or through CSS; Overridden by 'size' prop if used\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/skeleton"
            },
            {
              "name": "tag",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "HTML tag to use\n\nExamples:\ndiv\nspan\ndiv\nspan",
              "doc-url": "https://v2.quasar.dev/vue-components/skeleton",
              "default": "\"div\""
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/skeleton"
            }
          ],
          "description": "QSkeleton - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/skeleton"
        },
        {
          "name": "QSlideItem",
          "source": {
            "module": "quasar",
            "symbol": "QSlideItem"
          },
          "attributes": [
            {
              "name": "left-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for left-side background from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "right-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for right-side background from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "top-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for top-side background from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "bottom-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for bottom-side background from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "left",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Details",
                  "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
                }
              ],
              "description": "Emitted when user finished sliding the item to the left",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "right",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Details",
                  "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
                }
              ],
              "description": "Emitted when user finished sliding the item to the right",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "top",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Details",
                  "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
                }
              ],
              "description": "Emitted when user finished sliding the item up",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "bottom",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Details",
                  "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
                }
              ],
              "description": "Emitted when user finished sliding the item down",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "slide",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Details",
                  "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
                }
              ],
              "description": "Emitted while user is sliding the item to one of the available sides",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "action",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Details",
                  "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
                }
              ],
              "description": "Emitted when user finished sliding the item to either sides",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "This is where item's sections go; Suggestion: QItemSection",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "left",
              "description": "Left side content when sliding",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "right",
              "description": "Right side content when sliding",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "top",
              "description": "Top side content when sliding",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            },
            {
              "name": "bottom",
              "description": "Bottom side content when sliding",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
            }
          ],
          "description": "QSlideItem - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/slide-item"
        },
        {
          "name": "QSlideTransition",
          "source": {
            "module": "quasar",
            "symbol": "QSlideTransition"
          },
          "attributes": [
            {
              "name": "appear",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "If set to true, the transition will be applied on the initial render.",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-transition",
              "type": "boolean"
            },
            {
              "name": "duration",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Duration (in milliseconds) enabling animated scroll.\n\nExamples:\n500\n:duration=\"500\"",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-transition",
              "default": "300"
            }
          ],
          "events": [
            {
              "name": "show",
              "description": "Emitted when component show animation is finished",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-transition"
            },
            {
              "name": "hide",
              "description": "Emitted when component hide animation is finished",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-transition"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "This is where content goes",
              "doc-url": "https://v2.quasar.dev/vue-components/slide-transition"
            }
          ],
          "description": "QSlideTransition - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/slide-transition"
        },
        {
          "name": "QSlider",
          "source": {
            "module": "quasar",
            "symbol": "QSlider"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "min",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Minimum value of the model; Set track's minimum value\n\nExamples:\n:min=\"0\"",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "max",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Maximum value of the model; Set track's maximum value\n\nExamples:\n:max=\"100\"",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "default": "100"
            },
            {
              "name": "inner-min",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Inner minimum value of the model; Use in case you need the model value to be inside of the track's min-max values; Needs to be higher or equal to 'min' prop; Defaults to 'min' prop\n\nExamples:\n:inner-min=\"0\"",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "inner-max",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Inner maximum value of the model; Use in case you need the model value to be inside of the track's min-max values; Needs to be lower or equal to 'max' prop; Defaults to 'max' prop\n\nExamples:\n:max-value=\"100\"",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "step",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Specify step amount between valid values (> 0.0); When step equals to 0 it defines infinite granularity\n\nExamples:\n:step=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "default": "1"
            },
            {
              "name": "snap",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Snap on valid values, rather than sliding freely; Suggestion: use with 'step' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "type": "boolean"
            },
            {
              "name": "reverse",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Work in reverse (changes direction)",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "type": "boolean"
            },
            {
              "name": "vertical",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display in vertical direction",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "type": "boolean"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "track-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the track (can be 'transparent' too) from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "track-img",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply a pattern image on the track\n\nExamples:\n~assets/my-pattern.png",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "inner-track-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the inner track (can be 'transparent' too) from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "inner-track-img",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply a pattern image on the inner track\n\nExamples:\n~assets/my-pattern.png",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "selection-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for the selection bar (can be 'transparent' too) from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "selection-img",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Apply a pattern image on the selection bar\n\nExamples:\n~assets/my-pattern.png",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Popup a label when user clicks/taps on the slider thumb and moves it",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "type": "boolean"
            },
            {
              "name": "label-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "label-text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "switch-label-side",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Switch the position of the label (top <-> bottom or left <-> right)",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "type": "boolean"
            },
            {
              "name": "label-always",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Always display the label",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "type": "boolean"
            },
            {
              "name": "markers",
              "value": {
                "kind": "expression",
                "type": "boolean|number"
              },
              "description": "Display markers on the track, one for each possible value for the model or using a custom step (when specifying a Number)\n\nExamples:\nmarkers\n:markers=\"5\"",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "marker-labels",
              "value": {
                "kind": "expression",
                "type": "boolean|any[]|object|Function"
              },
              "description": "Configure the marker labels (or show the default ones if 'true'); Array of definition Objects or Object with key-value where key is the model and the value is the marker label definition\n\nExamples:\ntrue\n[ { value: 0, label: '0%' }, { value: 5, classes: 'my-class', style: { width: '24px' } } ]\n{ 0: '0%', 5: { label: '5%', classes: 'my-class', style: { width: '24px' } } }\nval => (10 * val) + '%'\nval => ({ label: (10 * val) + '%', classes: 'my-class', style: { width: '24px' } })",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "marker-labels-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "CSS class(es) to apply to the marker labels container\n\nExamples:\ntext-orange",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "switch-marker-labels-side",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Switch the position of the marker labels (top <-> bottom or left <-> right)",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "type": "boolean"
            },
            {
              "name": "track-size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Track size (including CSS unit)\n\nExamples:\n35px",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "default": "\"4px\""
            },
            {
              "name": "thumb-size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Thumb size (including CSS unit)\n\nExamples:\n20px",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "default": "\"20px\""
            },
            {
              "name": "thumb-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "thumb-path",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Set custom thumb svg path\n\nExamples:\nM5 5 h10 v10 h-10 v-10",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "default": "\"M 4, 10 a 6,6 0 1,0 12,0 a 6,6 0 1,0 -12,0\""
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "type": "boolean"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "number|null|undefined"
              },
              "description": "Model of the component (must be between min/max); Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"positionModel\"",
              "doc-url": "https://v2.quasar.dev/vue-components/slider",
              "required": true
            },
            {
              "name": "label-value",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Override default label value\n\nExamples:\n:label-value=\"model + 'px'\"",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            }
          ],
          "events": [
            {
              "name": "change",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/slider"
                }
              ],
              "description": "Emitted on lazy model value change (after user slides then releases the thumb)",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "pan",
              "arguments": [
                {
                  "name": "phase",
                  "type": "'start'|'end'",
                  "description": "Phase of panning",
                  "doc-url": "https://v2.quasar.dev/vue-components/slider"
                }
              ],
              "description": "Triggered when user starts panning on the component",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "number|null",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/slider"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            }
          ],
          "slots": [
            {
              "name": "marker-label",
              "description": "What should the menu display after filtering options and none are left to be displayed; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            },
            {
              "name": "marker-label-group",
              "description": "What should the menu display after filtering options and none are left to be displayed; Suggestion: <div>",
              "doc-url": "https://v2.quasar.dev/vue-components/slider"
            }
          ],
          "description": "QSlider - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/slider"
        },
        {
          "name": "QSpace",
          "source": {
            "module": "quasar",
            "symbol": "QSpace"
          },
          "attributes": [],
          "slots": [],
          "description": "QSpace - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/space"
        },
        {
          "name": "QSpinner",
          "source": {
            "module": "quasar",
            "symbol": "QSpinner"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "thickness",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Override value to use for stroke-width\n\nExamples:\n2\n5",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners",
              "default": "5"
            }
          ],
          "slots": [],
          "description": "QSpinner - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerAudio",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerAudio"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerAudio - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerBall",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerBall"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerBall - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerBars",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerBars"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerBars - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerBox",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerBox"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerBox - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerClock",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerClock"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerClock - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerComment",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerComment"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerComment - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerCube",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerCube"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerCube - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerDots",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerDots"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerDots - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerFacebook",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerFacebook"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerFacebook - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerGears",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerGears"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerGears - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerGrid",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerGrid"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerGrid - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerHearts",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerHearts"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerHearts - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerHourglass",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerHourglass"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerHourglass - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerInfinity",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerInfinity"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerInfinity - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerIos",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerIos"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerIos - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerOrbit",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerOrbit"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerOrbit - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerOval",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerOval"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerOval - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerPie",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerPie"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerPie - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerPuff",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerPuff"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerPuff - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerRadio",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerRadio"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerRadio - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerRings",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerRings"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerRings - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSpinnerTail",
          "source": {
            "module": "quasar",
            "symbol": "QSpinnerTail"
          },
          "attributes": [
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/spinners"
            }
          ],
          "slots": [],
          "description": "QSpinnerTail - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/spinners"
        },
        {
          "name": "QSplitter",
          "source": {
            "module": "quasar",
            "symbol": "QSplitter"
          },
          "attributes": [
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Model of the component defining the size of first panel (or second if using reverse) in the unit specified (for '%' it's the split ratio percent - 0.0 < x < 100.0; for 'px' it's the size in px); Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"ratio\"",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter",
              "required": true
            },
            {
              "name": "reverse",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Apply the model size to the second panel (by default it applies to the first)",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter",
              "type": "boolean"
            },
            {
              "name": "unit",
              "value": {
                "kind": "expression",
                "type": "'%'|'px'"
              },
              "description": "CSS unit for the model",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter",
              "default": "\"%\""
            },
            {
              "name": "emit-immediately",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Emit model while user is panning on the separator",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter",
              "type": "boolean"
            },
            {
              "name": "horizontal",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the splitter to split its two panels horizontally, instead of vertically",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter",
              "type": "boolean"
            },
            {
              "name": "limits",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "An array of two values representing the minimum and maximum split size of the two panels; When 'px' unit is set then you can use Infinity as the second value to make it unbound on the other side\n\nExamples:\n:limits=\"[30, 70]\"\n:limits=\"[0, Infinity]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter",
              "default": "\"For '%' unit: [10, 90]; For 'px' unit: [50, Infinity]\""
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter",
              "type": "boolean"
            },
            {
              "name": "before-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Class definitions to be attributed to the 'before' panel\n\nExamples:\nbg-deep-orange\n:before-class=\"{ 'my-special-class': <condition> }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter"
            },
            {
              "name": "after-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Class definitions to be attributed to the 'after' panel\n\nExamples:\nbg-deep-orange\n:after-class=\"{ 'my-special-class': <condition> }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter"
            },
            {
              "name": "separator-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Class definitions to be attributed to the splitter separator\n\nExamples:\nbg-deep-orange\n:separator-class=\"{ 'my-special-class': <condition> }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter"
            },
            {
              "name": "separator-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "Style definitions to be attributed to the splitter separator\n\nExamples:\nbackground-color: #ff0000\n:separator-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default lighter color on the separator; To be used when background is darker; Avoid using when you are overriding through separator-class or separator-style props",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "number",
                  "description": "New model value (0.0 < x < 100.0) defining the ratio between panels\n\nExamples:\n0.22",
                  "doc-url": "https://v2.quasar.dev/vue-components/splitter"
                }
              ],
              "description": "Emitted when component's model value changes; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component; Suggestion: QTooltip, QMenu",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter"
            },
            {
              "name": "before",
              "description": "Content of the panel on left/top",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter"
            },
            {
              "name": "after",
              "description": "Content of the panel on right/bottom",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter"
            },
            {
              "name": "separator",
              "description": "Content to be placed inside the separator; By default it is centered",
              "doc-url": "https://v2.quasar.dev/vue-components/splitter"
            }
          ],
          "description": "QSplitter - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/splitter"
        },
        {
          "name": "QStep",
          "source": {
            "module": "quasar",
            "symbol": "QStep"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Panel name\n\nExamples:\naccounts\nfirstPanel\n:name=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "required": true
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "title",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Step title\n\nExamples:\nAd Groups\nPayment",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "required": true
            },
            {
              "name": "caption",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Step’s additional information that appears beneath the title\n\nExamples:\nCreate an account\nPayment details",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "prefix",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Step's prefix (max 2 characters) which replaces the icon if step does not has error, is being edited or is marked as done\n\nExamples:\n1\n2\nA\nB",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "done-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "done-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "active-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "active-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "error-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "error-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "header-nav",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allow navigation through the header",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "default": "true",
              "type": "boolean"
            },
            {
              "name": "done",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Mark the step as 'done'",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "error",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Mark the step as having an error",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "The content of the step; Can also contain a QStepperNavigation if you want to handle step navigation and don't have a global navigation in place",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            }
          ],
          "description": "QStep - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/stepper"
        },
        {
          "name": "QStepper",
          "source": {
            "module": "quasar",
            "symbol": "QStepper"
          },
          "attributes": [
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Model of the component defining the current panel's name; If a Number is used, it does not define the panel's index, but rather the panel's name which can also be an Integer; Either use this property (along with a listener for 'update:model-value' event) OR use the v-model directive.\n\nExamples:\nv-model=\"panelName\"",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "keep-alive",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to using Vue's native <keep-alive> component on the content",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "keep-alive-include",
              "value": {
                "kind": "expression",
                "type": "string|any[]|RegExp"
              },
              "description": "Equivalent to using Vue's native include prop for <keep-alive>; Values must be valid Vue component names\n\nExamples:\na,b\n/a|b/\n['a', 'b']",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "keep-alive-exclude",
              "value": {
                "kind": "expression",
                "type": "string|any[]|RegExp"
              },
              "description": "Equivalent to using Vue's native exclude prop for <keep-alive>; Values must be valid Vue component names\n\nExamples:\na,b\n/a|b/\n['a', 'b']",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "keep-alive-max",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Equivalent to using Vue's native max prop for <keep-alive>\n\nExamples:\n2",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "animated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enable transitions between panel (also see 'transition-prev' and 'transition-next' props)",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "infinite",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Makes component appear as infinite (when reaching last panel, next one will become the first one)",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "swipeable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enable swipe events (may interfere with content's touch/mouse events)",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "vertical",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put Stepper in vertical mode (instead of horizontal by default)",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "transition-prev",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "default": "\"slide-right/slide-down\""
            },
            {
              "name": "transition-next",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "default": "\"slide-left/slide-up\""
            },
            {
              "name": "transition-duration",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Transition duration (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "default": "300"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a 'flat' design (no default shadow)",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "alternative-labels",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use alternative labels - stacks the icon on top of the label (applies only to horizontal stepper)",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "header-nav",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allow navigation through the header",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "contracted",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide header labels on narrow windows",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper",
              "type": "boolean"
            },
            {
              "name": "inactive-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "inactive-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "done-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "done-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "active-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "active-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "error-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "error-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "header-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Class definitions to be attributed to the header\n\nExamples:\nmy-special-class",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "string|number",
                  "description": "New current panel name\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/stepper"
                }
              ],
              "description": "Emitted when the component changes the model; This event _isn't_ fired if the model is changed externally; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "before-transition",
              "arguments": [
                {
                  "name": "newVal",
                  "type": "string|number",
                  "description": "Panel name towards transition is going\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/stepper"
                },
                {
                  "name": "oldVal",
                  "type": "string|number",
                  "description": "Panel name from which transition is happening\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/stepper"
                }
              ],
              "description": "Emitted before transitioning to a new panel",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "transition",
              "arguments": [
                {
                  "name": "newVal",
                  "type": "string|number",
                  "description": "Panel name towards transition has occurred\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/stepper"
                },
                {
                  "name": "oldVal",
                  "type": "string|number",
                  "description": "Panel name from which transition has happened\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/stepper"
                }
              ],
              "description": "Emitted after component transitioned to a new panel",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Suggestion: QStep",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "navigation",
              "description": "Slot specific for the global navigation; Suggestion: QStepperNavigation",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            },
            {
              "name": "message",
              "description": "Slot specific for putting a message on top of each step (if horizontal stepper) or above steps (if vertical); Suggestion: QBanner, div.q-pa-lg",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            }
          ],
          "description": "QStepper - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/stepper"
        },
        {
          "name": "QStepperNavigation",
          "source": {
            "module": "quasar",
            "symbol": "QStepperNavigation"
          },
          "attributes": [],
          "slots": [
            {
              "name": "default",
              "description": "The content of the custom navigation, child of a QStep or of a QStepper (globally, through 'navigation' slot)",
              "doc-url": "https://v2.quasar.dev/vue-components/stepper"
            }
          ],
          "description": "QStepperNavigation - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/stepper"
        },
        {
          "name": "QTabPanel",
          "source": {
            "module": "quasar",
            "symbol": "QTabPanel"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Panel name\n\nExamples:\naccounts\nfirstPanel\n:name=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels",
              "required": true
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
            }
          ],
          "description": "QTabPanel - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
        },
        {
          "name": "QTabPanels",
          "source": {
            "module": "quasar",
            "symbol": "QTabPanels"
          },
          "attributes": [
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Model of the component defining the current panel's name; If a Number is used, it does not define the panel's index, but rather the panel's name which can also be an Integer; Either use this property (along with a listener for 'update:model-value' event) OR use the v-model directive.\n\nExamples:\nv-model=\"panelName\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
            },
            {
              "name": "keep-alive",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to using Vue's native <keep-alive> component on the content",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels",
              "type": "boolean"
            },
            {
              "name": "keep-alive-include",
              "value": {
                "kind": "expression",
                "type": "string|any[]|RegExp"
              },
              "description": "Equivalent to using Vue's native include prop for <keep-alive>; Values must be valid Vue component names\n\nExamples:\na,b\n/a|b/\n['a', 'b']",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
            },
            {
              "name": "keep-alive-exclude",
              "value": {
                "kind": "expression",
                "type": "string|any[]|RegExp"
              },
              "description": "Equivalent to using Vue's native exclude prop for <keep-alive>; Values must be valid Vue component names\n\nExamples:\na,b\n/a|b/\n['a', 'b']",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
            },
            {
              "name": "keep-alive-max",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Equivalent to using Vue's native max prop for <keep-alive>\n\nExamples:\n2",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
            },
            {
              "name": "animated",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enable transitions between panel (also see 'transition-prev' and 'transition-next' props)",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels",
              "type": "boolean"
            },
            {
              "name": "infinite",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Makes component appear as infinite (when reaching last panel, next one will become the first one)",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels",
              "type": "boolean"
            },
            {
              "name": "swipeable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Enable swipe events (may interfere with content's touch/mouse events)",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels",
              "type": "boolean"
            },
            {
              "name": "vertical",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Default transitions and swipe actions will be on the vertical axis",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels",
              "type": "boolean"
            },
            {
              "name": "transition-prev",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels",
              "default": "\"slide-right/slide-down\""
            },
            {
              "name": "transition-next",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels",
              "default": "\"slide-left/slide-up\""
            },
            {
              "name": "transition-duration",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Transition duration (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels",
              "default": "300"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "string|number",
                  "description": "New current panel name\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
                }
              ],
              "description": "Emitted when the component changes the model; This event _isn't_ fired if the model is changed externally; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
            },
            {
              "name": "before-transition",
              "arguments": [
                {
                  "name": "newVal",
                  "type": "string|number",
                  "description": "Panel name towards transition is going\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
                },
                {
                  "name": "oldVal",
                  "type": "string|number",
                  "description": "Panel name from which transition is happening\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
                }
              ],
              "description": "Emitted before transitioning to a new panel",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
            },
            {
              "name": "transition",
              "arguments": [
                {
                  "name": "newVal",
                  "type": "string|number",
                  "description": "Panel name towards transition has occurred\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
                },
                {
                  "name": "oldVal",
                  "type": "string|number",
                  "description": "Panel name from which transition has happened\n\nExamples:\ndashboard",
                  "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
                }
              ],
              "description": "Emitted after component transitioned to a new panel",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
            }
          ],
          "description": "QTabPanels - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/tab-panels"
        },
        {
          "name": "QTable",
          "source": {
            "module": "quasar",
            "symbol": "QTable"
          },
          "attributes": [
            {
              "name": "fullscreen",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Fullscreen mode\n\nExamples:\nv-model:fullscreen=\"isFullscreen\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "no-route-fullscreen-exit",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Changing route app won't exit fullscreen",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "rows",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Rows of data to display\n\nExamples:\n:rows=\"myData\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "row-key",
              "value": {
                "kind": "expression",
                "type": "string|Function"
              },
              "description": "Property of each row that defines the unique key of each row (the result must be a primitive, not Object, Array, etc); The value of property must be string or a function taking a row and returning the desired (nested) key in the row; If supplying a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\nrow-key=\"name\"\n:row-key=\"row => row.name\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"id\""
            },
            {
              "name": "virtual-scroll",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display data using QVirtualScroll (for non-grid mode only)",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "virtual-scroll-slice-size",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Minimum number of rows to render in the virtual list\n\nExamples:\nvirtual-scroll-slice-size=\"60\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"30\""
            },
            {
              "name": "virtual-scroll-slice-ratio-before",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Ratio of number of rows in visible zone to render before it\n\nExamples:\nvirtual-scroll-slice-ratio-before=\"0.3\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"1\""
            },
            {
              "name": "virtual-scroll-slice-ratio-after",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Ratio of number of rows in visible zone to render after it\n\nExamples:\nvirtual-scroll-slice-ratio-after=\"2\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"1\""
            },
            {
              "name": "virtual-scroll-item-size",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Default size in pixels of a row; This value is used for rendering the initial table; Try to use a value close to the minimum size of a row\n\nExamples:\nvirtual-scroll-item-size=\"48\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"48 (24 if dense)\""
            },
            {
              "name": "virtual-scroll-sticky-size-start",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Size in pixels of the sticky header (if using one); A correct value will improve scroll precision\n\nExamples:\nvirtual-scroll-sticky-size-start=\"48\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"0\""
            },
            {
              "name": "virtual-scroll-sticky-size-end",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Size in pixels of the sticky footer part (if using one); A correct value will improve scroll precision\n\nExamples:\nvirtual-scroll-sticky-size-end=\"48\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"0\""
            },
            {
              "name": "table-colspan",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "The number of columns in the table (you need this if you use table-layout: fixed)\n\nExamples:\ntable-colspan=\"12\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"grey-8\""
            },
            {
              "name": "icon-first-page",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention for stepping to first page; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "icon-prev-page",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention for stepping to previous page; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "icon-next-page",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention for stepping to next page; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "icon-last-page",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention for stepping to last page; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "grid",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display data as a grid instead of the default table",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "grid-header",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display header for grid-mode also",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; Connect with $q.screen for responsive behavior",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "columns",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "The column definitions (Array of Objects)\n\nExamples:\n:columns=\"tableColumns\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "visible-columns",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Array of Strings defining column names ('name' property of each column from 'columns' prop definitions); Columns marked as 'required' are not affected by this property\n\nExamples:\n:visible-columns=\"myCols\"\n[ 'desc', 'carbs', 'protein' ]",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "loading",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put Table into 'loading' state; Notify the user something is happening behind the scenes",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "title",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Table title\n\nExamples:\nDevice list",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "hide-header",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide table header layer",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "hide-bottom",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide table bottom layer regardless of what it has to display",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "hide-selected-banner",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide the selected rows banner (if any)",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "hide-no-data",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide the default no data bottom layer",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "hide-pagination",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Hide the pagination controls at the bottom",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a 'flat' design (no default shadow)",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Removes border-radius so borders are squared",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "separator",
              "value": {
                "kind": "expression",
                "type": "'horizontal'|'vertical'|'cell'|'none'"
              },
              "description": "Use a separator/border between rows, columns or all cells",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"horizontal\""
            },
            {
              "name": "wrap-cells",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Wrap text within table cells",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "binary-state-sort",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Skip the third state (unsorted) when user toggles column sort direction",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "column-sort-order",
              "value": {
                "kind": "expression",
                "type": "'ad'|'da'"
              },
              "description": "Set column sort order: 'ad' (ascending-descending) or 'da' (descending-ascending); It gets applied to all columns unless a column has its own sortOrder specified in the 'columns' definition prop",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"ad\""
            },
            {
              "name": "no-data-label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Override default text to display when no data is available\n\nExamples:\nNo devices available",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "no-results-label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Override default text to display when user filters the table and no matched results are found\n\nExamples:\nNo matched records",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "loading-label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Override default text to display when table is in loading state (see 'loading' prop)\n\nExamples:\nLoading devices...",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "selected-rows-label",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Text to display when user selected at least one row; For best performance, reference it from your scope and do not define it inline\n\nExamples:\n:selected-rows-label=\"getSelectedString\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "rows-per-page-label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Text to override default rows per page label at bottom of table\n\nExamples:\nRecords per page:",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "pagination-label",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Text to override default pagination label at bottom of table (unless 'pagination' scoped slot is used); For best performance, reference it from your scope and do not define it inline\n\nExamples:\n:pagination-label=\"getPaginationLabel\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "table-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "CSS style to apply to native HTML <table> element's wrapper (which is a DIV)\n\nExamples:\nbackground-color: #ff0000\n:table-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "table-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "CSS classes to apply to native HTML <table> element's wrapper (which is a DIV)\n\nExamples:\nmy-special-class\n:table-class=\"{ 'my-special-class': [Boolean condition] }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "table-header-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "CSS style to apply to header of native HTML <table> (which is a TR)\n\nExamples:\nbackground-color: #ff0000\n:table-header-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "table-header-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "CSS classes to apply to header of native HTML <table> (which is a TR)\n\nExamples:\nmy-special-class\n:table-header-class=\"{ 'my-special-class': [Boolean condition] }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "card-container-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "CSS style to apply to the cards container (when in grid mode)\n\nExamples:\nbackground-color: #ff0000\n:card-container-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "card-container-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "CSS classes to apply to the cards container (when in grid mode)\n\nExamples:\nmy-special-class\njustify-center\n:card-container-class=\"{ 'my-special-class': [Boolean condition] }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "card-style",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "CSS style to apply to the card (when in grid mode) or container card (when not in grid mode)\n\nExamples:\nbackground-color: #ff0000\n:card-style=\"{ backgroundColor: '#ff0000' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "card-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "CSS classes to apply to the card (when in grid mode) or container card (when not in grid mode)\n\nExamples:\nmy-special-class\n:card-class=\"{ 'my-special-class': [Boolean condition] }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "title-class",
              "value": {
                "kind": "expression",
                "type": "string|any[]|object"
              },
              "description": "CSS classes to apply to the title (if using 'title' prop)\n\nExamples:\nmy-special-class\ntext-h1\n:title-class=\"{ 'text-h1': [Boolean condition] }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "filter",
              "value": {
                "kind": "expression",
                "type": "string|object"
              },
              "description": "String/Object to filter table with; When using an Object it requires 'filter-method' to also be specified since it will be a custom filtering\n\nExamples:\n:filter=\"myFilterInput\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "filter-method",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "The actual filtering mechanism; For best performance, reference it from your scope and do not define it inline\n\nExamples:\n(see source code)",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"(see source code)\""
            },
            {
              "name": "pagination",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "Pagination object; You can also use the 'v-model:pagination' for synching; When not synching it simply initializes the pagination on first render\n\nExamples:\n:pagination=\"myInitialPagination\"\nv-model:pagination=\"myPagination\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "rows-per-page-options",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Options for user to pick (Numbers); Number 0 means 'Show all rows in one page'\n\nExamples:\n:rows-per-page-options=\"[10, 20]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"[ 3, 5, 7, 10, 15, 20, 25, 50, 0 ]\""
            },
            {
              "name": "selection",
              "value": {
                "kind": "expression",
                "type": "'single'|'multiple'|'none'"
              },
              "description": "Selection type\n\nExamples:\nmultiple",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"none\""
            },
            {
              "name": "selected",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Keeps the user selection array\n\nExamples:\nv-model:selected=\"selection\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"[]\""
            },
            {
              "name": "expanded",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Keeps the array with expanded rows keys\n\nExamples:\nv-model:expanded=\"expanded\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"[]\""
            },
            {
              "name": "sort-method",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "The actual sort mechanism. Function (rows, sortBy, descending) => sorted rows; For best performance, reference it from your scope and do not define it inline\n\nExamples:\n(see source code)",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "default": "\"(see source code)\""
            }
          ],
          "events": [
            {
              "name": "row-click",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                },
                {
                  "name": "row",
                  "type": "object",
                  "description": "The row upon which user has clicked/tapped",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                },
                {
                  "name": "index",
                  "type": "number",
                  "description": "Index of the row in the current page",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                }
              ],
              "description": "Emitted when user clicks/taps on a row; Is not emitted when using body/row/item scoped slots",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "row-dblclick",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                },
                {
                  "name": "row",
                  "type": "object",
                  "description": "The row upon which user has double clicked/tapped",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                },
                {
                  "name": "index",
                  "type": "number",
                  "description": "Index of the row in the current page",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                }
              ],
              "description": "Emitted when user quickly double clicks/taps on a row; Is not emitted when using body/row/item scoped slots; Please check JS dblclick event support before using",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "row-contextmenu",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                },
                {
                  "name": "row",
                  "type": "object",
                  "description": "The row upon which user has right clicked/long tapped",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                },
                {
                  "name": "index",
                  "type": "number",
                  "description": "Index of the row in the current page",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                }
              ],
              "description": "Emitted when user right clicks/long taps on a row; Is not emitted when using body/row/item scoped slots",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "request",
              "arguments": [
                {
                  "name": "requestProp",
                  "type": "object",
                  "description": "Props of the request",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                }
              ],
              "description": "Emitted when a server request is triggered",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "selection",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Selection details",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                }
              ],
              "description": "Emitted when user selects/unselects row(s)",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "update:pagination",
              "arguments": [
                {
                  "name": "newPagination",
                  "type": "object",
                  "description": "The updated pagination object",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                }
              ],
              "description": "Used by Vue on 'v-model:pagination' for updating its value",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "update:selected",
              "arguments": [
                {
                  "name": "newSelected",
                  "type": "any[]",
                  "description": "The updated selected array\n\nExamples:\n[ { name: 'Frozen Yogurt', calories: 159, fat: 6 } ]",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                }
              ],
              "description": "Used by Vue on 'v-model:selected' prop for updating its value",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "update:expanded",
              "arguments": [
                {
                  "name": "newExpanded",
                  "type": "any[]",
                  "description": "The updated expanded array\n\nExamples:\n[ 'row-a', 'row-b' ]",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                }
              ],
              "description": "Used by Vue on 'v-model:expanded' prop for updating its value",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "virtual-scroll",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Object of properties on the new scroll position",
                  "doc-url": "https://v2.quasar.dev/vue-components/table"
                }
              ],
              "description": "Emitted when the virtual scroll occurs, if using virtual scroll",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            }
          ],
          "slots": [
            {
              "name": "loading",
              "description": "Override default effect when table is in loading state; Suggestion: QInnerLoading",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "item",
              "description": "Slot to use for defining an item when in 'grid' mode; Suggestion: QCard",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "body",
              "description": "Slot to define how a body row looks like; Suggestion: QTr + Td",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "body-cell",
              "description": "Slot to define how all body cells look like; Suggestion: QTd",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "body-cell-[name]",
              "description": "Slot to define how a specific column cell looks like; replace '[name]' with column name (from columns definition object)",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "header",
              "description": "Slot to define how header looks like; Suggestion: QTr + QTh",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "header-cell",
              "description": "Slot to define how each header cell looks like; Suggestion: QTh",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "header-cell-[name]",
              "description": "Slot to define how a specific header cell looks like; replace '[name]' with column name (from columns definition object)",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "body-selection",
              "description": "Slot to define how body selection column looks like; Suggestion: QCheckbox",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "header-selection",
              "description": "Slot to define how header selection column looks like (available only for multiple selection mode); Suggestion: QCheckbox",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "top-row",
              "description": "Slot to define how top extra row looks like",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "bottom-row",
              "description": "Slot to define how bottom extra row looks like",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "top",
              "description": "Slot to define how table top looks like",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "bottom",
              "description": "Slot to define how table bottom looks like",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "pagination",
              "description": "Slot to override default pagination label and buttons",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "top-left",
              "description": "Slot to define how left part of the table top looks like",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "top-right",
              "description": "Slot to define how right part of the table top looks like",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "top-selection",
              "description": "Slot to define how top table section looks like when user has selected at least one row",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "no-data",
              "description": "Slot to define how the bottom will look like when is nothing to display",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            }
          ],
          "description": "QTable - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/table"
        },
        {
          "name": "QTd",
          "source": {
            "module": "quasar",
            "symbol": "QTd"
          },
          "attributes": [
            {
              "name": "props",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "QTable's column scoped slot property\n\nExamples:\n:props=\"props\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "auto-width",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Tries to shrink column width size; Useful for columns with a checkbox/radio/toggle",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            },
            {
              "name": "no-hover",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Disable hover effect",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            }
          ],
          "description": "QTd - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/table"
        },
        {
          "name": "QTh",
          "source": {
            "module": "quasar",
            "symbol": "QTh"
          },
          "attributes": [
            {
              "name": "props",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "QTable's header column scoped slot property\n\nExamples:\n:props=\"props\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "auto-width",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Tries to shrink header column width size; Useful for columns with a checkbox/radio/toggle",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            }
          ],
          "description": "QTh - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/table"
        },
        {
          "name": "QTr",
          "source": {
            "module": "quasar",
            "symbol": "QTr"
          },
          "attributes": [
            {
              "name": "props",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "QTable's row scoped slot property\n\nExamples:\n:props=\"props\"",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            },
            {
              "name": "no-hover",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Disable hover effect",
              "doc-url": "https://v2.quasar.dev/vue-components/table",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/table"
            }
          ],
          "description": "QTr - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/table"
        },
        {
          "name": "QRouteTab",
          "source": {
            "module": "quasar",
            "symbol": "QRouteTab"
          },
          "attributes": [
            {
              "name": "to",
              "value": {
                "kind": "expression",
                "type": "string|object"
              },
              "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used\n\nExamples:\n/home/dashboard\n:to=\"{ name: 'my-route-name' }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "exact",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to Vue Router <router-link> 'exact' property; Superseeded by 'href' prop if used",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "replace",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "active-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used\n\nExamples:\nmy-active-class",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "exact-active-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used\n\nExamples:\nmy-exact-active-class",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "href",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link href attribute; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props\n\nExamples:\nhttp://quasar.dev",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "target",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Native <a> link target attribute; Use it only along with 'href' prop; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props\n\nExamples:\n_blank\n_self\n_parent\n_top",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "A number or string to label the tab\n\nExamples:\nHome",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "alert",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "Adds an alert symbol to the tab, notifying the user there are some updates; If its value is not a Boolean, then you can specify a color\n\nExamples:\nalert\nalert=\"purple\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "alert-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Adds a floating icon to the tab, notifying the user there are some updates; It's displayed only if 'alert' is set; Can use the color specified by 'alert' prop\n\nExamples:\nalert-icon=\"alarm_on\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Panel name\n\nExamples:\nhome\n:name=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "default": "\"A random UID\""
            },
            {
              "name": "no-caps",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Turns off capitalizing all letters within the tab (which is the default)",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "content-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Class definitions to be attributed to the content wrapper\n\nExamples:\nmy-special-class",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "ripple",
              "value": {
                "kind": "expression",
                "type": "boolean|object"
              },
              "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)\n\nExamples:\nfalse\n{ early: true, center: true, color: 'teal', keyCodes: [] }",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "default": "true"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            }
          ],
          "events": [
            {
              "name": "click",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object; If you want to cancel navigation set synchronously 'evt.navigate' to false",
                  "doc-url": "https://v2.quasar.dev/vue-components/tabs"
                },
                {
                  "name": "navigateFn",
                  "type": "Function",
                  "description": "When you need to control the time at which the tab should trigger the route navigation then set 'evt.navigate' to false and call this function; Useful if you have async work to be done before the actual route navigation",
                  "doc-url": "https://v2.quasar.dev/vue-components/tabs"
                }
              ],
              "description": "Emitted when component is clicked (activated)",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Suggestion: QMenu, QTooltip",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            }
          ],
          "description": "QRouteTab - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/tabs"
        },
        {
          "name": "QTab",
          "source": {
            "module": "quasar",
            "symbol": "QTab"
          },
          "attributes": [
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "A number or string to label the tab\n\nExamples:\nHome",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "alert",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "Adds an alert symbol to the tab, notifying the user there are some updates; If its value is not a Boolean, then you can specify a color\n\nExamples:\nalert\nalert=\"purple\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "alert-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Adds a floating icon to the tab, notifying the user there are some updates; It's displayed only if 'alert' is set; Can use the color specified by 'alert' prop\n\nExamples:\nalert-icon=\"alarm_on\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Panel name\n\nExamples:\nhome\n:name=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "default": "\"A random UID\""
            },
            {
              "name": "no-caps",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Turns off capitalizing all letters within the tab (which is the default)",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "content-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Class definitions to be attributed to the content wrapper\n\nExamples:\nmy-special-class",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "ripple",
              "value": {
                "kind": "expression",
                "type": "boolean|object"
              },
              "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)\n\nExamples:\nfalse\n{ early: true, center: true, color: 'teal', keyCodes: [] }",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "default": "true"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Suggestion: QMenu, QTooltip",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            }
          ],
          "description": "QTab - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/tabs"
        },
        {
          "name": "QTabs",
          "source": {
            "module": "quasar",
            "symbol": "QTabs"
          },
          "attributes": [
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "number|string|null|undefined"
              },
              "description": "Model of the component defining current panel name; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"selectedTab\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "vertical",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Use vertical design (tabs one on top of each other rather than one next to the other horizontally)",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "outside-arrows",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Reserve space for arrows to place them on each side of the tabs (the arrows fade when inactive)",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "mobile-arrows",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Force display of arrows (if needed) on mobile",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "align",
              "value": {
                "kind": "expression",
                "type": "'left'|'center'|'right'|'justify'"
              },
              "description": "Horizontal alignment the tabs within the tabs container\n\nExamples:\nright",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "default": "\"center\""
            },
            {
              "name": "breakpoint",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Breakpoint (in pixels) of tabs container width at which the tabs automatically turn to a justify alignment\n\nExamples:\n:breakpoint=\"500\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "default": "600"
            },
            {
              "name": "active-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The color to be attributed to the text of the active tab\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "active-bg-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The color to be attributed to the background of the active tab\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "indicator-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The color to be attributed to the indicator (the underline) of the active tab\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "content-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Class definitions to be attributed to the content wrapper\n\nExamples:\nmy-special-class",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "active-class",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The class to be set on the active tab\n\nExamples:\nmy-active-class",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "left-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The name of an icon to replace the default arrow used to scroll through the tabs to the left, when the tabs extend past the width of the tabs container\n\nExamples:\narrow_left",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "right-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The name of an icon to replace the default arrow used to scroll through the tabs to the right, when the tabs extend past the width of the tabs container\n\nExamples:\narrow_right",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            },
            {
              "name": "stretch",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "When used on flexbox parent, tabs will stretch to parent's height",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "shrink",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "By default, QTabs is set to grow to the available space; However, you can reverse that with this prop; Useful (and required) when placing the component in a QToolbar",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "switch-indicator",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Switches the indicator position (on left of tab for vertical mode or above the tab for default horizontal mode)",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "narrow-indicator",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the indicator to be the same width as the tab's content (text or icon), instead of the whole width of the tab",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "inline-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the text to be inline with the icon, should one be used",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "no-caps",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Turns off capitalizing all letters within the tab (which is the default)",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/tabs"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/tabs"
            }
          ],
          "description": "QTabs - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/tabs"
        },
        {
          "name": "QTime",
          "source": {
            "module": "quasar",
            "symbol": "QTime"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/time"
            },
            {
              "name": "landscape",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display the component in landscape mode",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "type": "boolean"
            },
            {
              "name": "mask",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Mask (formatting string) used for parsing and formatting value\n\nExamples:\nHH:mm:ss\nYYYY-MM-DD HH:mm:ss\nHH:mm MMMM Do, YYYY",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "default": "\"HH:mm\""
            },
            {
              "name": "locale",
              "value": {
                "kind": "expression",
                "type": "object"
              },
              "description": "Locale formatting options\n\nExamples:\n:locale=\"{ monthsShort: ['Ian', 'Feb', 'Mar', '...'] }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/time"
            },
            {
              "name": "calendar",
              "value": {
                "kind": "expression",
                "type": "'gregorian'|'persian'"
              },
              "description": "Specify calendar type",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "default": "\"gregorian\""
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/time"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/time"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Removes border-radius so borders are squared",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a 'flat' design (no default shadow)",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "type": "boolean"
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "type": "boolean"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "string|null|undefined"
              },
              "description": "Time of the component; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive\n\nExamples:\nv-model=\"currentTime\"",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "required": true
            },
            {
              "name": "format24h",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Forces 24 hour time display instead of AM/PM system",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "default": "\"(based on Quasar lang language being used)\"",
              "type": "boolean"
            },
            {
              "name": "default-date",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The default date to use (in YYYY/MM/DD format) when model is unfilled (undefined or null)\n\nExamples:\n1995/02/23",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "default": "\"current day\""
            },
            {
              "name": "options",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Optionally configure what time is the user allowed to set; Overridden by 'hour-options', 'minute-options' and 'second-options' if those are set; For best performance, reference it from your scope and do not define it inline\n\nExamples:\n:options=\"(hr, min, sec) => hr <= 6\"",
              "doc-url": "https://v2.quasar.dev/vue-components/time"
            },
            {
              "name": "hour-options",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Optionally configure what hours is the user allowed to set; Overrides 'options' prop if that is also set\n\nExamples:\n:hour-options=\"[ 3, 6, 9 ]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/time"
            },
            {
              "name": "minute-options",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Optionally configure what minutes is the user allowed to set; Overrides 'options' prop if that is also set\n\nExamples:\n:minute-options=\"[0, 15, 30, 45]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/time"
            },
            {
              "name": "second-options",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Optionally configure what seconds is the user allowed to set; Overrides 'options' prop if that is also set\n\nExamples:\n:second-options=\"[0, 7, 10, 23]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/time"
            },
            {
              "name": "with-seconds",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allow the time to be set with seconds",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "type": "boolean"
            },
            {
              "name": "now-btn",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Display a button that selects the current time",
              "doc-url": "https://v2.quasar.dev/vue-components/time",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "string|null",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/time"
                },
                {
                  "name": "details",
                  "type": "object",
                  "description": "Object of properties on the new model",
                  "doc-url": "https://v2.quasar.dev/vue-components/time"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/time"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "This is where additional buttons can go",
              "doc-url": "https://v2.quasar.dev/vue-components/time"
            }
          ],
          "description": "QTime - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/time"
        },
        {
          "name": "QTimeline",
          "source": {
            "module": "quasar",
            "symbol": "QTimeline"
          },
          "attributes": [
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline"
            },
            {
              "name": "side",
              "value": {
                "kind": "expression",
                "type": "'left'|'right'"
              },
              "description": "Side to place the timeline entries in dense and comfortable layout; For loose layout it gets overridden by QTimelineEntry side prop",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline",
              "default": "\"right\""
            },
            {
              "name": "layout",
              "value": {
                "kind": "expression",
                "type": "'dense'|'comfortable'|'loose'"
              },
              "description": "Layout of the timeline. Dense keeps content and labels on one side. Comfortable keeps content on one side and labels on the opposite side. Loose puts content on both sides.",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline",
              "default": "\"dense\""
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Used for content of component",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline"
            }
          ],
          "description": "QTimeline - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/timeline"
        },
        {
          "name": "QTimelineEntry",
          "source": {
            "module": "quasar",
            "symbol": "QTimelineEntry"
          },
          "attributes": [
            {
              "name": "heading",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Defines a heading timeline item",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline",
              "type": "boolean"
            },
            {
              "name": "tag",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Tag to use, if of type 'heading' only\n\nExamples:\ndiv\nspan\nh1",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline",
              "default": "\"h3\""
            },
            {
              "name": "side",
              "value": {
                "kind": "expression",
                "type": "'left'|'right'"
              },
              "description": "Side to place the timeline entry; Works only if QTimeline layout is loose.",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline",
              "default": "\"right\""
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline"
            },
            {
              "name": "avatar",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "URL to the avatar image; Icon takes precedence if used, so it replaces avatar\n\nExamples:\n(public folder) src=\"img/my-bg.png\"\n(assets folder) src=\"~assets/my-img.png\"\n(relative path format) :src=\"require('./my_img.jpg')\"\n(URL) src=\"https://placeimg.com/500/300/nature\"",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline"
            },
            {
              "name": "title",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Title of timeline entry; Is overridden if using 'title' slot\n\nExamples:\nDecember party",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline"
            },
            {
              "name": "subtitle",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Subtitle of timeline entry; Is overridden if using 'subtitle' slot\n\nExamples:\nAll invited",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline"
            },
            {
              "name": "body",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Body content of timeline entry; Use this prop or the default slot\n\nExamples:\nLorem ipsum dolor sit amet, consectetur adipisicing elit.",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Timeline entry content (body)",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline"
            },
            {
              "name": "title",
              "description": "Optional slot for title; When used, it overrides 'title' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline"
            },
            {
              "name": "subtitle",
              "description": "Optional slot for subtitle; When used, it overrides 'subtitle' prop",
              "doc-url": "https://v2.quasar.dev/vue-components/timeline"
            }
          ],
          "description": "QTimelineEntry - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/timeline"
        },
        {
          "name": "QToggle",
          "source": {
            "module": "quasar",
            "symbol": "QToggle"
          },
          "attributes": [
            {
              "name": "name",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL\n\nExamples:\ncar_id",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "size",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)\n\nExamples:\n16px\n2rem\nxs\nmd",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "any|any[]"
              },
              "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive\n\nExamples:\nfalse\n['car', 'building']",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle",
              "required": true
            },
            {
              "name": "val",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Works when model ('value') is Array. It tells the component which value should add/remove when ticked/unticked\n\nExamples:\ncar",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "true-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "What model value should be considered as checked/ticked/on?\n\nExamples:\nAgreed",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle",
              "default": "true"
            },
            {
              "name": "false-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "What model value should be considered as unchecked/unticked/off?\n\nExamples:\nDisagree",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "indeterminate-value",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "What model value should be considered as 'indeterminate'?\n\nExamples:\n0\nnot_answered",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "toggle-order",
              "value": {
                "kind": "expression",
                "type": "'tf'|'ft'"
              },
              "description": "Determines toggle order of the two states ('t' stands for state of true, 'f' for state of false); If 'toggle-indeterminate' is true, then the order is: indet -> first state -> second state -> indet (and repeat), otherwise: indet -> first state -> second state -> first state -> second state -> ...",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle",
              "default": "\"tf\""
            },
            {
              "name": "toggle-indeterminate",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "When user clicks/taps on the component, should we toggle through the indeterminate state too?",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle",
              "type": "boolean"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Label to display along the component (or use the default slot instead of this prop)\n\nExamples:\nI agree with the Terms and Conditions",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "left-label",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Label (if any specified) should be displayed on the left side of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle",
              "type": "boolean"
            },
            {
              "name": "checked-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The icon to be used when the toggle is on\n\nExamples:\nvisibility",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "unchecked-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The icon to be used when the toggle is off\n\nExamples:\nvisibility_off",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "indeterminate-icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The icon to be used when the model is indeterminate\n\nExamples:\nhelp",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "keep-color",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Should the color (if specified any) be kept when the component is unticked/ off?",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle",
              "type": "boolean"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle",
              "type": "boolean"
            },
            {
              "name": "tabindex",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Tabindex HTML attribute value\n\nExamples:\n0\n100",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            },
            {
              "name": "icon-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Override default icon color (for truthy state only); Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "any",
                  "description": "New model value",
                  "doc-url": "https://v2.quasar.dev/vue-components/toggle"
                },
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/toggle"
                }
              ],
              "description": "Emitted when the component needs to change the model; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot can be used as label, unless 'label' prop is specified; Suggestion: string",
              "doc-url": "https://v2.quasar.dev/vue-components/toggle"
            }
          ],
          "description": "QToggle - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/toggle"
        },
        {
          "name": "QToolbar",
          "source": {
            "module": "quasar",
            "symbol": "QToolbar"
          },
          "attributes": [
            {
              "name": "inset",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Apply an inset to content (useful for subsequent toolbars)",
              "doc-url": "https://v2.quasar.dev/vue-components/toolbar",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/toolbar"
            }
          ],
          "description": "QToolbar - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/toolbar"
        },
        {
          "name": "QToolbarTitle",
          "source": {
            "module": "quasar",
            "symbol": "QToolbarTitle"
          },
          "attributes": [
            {
              "name": "shrink",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "By default, QToolbarTitle is set to grow to the available space. However, you can reverse that with this prop",
              "doc-url": "https://v2.quasar.dev/vue-components/toolbar",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/toolbar"
            }
          ],
          "description": "QToolbarTitle - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/toolbar"
        },
        {
          "name": "QTooltip",
          "source": {
            "module": "quasar",
            "symbol": "QTooltip"
          },
          "attributes": [
            {
              "name": "transition-show",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip",
              "default": "\"jump-down\""
            },
            {
              "name": "transition-hide",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "One of Quasar's embedded transitions\n\nExamples:\nfade\nslide-down",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip",
              "default": "\"jump-up\""
            },
            {
              "name": "transition-duration",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Transition duration (in milliseconds, without unit)\n\nExamples:\n500\n1200",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip",
              "default": "300"
            },
            {
              "name": "model-value",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip",
              "type": "boolean"
            },
            {
              "name": "max-height",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The maximum height of the Tooltip; Size in CSS units, including unit name\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
            },
            {
              "name": "max-width",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The maximum width of the Tooltip; Size in CSS units, including unit name\n\nExamples:\n16px\n2rem",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
            },
            {
              "name": "anchor",
              "value": {
                "kind": "expression",
                "type": "'top left'|'top middle'|'top right'|'top start'|'top end'|'center left'|'center middle'|'center right'|'center start'|'center end'|'bottom left'|'bottom middle'|'bottom right'|'bottom start'|'bottom end'"
              },
              "description": "Two values setting the starting position or anchor point of the Tooltip relative to its target\n\nExamples:\ntop left\nbottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip",
              "default": "\"bottom middle\""
            },
            {
              "name": "self",
              "value": {
                "kind": "expression",
                "type": "'top left'|'top middle'|'top right'|'top start'|'top end'|'center left'|'center middle'|'center right'|'center start'|'center end'|'bottom left'|'bottom middle'|'bottom right'|'bottom start'|'bottom end'"
              },
              "description": "Two values setting the Tooltip's own position relative to its target\n\nExamples:\ntop left\nbottom right",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip",
              "default": "\"top middle\""
            },
            {
              "name": "offset",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "An array of two numbers to offset the Tooltip horizontally and vertically in pixels\n\nExamples:\n[8, 8]\n[5, 10]",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip",
              "default": "\"[14, 14]\""
            },
            {
              "name": "scroll-target",
              "value": {
                "kind": "expression",
                "type": "Element|string"
              },
              "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one\n\nExamples:\n:scroll-target=\"$refs.scrollTarget\"\nscroll-target=\".scroll-target-class\"\nscroll-target=\"#scroll-target-id\"\nscroll-target=\"body\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
            },
            {
              "name": "target",
              "value": {
                "kind": "expression",
                "type": "boolean|string"
              },
              "description": "Configure a target element to trigger Tooltip toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) it attaches the events to the specified DOM element (if it exists)\n\nExamples:\n:target=\"false\"\ntarget=\".my-parent\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip",
              "default": "true"
            },
            {
              "name": "no-parent-event",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Skips attaching events to the target DOM element (that trigger the element to get shown)",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip",
              "type": "boolean"
            },
            {
              "name": "delay",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Configure Tooltip to appear with delay\n\nExamples:\n:delay=\"550\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
            },
            {
              "name": "hide-delay",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Configure Tooltip to disappear with delay\n\nExamples:\n:hide-delay=\"650\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
            }
          ],
          "events": [
            {
              "name": "update:model-value",
              "arguments": [
                {
                  "name": "value",
                  "type": "boolean",
                  "description": "New state (showing/hidden)",
                  "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
                }
              ],
              "description": "Emitted when showing/hidden state changes; Is also used by v-model",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
            },
            {
              "name": "show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
                }
              ],
              "description": "Emitted after component has triggered show()",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
            },
            {
              "name": "before-show",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
                }
              ],
              "description": "Emitted when component triggers show() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
            },
            {
              "name": "hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
                }
              ],
              "description": "Emitted after component has triggered hide()",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
            },
            {
              "name": "before-hide",
              "arguments": [
                {
                  "name": "evt",
                  "type": "object",
                  "description": "JS event object",
                  "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
                }
              ],
              "description": "Emitted when component triggers hide() but before it finishes doing it",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Default slot in the devland unslotted content of the component",
              "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
            }
          ],
          "description": "QTooltip - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/tooltip"
        },
        {
          "name": "QTree",
          "source": {
            "module": "quasar",
            "symbol": "QTree"
          },
          "attributes": [
            {
              "name": "nodes",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "The array of nodes that designates the tree structure\n\nExamples:\n[ {...}, {...} ]",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "required": true
            },
            {
              "name": "node-key",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The property name of each node object that holds a unique node id\n\nExamples:\nkey\nid",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "required": true
            },
            {
              "name": "label-key",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The property name of each node object that holds the label of the node\n\nExamples:\nname\ndescription",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "default": "\"label\""
            },
            {
              "name": "children-key",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The property name of each node object that holds the list of children of the node\n\nExamples:\nroles\nrelatives",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "default": "\"children\""
            },
            {
              "name": "no-connectors",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not display the connector lines between nodes",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "type": "boolean"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "control-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for controls (like checkboxes) from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "selected-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for selected nodes (from the Quasar Color Palette)\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "dense",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Dense mode; occupies less space",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "type": "boolean"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "type": "boolean"
            },
            {
              "name": "icon",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix\n\nExamples:\nmap\nion-add\nimg:https://cdn.quasar.dev/logo-v2/svg/logo.svg\nimg:path/to/some_image.png",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "tick-strategy",
              "value": {
                "kind": "expression",
                "type": "'none'|'strict'|'leaf'|'leaf-filtered'"
              },
              "description": "The type of strategy to use for the selection of the nodes",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "default": "\"none\""
            },
            {
              "name": "ticked",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Keys of nodes that are ticked\n\nExamples:\nv-model:ticked=\"tickedKeys\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "expanded",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Keys of nodes that are expanded\n\nExamples:\nv-model:expanded=\"expandedKeys\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "selected",
              "value": {
                "kind": "expression",
                "type": "any"
              },
              "description": "Key of node currently selected\n\nExamples:\nv-model:selected=\"selectedKey\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "no-selection-unset",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Do not allow un-selection when clicking currently selected node",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "type": "boolean"
            },
            {
              "name": "default-expand-all",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allow the tree to have all its branches expanded, when first rendered",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "type": "boolean"
            },
            {
              "name": "accordion",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allows the tree to be set in accordion mode",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "type": "boolean"
            },
            {
              "name": "filter",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The text value to be used for filtering nodes\n\nExamples:\n:filter=\"searchText\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "filter-method",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "The function to use to filter the tree nodes; For best performance, reference it from your scope and do not define it inline",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "default": "\"(see source code)\""
            },
            {
              "name": "duration",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Toggle animation duration (in milliseconds)\n\nExamples:\n:duration=\"500\"",
              "doc-url": "https://v2.quasar.dev/vue-components/tree",
              "default": "300"
            },
            {
              "name": "no-nodes-label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Override default such label for when no nodes are available\n\nExamples:\nNo nodes to show!",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "no-results-label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Override default such label for when no nodes are available due to filtering\n\nExamples:\nNo results",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            }
          ],
          "events": [
            {
              "name": "update:expanded",
              "arguments": [
                {
                  "name": "expanded",
                  "type": "any[]",
                  "description": "The expanded node keys\n\nExamples:\n[ 'Node 1', 'Node 2' ]",
                  "doc-url": "https://v2.quasar.dev/vue-components/tree"
                }
              ],
              "description": "Triggered when nodes are expanded or collapsed; Used by Vue on 'v-model:update' to update its value",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "lazy-load",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Lazy loading details",
                  "doc-url": "https://v2.quasar.dev/vue-components/tree"
                }
              ],
              "description": "Emitted when the lazy loading of nodes is finished",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "update:ticked",
              "arguments": [
                {
                  "name": "target",
                  "type": "any[]",
                  "description": "The ticked node keys\n\nExamples:\n[ 'Node 1', 'Node 2' ]",
                  "doc-url": "https://v2.quasar.dev/vue-components/tree"
                }
              ],
              "description": "Emitted when nodes are ticked/unticked via the checkbox; Used by Vue on 'v-model:ticked' to update its value",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "update:selected",
              "arguments": [
                {
                  "name": "target",
                  "type": "any",
                  "description": "The selected node key\n\nExamples:\nNode 1",
                  "doc-url": "https://v2.quasar.dev/vue-components/tree"
                }
              ],
              "description": "Emitted when selected node changes; Used by Vue on 'v-model:selected' to update its value",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "after-show",
              "description": "Emitted when component show animation is finished",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "after-hide",
              "description": "Emitted when component hide animation is finished",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            }
          ],
          "slots": [
            {
              "name": "default-header",
              "description": "Slot to use for defining the header of a node",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "header-[name]",
              "description": "Header template slot for describing node header; Used by nodes which have their 'header' prop set to '[name]', where '[name]' can be any string",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "default-body",
              "description": "Slot to use for defining the body of a node",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            },
            {
              "name": "body-[name]",
              "description": "Body template slot for describing node body; Used by nodes which have their 'body' prop set to '[name]', where '[name]' can be any string",
              "doc-url": "https://v2.quasar.dev/vue-components/tree"
            }
          ],
          "description": "QTree - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/tree"
        },
        {
          "name": "QUploader",
          "source": {
            "module": "quasar",
            "symbol": "QUploader"
          },
          "attributes": [
            {
              "name": "factory",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Function which should return an Object or a Promise resolving with an Object; For best performance, reference it from your scope and do not define it inline",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "url",
              "value": {
                "kind": "expression",
                "type": "string|Function"
              },
              "description": "URL or path to the server which handles the upload. Takes String or factory function, which returns String. Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\nhttps://example.com/path\nfiles => `https://example.com?count=${files.length}`",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "method",
              "value": {
                "kind": "expression",
                "type": "string|Function"
              },
              "description": "HTTP method to use for upload; Takes String or factory function which returns a String; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\nPOST\n:method=\"files => files.length > 10 ? 'POST' : 'PUT'\"",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "default": "\"POST\""
            },
            {
              "name": "field-name",
              "value": {
                "kind": "expression",
                "type": "string|Function"
              },
              "description": "Field name for each file upload; This goes into the following header: 'Content-Disposition: form-data; name=\"__HERE__\"; filename=\"somefile.png\"; If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\nbackgroundFile\n:field-name=\"(file) => 'background' + file.name\"",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "default": "\"(file) => file.name\""
            },
            {
              "name": "headers",
              "value": {
                "kind": "expression",
                "type": "any[]|Function"
              },
              "description": "Array or a factory function which returns an array; Array consists of objects with header definitions; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\n[{name: 'Content-Type', value: 'application/json'}, {name: 'Accept', value: 'application/json'}]\n() => [{name: 'X-Custom-Timestamp', value: Date.now()}]\nfiles => [{name: 'X-Custom-Count', value: files.length}]",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "form-fields",
              "value": {
                "kind": "expression",
                "type": "any[]|Function"
              },
              "description": "Array or a factory function which returns an array; Array consists of objects with additional fields definitions (used by Form to be uploaded); Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\n[{name: 'my-field', value: 'my-value'}]\n() => [{name: 'my-field', value: 'my-value'}]\nfiles => [{name: 'my-field', value: 'my-value' + files.length}]",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "with-credentials",
              "value": {
                "kind": "expression",
                "type": "boolean|Function"
              },
              "description": "Sets withCredentials to true on the XHR that manages the upload; Takes boolean or factory function for Boolean; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\nwith-credentials\n:with-credentials=\"files => ...\"",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "send-raw",
              "value": {
                "kind": "expression",
                "type": "boolean|Function"
              },
              "description": "Send raw files without wrapping into a Form(); Takes boolean or factory function for Boolean; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\nsend-raw\n:send-raw=\"files => ...\"",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "batch",
              "value": {
                "kind": "expression",
                "type": "boolean|Function"
              },
              "description": "Upload files in batch (in one XHR request); Takes boolean or factory function for Boolean; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline\n\nExamples:\nfiles => files.length > 10",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "multiple",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Allow multiple file uploads",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "type": "boolean"
            },
            {
              "name": "accept",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Comma separated list of unique file type specifiers. Maps to 'accept' attribute of native input type=file element\n\nExamples:\n.jpg, .pdf, image/*\nimage/jpeg, .pdf",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "capture",
              "value": {
                "kind": "expression",
                "type": "'user'|'environment'"
              },
              "description": "Optionally, specify that a new file should be captured, and which device should be used to capture that new media of a type defined by the 'accept' prop. Maps to 'capture' attribute of native input type=file element",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "max-file-size",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Maximum size of individual file in bytes\n\nExamples:\n1024\n1048576",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "max-total-size",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Maximum size of all files combined in bytes\n\nExamples:\n1024\n1048576",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "max-files",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Maximum number of files to contain\n\nExamples:\n:max-files=\"5\"\n10",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "filter",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Custom filter for added files; Only files that pass this filter will be added to the queue and uploaded; For best performance, reference it from your scope and do not define it inline\n\nExamples:\n:filter=\"files => files.filter(file => file.size === 1024)\"",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "label",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Label for the uploader\n\nExamples:\nUpload photo here",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Color name for component from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "text-color",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "Overrides text color (if needed); Color name from the Quasar Color Palette\n\nExamples:\nprimary\nteal-10",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "dark",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Notify the component that the background is a dark color",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "type": "boolean"
            },
            {
              "name": "square",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Removes border-radius so borders are squared",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "type": "boolean"
            },
            {
              "name": "flat",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a 'flat' design (no default shadow)",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "type": "boolean"
            },
            {
              "name": "bordered",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Applies a default border to the component",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "type": "boolean"
            },
            {
              "name": "no-thumbnails",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Don't display thumbnails for image files",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "type": "boolean"
            },
            {
              "name": "auto-upload",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Upload files immediately when added",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "type": "boolean"
            },
            {
              "name": "hide-upload-btn",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Don't show the upload button",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "type": "boolean"
            },
            {
              "name": "disable",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in disabled mode",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "type": "boolean"
            },
            {
              "name": "readonly",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Put component in readonly mode",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader",
              "type": "boolean"
            }
          ],
          "events": [
            {
              "name": "uploaded",
              "arguments": [
                {
                  "name": "info",
                  "type": "object",
                  "description": "Object containing information about the event",
                  "doc-url": "https://v2.quasar.dev/vue-components/uploader"
                }
              ],
              "description": "Emitted when file or batch of files is uploaded",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "failed",
              "arguments": [
                {
                  "name": "info",
                  "type": "object",
                  "description": "Object containing information about the event",
                  "doc-url": "https://v2.quasar.dev/vue-components/uploader"
                }
              ],
              "description": "Emitted when file or batch of files has encountered error while uploading",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "uploading",
              "arguments": [
                {
                  "name": "info",
                  "type": "object",
                  "description": "Object containing information about the event",
                  "doc-url": "https://v2.quasar.dev/vue-components/uploader"
                }
              ],
              "description": "Emitted when file or batch of files started uploading",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "factory-failed",
              "arguments": [
                {
                  "name": "err",
                  "type": "Error",
                  "description": "Error object which is the Promise rejection reason",
                  "doc-url": "https://v2.quasar.dev/vue-components/uploader"
                },
                {
                  "name": "files",
                  "type": "any[]",
                  "description": "Files which were to get uploaded",
                  "doc-url": "https://v2.quasar.dev/vue-components/uploader"
                }
              ],
              "description": "Emitted when factory function is supplied with a Promise which is rejected",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "rejected",
              "arguments": [
                {
                  "name": "rejectedEntries",
                  "type": "any[]",
                  "description": "Array of { failedPropValidation: string, file: File } Objects for files that do not pass the validation",
                  "doc-url": "https://v2.quasar.dev/vue-components/uploader"
                }
              ],
              "description": "Emitted after files are picked and some do not pass the validation props (accept, max-file-size, max-total-size, filter, etc)",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "added",
              "arguments": [
                {
                  "name": "files",
                  "type": "any[]",
                  "description": "Array of files that were added",
                  "doc-url": "https://v2.quasar.dev/vue-components/uploader"
                }
              ],
              "description": "Emitted when files are added into the list",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "removed",
              "arguments": [
                {
                  "name": "files",
                  "type": "any[]",
                  "description": "Array of files that were removed",
                  "doc-url": "https://v2.quasar.dev/vue-components/uploader"
                }
              ],
              "description": "Emitted when files are removed from the list",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "start",
              "description": "Started working",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "finish",
              "description": "Finished working (regardless of success or fail)",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            }
          ],
          "slots": [
            {
              "name": "header",
              "description": "Slot for custom header; Scope is the QUploader instance itself",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            },
            {
              "name": "list",
              "description": "Slot for custom list; Scope is the QUploader instance itself",
              "doc-url": "https://v2.quasar.dev/vue-components/uploader"
            }
          ],
          "description": "QUploader - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/uploader"
        },
        {
          "name": "QUploaderAddTrigger",
          "source": {
            "module": "quasar",
            "symbol": "QUploaderAddTrigger"
          },
          "attributes": [],
          "slots": [],
          "description": "QUploaderAddTrigger - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/uploader"
        },
        {
          "name": "QVideo",
          "source": {
            "module": "quasar",
            "symbol": "QVideo"
          },
          "attributes": [
            {
              "name": "ratio",
              "value": {
                "kind": "expression",
                "type": "string|number"
              },
              "description": "Aspect ratio for the content; If value is a String, then avoid using a computational statement (like '16/9') and instead specify the String value of the result directly (eg. '1.7777')\n\nExamples:\n:ratio=\"4/3\"\n:ratio=\"16/9\"\nratio=\"1\"",
              "doc-url": "https://v2.quasar.dev/vue-components/video"
            },
            {
              "name": "src",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "The source url to display in an iframe\n\nExamples:\nhttps://www.youtube.com/embed/k3_tw44QsZQ",
              "doc-url": "https://v2.quasar.dev/vue-components/video",
              "required": true
            },
            {
              "name": "title",
              "value": {
                "kind": "expression",
                "type": "string"
              },
              "description": "(Accessibility) Set the native 'title' attribute value of the inner iframe being used\n\nExamples:\nMy Daily Marathon",
              "doc-url": "https://v2.quasar.dev/vue-components/video"
            }
          ],
          "slots": [],
          "description": "QVideo - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/video"
        },
        {
          "name": "QVirtualScroll",
          "source": {
            "module": "quasar",
            "symbol": "QVirtualScroll"
          },
          "attributes": [
            {
              "name": "virtual-scroll-horizontal",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "description": "Make virtual list work in horizontal mode",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll",
              "type": "boolean"
            },
            {
              "name": "virtual-scroll-slice-size",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Minimum number of items to render in the virtual list\n\nExamples:\nvirtual-scroll-slice-size=\"60\"",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll",
              "default": "\"30\""
            },
            {
              "name": "virtual-scroll-slice-ratio-before",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Ratio of number of items in visible zone to render before it\n\nExamples:\nvirtual-scroll-slice-ratio-before=\"0.3\"",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll",
              "default": "\"1\""
            },
            {
              "name": "virtual-scroll-slice-ratio-after",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Ratio of number of items in visible zone to render after it\n\nExamples:\nvirtual-scroll-slice-ratio-after=\"2\"",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll",
              "default": "\"1\""
            },
            {
              "name": "virtual-scroll-item-size",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Default size in pixels (height if vertical, width if horizontal) of an item; This value is used for rendering the initial list; Try to use a value close to the minimum size of an item\n\nExamples:\nvirtual-scroll-item-size=\"48\"",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll",
              "default": "\"24\""
            },
            {
              "name": "virtual-scroll-sticky-size-start",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the start of the list; A correct value will improve scroll precision\n\nExamples:\nvirtual-scroll-sticky-size-start=\"48\"",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll",
              "default": "\"0\""
            },
            {
              "name": "virtual-scroll-sticky-size-end",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the end of the list; A correct value will improve scroll precision\n\nExamples:\nvirtual-scroll-sticky-size-end=\"48\"",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll",
              "default": "\"0\""
            },
            {
              "name": "table-colspan",
              "value": {
                "kind": "expression",
                "type": "number|string"
              },
              "description": "The number of columns in the table (you need this if you use table-layout: fixed)\n\nExamples:\ntable-colspan=\"12\"",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll"
            },
            {
              "name": "type",
              "value": {
                "kind": "expression",
                "type": "'list'|'table'"
              },
              "description": "The type of content: list (default) or table",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll",
              "default": "\"list\""
            },
            {
              "name": "items",
              "value": {
                "kind": "expression",
                "type": "any[]"
              },
              "description": "Available list items that will be passed to the scoped slot; For best performance freeze the list of items; Required if 'itemsFn' is not supplied\n\nExamples:\n:items=\"[ 'BMW', 'Samsung Phone' ]\"\n:items=\"[ { label: 'BMW', value: 'car' }, { label: 'Samsung Phone', value: 'phone' } ]\"",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll",
              "default": "\"[]\""
            },
            {
              "name": "items-size",
              "value": {
                "kind": "expression",
                "type": "number"
              },
              "description": "Number of available items in the list; Required and used only if 'itemsFn' is provided\n\nExamples:\n:items-size=\"100000\"\n:items-size=\"500\"",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll",
              "default": "\"void 0\""
            },
            {
              "name": "items-fn",
              "value": {
                "kind": "expression",
                "type": "Function"
              },
              "description": "Function to return the scope for the items to be displayed; Should return an array for items starting from 'from' index for size length; For best performance, reference it from your scope and do not define it inline\n\nExamples:\n:items-fn=\"(from, size) => { const items = []; for (let i = 0; i < size; i++) { items.push('Item ' + i) }; return items }\"",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll"
            },
            {
              "name": "scroll-target",
              "value": {
                "kind": "expression",
                "type": "Element|string"
              },
              "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one\n\nExamples:\n:scroll-target=\"$refs.scrollTarget\"\nscroll-target=\".scroll-target-class\"\nscroll-target=\"#scroll-target-id\"\nscroll-target=\"body\"",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll"
            }
          ],
          "events": [
            {
              "name": "virtual-scroll",
              "arguments": [
                {
                  "name": "details",
                  "type": "object",
                  "description": "Object of properties on the new scroll position",
                  "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll"
                }
              ],
              "description": "Emitted when the virtual scroll occurs",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll"
            }
          ],
          "slots": [
            {
              "name": "before",
              "description": "Template slot for the elements that should be rendered before the list; Suggestion: thead before a table",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll"
            },
            {
              "name": "after",
              "description": "Template slot for the elements that should be rendered after the list; Suggestion: tfoot after a table",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll"
            },
            {
              "name": "default",
              "description": "Template slot for defining the list item; Suggestion: QItem",
              "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll"
            }
          ],
          "description": "QVirtualScroll - Quasar component",
          "doc-url": "https://v2.quasar.dev/vue-components/virtual-scroll"
        }
      ],
      "attributes": [
        {
          "name": "v-close-popup",
          "source": {
            "module": "quasar",
            "symbol": "ClosePopup"
          },
          "required": false,
          "description": "ClosePopup - Quasar directive",
          "doc-url": "https://v2.quasar.dev/vue-directives/close-popup",
          "value": {
            "kind": "expression",
            "type": "boolean|number|string"
          }
        },
        {
          "name": "v-intersection",
          "source": {
            "module": "quasar",
            "symbol": "Intersection"
          },
          "required": false,
          "description": "Intersection - Quasar directive",
          "doc-url": "https://v2.quasar.dev/vue-directives/intersection",
          "vue-modifiers": [
            {
              "name": "once",
              "description": "Call handler only once, when the conditions are first met\n\nExamples:\nv-intersection.once",
              "doc-url": "https://v2.quasar.dev/vue-directives/intersection"
            }
          ],
          "value": {
            "kind": "expression",
            "type": "object|Function"
          }
        },
        {
          "name": "v-morph",
          "source": {
            "module": "quasar",
            "symbol": "Morph"
          },
          "required": false,
          "description": "Morph - Quasar directive",
          "doc-url": "https://v2.quasar.dev/vue-directives/morph",
          "vue-modifiers": [
            {
              "name": "resize",
              "description": "Use resize instead of scale transform for morph (forceResize option of the morph function)",
              "doc-url": "https://v2.quasar.dev/vue-directives/morph"
            },
            {
              "name": "useCSS",
              "description": "Use CSS animations for morph (forceCssAnimation option of the morph function)",
              "doc-url": "https://v2.quasar.dev/vue-directives/morph"
            },
            {
              "name": "hideFromClone",
              "description": "Hide the spacer for the initial element (hideFromClone option of the morph function)",
              "doc-url": "https://v2.quasar.dev/vue-directives/morph"
            },
            {
              "name": "keepToClone",
              "description": "Keep the final element visible while morphing (keepToClone option of the morph function)",
              "doc-url": "https://v2.quasar.dev/vue-directives/morph"
            },
            {
              "name": "tween",
              "description": "Use opacity tween morphing between initial and final elements (tween option of the morph function)",
              "doc-url": "https://v2.quasar.dev/vue-directives/morph"
            }
          ],
          "value": {
            "kind": "expression",
            "type": "object|any"
          }
        },
        {
          "name": "v-mutation",
          "source": {
            "module": "quasar",
            "symbol": "Mutation"
          },
          "required": false,
          "description": "Mutation - Quasar directive",
          "doc-url": "https://v2.quasar.dev/vue-directives/mutation",
          "vue-modifiers": [
            {
              "name": "once",
              "description": "Call handler only once, when the first mutation was triggered, then stop monitoring\n\nExamples:\nv-mutation.once",
              "doc-url": "https://v2.quasar.dev/vue-directives/mutation"
            },
            {
              "name": "childList",
              "description": "Monitor the target node (and, if 'subtree' is also set, its descendants) for the addition of new child nodes or removal of existing child nodes\n\nExamples:\nv-mutation.childList",
              "doc-url": "https://v2.quasar.dev/vue-directives/mutation"
            },
            {
              "name": "subtree",
              "description": "Extend monitoring to the entire subtree of nodes rooted at target\n\nExamples:\nv-mutation.subtree",
              "doc-url": "https://v2.quasar.dev/vue-directives/mutation"
            },
            {
              "name": "attributes",
              "description": "Watch for changes to the value of attributes on the node or nodes being monitored\n\nExamples:\nv-mutation.attributes",
              "doc-url": "https://v2.quasar.dev/vue-directives/mutation"
            },
            {
              "name": "characterData",
              "description": "Monitor the specified target node or subtree for changes to the character data contained within the node or nodes\n\nExamples:\nv-mutation.characterData",
              "doc-url": "https://v2.quasar.dev/vue-directives/mutation"
            },
            {
              "name": "attributeOldValue",
              "description": "Record the previous value of any attribute that changes when monitoring the node or nodes for attribute changes\n\nExamples:\nv-mutation.attributeOldValue",
              "doc-url": "https://v2.quasar.dev/vue-directives/mutation"
            },
            {
              "name": "characterDataOldValue",
              "description": "Record the previous value of a node's text whenever the text changes on nodes being monitored\n\nExamples:\nv-mutation.characterDataOldValue",
              "doc-url": "https://v2.quasar.dev/vue-directives/mutation"
            }
          ],
          "value": {
            "kind": "expression",
            "type": "Function"
          }
        },
        {
          "name": "v-ripple",
          "source": {
            "module": "quasar",
            "symbol": "Ripple"
          },
          "required": false,
          "description": "Ripple - Quasar directive",
          "doc-url": "https://v2.quasar.dev/vue-directives/material-ripple",
          "vue-modifiers": [
            {
              "name": "early",
              "description": "Trigger early/immediately on user interaction",
              "doc-url": "https://v2.quasar.dev/vue-directives/material-ripple"
            },
            {
              "name": "stop",
              "description": "Stop click/touch event propagation\n\nExamples:\nv-ripple.stop",
              "doc-url": "https://v2.quasar.dev/vue-directives/material-ripple"
            },
            {
              "name": "center",
              "description": "Ripple starts from the absolute center\n\nExamples:\nv-ripple.center",
              "doc-url": "https://v2.quasar.dev/vue-directives/material-ripple"
            }
          ],
          "value": {
            "kind": "expression",
            "type": "boolean|object"
          }
        },
        {
          "name": "v-scroll",
          "source": {
            "module": "quasar",
            "symbol": "Scroll"
          },
          "required": false,
          "description": "Scroll - Quasar directive",
          "doc-url": "https://v2.quasar.dev/vue-directives/scroll",
          "value": {
            "kind": "expression",
            "type": "Function"
          }
        },
        {
          "name": "v-scroll-fire",
          "source": {
            "module": "quasar",
            "symbol": "ScrollFire"
          },
          "required": false,
          "description": "ScrollFire - Quasar directive",
          "doc-url": "https://v2.quasar.dev/vue-directives/scroll-fire",
          "value": {
            "kind": "expression",
            "type": "Function"
          }
        },
        {
          "name": "v-touch-hold",
          "source": {
            "module": "quasar",
            "symbol": "TouchHold"
          },
          "required": false,
          "description": "TouchHold - Quasar directive",
          "doc-url": "https://v2.quasar.dev/vue-directives/touch-hold",
          "vue-modifiers": [
            {
              "name": "capture",
              "description": "Use capture for touchstart event",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-hold"
            },
            {
              "name": "mouse",
              "description": "Listen for mouse events too",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-hold"
            },
            {
              "name": "mouseCapture",
              "description": "Use capture for mousedown event",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-hold"
            }
          ],
          "value": {
            "kind": "expression",
            "type": "Function"
          }
        },
        {
          "name": "v-touch-pan",
          "source": {
            "module": "quasar",
            "symbol": "TouchPan"
          },
          "required": false,
          "description": "TouchPan - Quasar directive",
          "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan",
          "vue-modifiers": [
            {
              "name": "stop",
              "description": "Stop event propagation for touch events",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "prevent",
              "description": "Calls event.preventDefault() for touch events",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "mightPrevent",
              "description": "Required when you might call event.preventDefault() in your handler for touch events",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "capture",
              "description": "Use capture for touchstart event",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "mouse",
              "description": "Listen for mouse events too",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "mouseCapture",
              "description": "Use capture for mousedown event",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "mouseAllDir",
              "description": "Ignore initial mouse move direction (do not abort if the first mouse move is in an unaccepted direction)",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "preserveCursor",
              "description": "Prevent the mouse cursor from automatically displaying as grabbing when panning",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "horizontal",
              "description": "Catch horizontal (left/right) movement",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "vertical",
              "description": "Catch vertical (up/down) movement",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "up",
              "description": "Catch panning to up",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "right",
              "description": "Catch panning to right",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "down",
              "description": "Catch panning to down",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            },
            {
              "name": "left",
              "description": "Catch panning to left",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-pan"
            }
          ],
          "value": {
            "kind": "expression",
            "type": "Function"
          }
        },
        {
          "name": "v-touch-repeat",
          "source": {
            "module": "quasar",
            "symbol": "TouchRepeat"
          },
          "required": false,
          "description": "TouchRepeat - Quasar directive",
          "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat",
          "vue-modifiers": [
            {
              "name": "capture",
              "description": "Use capture for touchstart event",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "mouse",
              "description": "Listen for mouse events too",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "mouseCapture",
              "description": "Use capture for mousedown event",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "keyCapture",
              "description": "Use capture for keydown event",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "esc",
              "description": "Catch ESC key",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "tab",
              "description": "Catch TAB key",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "enter",
              "description": "Catch ENTER key",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "space",
              "description": "Catch SPACE key",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "up",
              "description": "Catch UP arrow key",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "left",
              "description": "Catch LEFT arrow key",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "right",
              "description": "Catch RIGHT arrow key",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "down",
              "description": "Catch DOWN key",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "delete",
              "description": "Catch DELETE key",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            },
            {
              "name": "[keycode]",
              "description": "Key code to catch\n\nExamples:\nv-touch-repeat.68=\"fnToCall\"",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-repeat"
            }
          ],
          "value": {
            "kind": "expression",
            "type": "Function"
          }
        },
        {
          "name": "v-touch-swipe",
          "source": {
            "module": "quasar",
            "symbol": "TouchSwipe"
          },
          "required": false,
          "description": "TouchSwipe - Quasar directive",
          "doc-url": "https://v2.quasar.dev/vue-directives/touch-swipe",
          "vue-modifiers": [
            {
              "name": "capture",
              "description": "Use capture for touchstart event",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-swipe"
            },
            {
              "name": "mouse",
              "description": "Listen for mouse events too",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-swipe"
            },
            {
              "name": "mouseCapture",
              "description": "Use capture for mousedown event",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-swipe"
            },
            {
              "name": "horizontal",
              "description": "Catch horizontal (left/right) movement",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-swipe"
            },
            {
              "name": "vertical",
              "description": "Catch vertical (up/down) movement",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-swipe"
            },
            {
              "name": "up",
              "description": "Catch swipe to up",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-swipe"
            },
            {
              "name": "right",
              "description": "Catch swipe to right",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-swipe"
            },
            {
              "name": "down",
              "description": "Catch swipe to down",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-swipe"
            },
            {
              "name": "left",
              "description": "Catch swipe to left",
              "doc-url": "https://v2.quasar.dev/vue-directives/touch-swipe"
            }
          ],
          "value": {
            "kind": "expression",
            "type": "Function"
          }
        }
      ]
    }
  }
}