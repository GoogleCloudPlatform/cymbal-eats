{
  "q-ajax-bar/position": {
    "type": "string",
    "description": "Position within window of where QAjaxBar should be displayed"
  },
  "q-ajax-bar/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name"
  },
  "q-ajax-bar/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-ajax-bar/reverse": {
    "type": "boolean",
    "description": "Reverse direction of progress"
  },
  "q-ajax-bar/skip-hijack": {
    "type": "boolean",
    "description": "Skip Ajax hijacking (not a reactive prop)"
  },
  "q-ajax-bar/hijack-filter": {
    "type": "function",
    "description": "Filter which URL should trigger start() + stop()"
  },
  "q-avatar/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-avatar/font-size": {
    "type": "string",
    "description": "The size in CSS units, including unit name, of the content (icon, text)"
  },
  "q-avatar/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-avatar/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-avatar/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-avatar/square": {
    "type": "boolean",
    "description": "Removes border-radius so borders are squared"
  },
  "q-avatar/rounded": {
    "type": "boolean",
    "description": "Applies a small standard border-radius for a squared shape of the component"
  },
  "q-badge/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-badge/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-badge/floating": {
    "type": "boolean",
    "description": "Tell QBadge if it should float to the top right side of the relative positioned parent element or not"
  },
  "q-badge/transparent": {
    "type": "boolean",
    "description": "Applies a 0.8 opacity; Useful especially for floating QBadge"
  },
  "q-badge/multi-line": {
    "type": "boolean",
    "description": "Content can wrap to multiple lines"
  },
  "q-badge/label": {
    "type": "string|number",
    "description": "Badge's content as string; overrides default slot if specified"
  },
  "q-badge/align": {
    "type": "string",
    "description": "Sets vertical-align CSS prop"
  },
  "q-badge/outline": {
    "type": "boolean",
    "description": "Use 'outline' design (colored text and borders only)"
  },
  "q-badge/rounded": {
    "type": "boolean",
    "description": "Makes a rounded shaped badge"
  },
  "q-banner/inline-actions": {
    "type": "boolean",
    "description": "Display actions on same row as content"
  },
  "q-banner/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-banner/rounded": {
    "type": "boolean",
    "description": "Applies a small standard border-radius for a squared shape of the component"
  },
  "q-banner/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-bar/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-bar/dark": {
    "type": "boolean",
    "description": "The component background color lights up the parent's background (as opposed to default behavior which is to darken it); Works unless you specify a CSS background color for it"
  },
  "q-breadcrumbs/separator": {
    "type": "string",
    "description": "The string used to separate the breadcrumbs"
  },
  "q-breadcrumbs/active-color": {
    "type": "string",
    "description": "The color of the active breadcrumb, which can be any color from the Quasar Color Palette"
  },
  "q-breadcrumbs/gutter": {
    "type": "string",
    "description": "The gutter value allows you control over the space between the breadcrumb elements."
  },
  "q-breadcrumbs/separator-color": {
    "type": "string",
    "description": "The color used to color the separator, which can be any color from the Quasar Color Palette"
  },
  "q-breadcrumbs/align": {
    "type": "string",
    "description": "Specify how to align the breadcrumbs horizontally"
  },
  "q-breadcrumbs-el/to": {
    "type": "string|object",
    "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used"
  },
  "q-breadcrumbs-el/exact": {
    "type": "boolean",
    "description": "Equivalent to Vue Router <router-link> 'exact' property; Superseeded by 'href' prop if used"
  },
  "q-breadcrumbs-el/replace": {
    "type": "boolean",
    "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used"
  },
  "q-breadcrumbs-el/active-class": {
    "type": "string",
    "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used"
  },
  "q-breadcrumbs-el/exact-active-class": {
    "type": "string",
    "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used"
  },
  "q-breadcrumbs-el/href": {
    "type": "string",
    "description": "Native <a> link href attribute; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props"
  },
  "q-breadcrumbs-el/target": {
    "type": "string",
    "description": "Native <a> link target attribute; Use it only along with 'href' prop; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props"
  },
  "q-breadcrumbs-el/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-breadcrumbs-el/label": {
    "type": "string",
    "description": "The label text for the breadcrumb"
  },
  "q-breadcrumbs-el/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-breadcrumbs-el/tag": {
    "type": "string",
    "description": "HTML tag to use"
  },
  "q-breadcrumbs-el/ripple": {
    "type": "boolean|object",
    "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)"
  },
  "q-btn-dropdown/model-value": {
    "type": "boolean",
    "description": "Controls Menu show/hidden state; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-btn-dropdown/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-btn-dropdown/type": {
    "type": "string",
    "description": "1) Define the button native type attribute (submit, reset, button) or 2) render component with <a> tag so you can access events even if disable or 3) Use 'href' prop and specify 'type' as a media tag"
  },
  "q-btn-dropdown/to": {
    "type": "string|object",
    "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used"
  },
  "q-btn-dropdown/replace": {
    "type": "boolean",
    "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used"
  },
  "q-btn-dropdown/href": {
    "type": "string",
    "description": "Native <a> link href attribute; Has priority over the 'to' and 'replace' props"
  },
  "q-btn-dropdown/target": {
    "type": "string",
    "description": "Native <a> link target attribute; Use it only with 'to' or 'href' props"
  },
  "q-btn-dropdown/label": {
    "type": "string|number",
    "description": "The text that will be shown on the button"
  },
  "q-btn-dropdown/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-btn-dropdown/icon-right": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-btn-dropdown/outline": {
    "type": "boolean",
    "description": "Use 'outline' design"
  },
  "q-btn-dropdown/flat": {
    "type": "boolean",
    "description": "Use 'flat' design"
  },
  "q-btn-dropdown/unelevated": {
    "type": "boolean",
    "description": "Remove shadow"
  },
  "q-btn-dropdown/rounded": {
    "type": "boolean",
    "description": "Applies a more prominent border-radius for a squared shape button"
  },
  "q-btn-dropdown/push": {
    "type": "boolean",
    "description": "Use 'push' design"
  },
  "q-btn-dropdown/glossy": {
    "type": "boolean",
    "description": "Applies a glossy effect"
  },
  "q-btn-dropdown/fab": {
    "type": "boolean",
    "description": "Makes button size and shape to fit a Floating Action Button"
  },
  "q-btn-dropdown/fab-mini": {
    "type": "boolean",
    "description": "Makes button size and shape to fit a small Floating Action Button"
  },
  "q-btn-dropdown/padding": {
    "type": "string",
    "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set"
  },
  "q-btn-dropdown/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-btn-dropdown/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-btn-dropdown/no-caps": {
    "type": "boolean",
    "description": "Avoid turning label text into caps (which happens by default)"
  },
  "q-btn-dropdown/no-wrap": {
    "type": "boolean",
    "description": "Avoid label text wrapping"
  },
  "q-btn-dropdown/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-btn-dropdown/ripple": {
    "type": "boolean|object",
    "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)"
  },
  "q-btn-dropdown/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-btn-dropdown/align": {
    "type": "string",
    "description": "Label or content alignment"
  },
  "q-btn-dropdown/stack": {
    "type": "boolean",
    "description": "Stack icon and label vertically instead of on same line (like it is by default)"
  },
  "q-btn-dropdown/stretch": {
    "type": "boolean",
    "description": "When used on flexbox parent, button will stretch to parent's height"
  },
  "q-btn-dropdown/loading": {
    "type": "boolean",
    "description": "Put button into loading state (displays a QSpinner -- can be overridden by using a 'loading' slot)"
  },
  "q-btn-dropdown/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-btn-dropdown/split": {
    "type": "boolean",
    "description": "Split dropdown icon into its own button"
  },
  "q-btn-dropdown/dropdown-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-btn-dropdown/disable-main-btn": {
    "type": "boolean",
    "description": "Disable main button (useful along with 'split' prop)"
  },
  "q-btn-dropdown/disable-dropdown": {
    "type": "boolean",
    "description": "Disables dropdown (dropdown button if using along 'split' prop)"
  },
  "q-btn-dropdown/no-icon-animation": {
    "type": "boolean",
    "description": "Disables the rotation of the dropdown icon when state is toggled"
  },
  "q-btn-dropdown/content-style": {
    "type": "string|array|object",
    "description": "Style definitions to be attributed to the menu"
  },
  "q-btn-dropdown/content-class": {
    "type": "string|array|object",
    "description": "Class definitions to be attributed to the menu"
  },
  "q-btn-dropdown/cover": {
    "type": "boolean",
    "description": "Allows the menu to cover the button. When used, the 'menu-self' and 'menu-fit' props are no longer effective"
  },
  "q-btn-dropdown/persistent": {
    "type": "boolean",
    "description": "Allows the menu to not be dismissed by a click/tap outside of the menu or by hitting the ESC key"
  },
  "q-btn-dropdown/no-route-dismiss": {
    "type": "boolean",
    "description": "Changing route app won't dismiss the popup; No need to set it if 'persistent' prop is also set"
  },
  "q-btn-dropdown/auto-close": {
    "type": "boolean",
    "description": "Allows any click/tap in the menu to close it; Useful instead of attaching events to each menu item that should close the menu on click/tap"
  },
  "q-btn-dropdown/menu-anchor": {
    "type": "string",
    "description": "Two values setting the starting position or anchor point of the menu relative to its target"
  },
  "q-btn-dropdown/menu-self": {
    "type": "string",
    "description": "Two values setting the menu's own position relative to its target"
  },
  "q-btn-dropdown/menu-offset": {
    "type": "array",
    "description": "An array of two numbers to offset the menu horizontally and vertically in pixels"
  },
  "q-btn-group/spread": {
    "type": "boolean",
    "description": "Spread horizontally to all available space"
  },
  "q-btn-group/outline": {
    "type": "boolean",
    "description": "Use 'outline' design for buttons"
  },
  "q-btn-group/flat": {
    "type": "boolean",
    "description": "Use 'flat' design for buttons"
  },
  "q-btn-group/unelevated": {
    "type": "boolean",
    "description": "Remove shadow on buttons"
  },
  "q-btn-group/rounded": {
    "type": "boolean",
    "description": "Applies a more prominent border-radius for squared shape buttons"
  },
  "q-btn-group/push": {
    "type": "boolean",
    "description": "Use 'push' design for buttons"
  },
  "q-btn-group/stretch": {
    "type": "boolean",
    "description": "When used on flexbox parent, buttons will stretch to parent's height"
  },
  "q-btn-group/glossy": {
    "type": "boolean",
    "description": "Applies a glossy effect"
  },
  "q-btn-toggle/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL"
  },
  "q-btn-toggle/model-value": {
    "type": "any",
    "description": "Model of the component; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-btn-toggle/options": {
    "type": "array",
    "description": "Array of Objects defining each option"
  },
  "q-btn-toggle/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-btn-toggle/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-btn-toggle/toggle-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-btn-toggle/toggle-text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-btn-toggle/spread": {
    "type": "boolean",
    "description": "Spread horizontally to all available space"
  },
  "q-btn-toggle/outline": {
    "type": "boolean",
    "description": "Use 'outline' design"
  },
  "q-btn-toggle/flat": {
    "type": "boolean",
    "description": "Use 'flat' design"
  },
  "q-btn-toggle/unelevated": {
    "type": "boolean",
    "description": "Remove shadow"
  },
  "q-btn-toggle/rounded": {
    "type": "boolean",
    "description": "Applies a more prominent border-radius for a squared shape button"
  },
  "q-btn-toggle/push": {
    "type": "boolean",
    "description": "Use 'push' design"
  },
  "q-btn-toggle/glossy": {
    "type": "boolean",
    "description": "Applies a glossy effect"
  },
  "q-btn-toggle/size": {
    "type": "string",
    "description": "Button size name or a CSS unit including unit name"
  },
  "q-btn-toggle/padding": {
    "type": "string",
    "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set"
  },
  "q-btn-toggle/no-caps": {
    "type": "boolean",
    "description": "Avoid turning label text into caps (which happens by default)"
  },
  "q-btn-toggle/no-wrap": {
    "type": "boolean",
    "description": "Avoid label text wrapping"
  },
  "q-btn-toggle/ripple": {
    "type": "boolean|object",
    "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)"
  },
  "q-btn-toggle/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-btn-toggle/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-btn-toggle/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-btn-toggle/stack": {
    "type": "boolean",
    "description": "Stack icon and label vertically instead of on same line (like it is by default)"
  },
  "q-btn-toggle/stretch": {
    "type": "boolean",
    "description": "When used on flexbox parent, button will stretch to parent's height"
  },
  "q-btn-toggle/clearable": {
    "type": "boolean",
    "description": "Clears model on click of the already selected button"
  },
  "q-btn/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-btn/type": {
    "type": "string",
    "description": "1) Define the button native type attribute (submit, reset, button) or 2) render component with <a> tag so you can access events even if disable or 3) Use 'href' prop and specify 'type' as a media tag"
  },
  "q-btn/to": {
    "type": "string|object",
    "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used"
  },
  "q-btn/replace": {
    "type": "boolean",
    "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used"
  },
  "q-btn/href": {
    "type": "string",
    "description": "Native <a> link href attribute; Has priority over the 'to' and 'replace' props"
  },
  "q-btn/target": {
    "type": "string",
    "description": "Native <a> link target attribute; Use it only with 'to' or 'href' props"
  },
  "q-btn/label": {
    "type": "string|number",
    "description": "The text that will be shown on the button"
  },
  "q-btn/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-btn/icon-right": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-btn/outline": {
    "type": "boolean",
    "description": "Use 'outline' design"
  },
  "q-btn/flat": {
    "type": "boolean",
    "description": "Use 'flat' design"
  },
  "q-btn/unelevated": {
    "type": "boolean",
    "description": "Remove shadow"
  },
  "q-btn/rounded": {
    "type": "boolean",
    "description": "Applies a more prominent border-radius for a squared shape button"
  },
  "q-btn/push": {
    "type": "boolean",
    "description": "Use 'push' design"
  },
  "q-btn/glossy": {
    "type": "boolean",
    "description": "Applies a glossy effect"
  },
  "q-btn/fab": {
    "type": "boolean",
    "description": "Makes button size and shape to fit a Floating Action Button"
  },
  "q-btn/fab-mini": {
    "type": "boolean",
    "description": "Makes button size and shape to fit a small Floating Action Button"
  },
  "q-btn/padding": {
    "type": "string",
    "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set"
  },
  "q-btn/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-btn/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-btn/no-caps": {
    "type": "boolean",
    "description": "Avoid turning label text into caps (which happens by default)"
  },
  "q-btn/no-wrap": {
    "type": "boolean",
    "description": "Avoid label text wrapping"
  },
  "q-btn/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-btn/ripple": {
    "type": "boolean|object",
    "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)"
  },
  "q-btn/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-btn/align": {
    "type": "string",
    "description": "Label or content alignment"
  },
  "q-btn/stack": {
    "type": "boolean",
    "description": "Stack icon and label vertically instead of on same line (like it is by default)"
  },
  "q-btn/stretch": {
    "type": "boolean",
    "description": "When used on flexbox parent, button will stretch to parent's height"
  },
  "q-btn/loading": {
    "type": "boolean",
    "description": "Put button into loading state (displays a QSpinner -- can be overridden by using a 'loading' slot)"
  },
  "q-btn/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-btn/round": {
    "type": "boolean",
    "description": "Makes a circle shaped button"
  },
  "q-btn/percentage": {
    "type": "number",
    "description": "Percentage (0.0 < x < 100.0); To be used along 'loading' prop; Display a progress bar on the background"
  },
  "q-btn/dark-percentage": {
    "type": "boolean",
    "description": "Progress bar on the background should have dark color; To be used along with 'percentage' and 'loading' props"
  },
  "q-card/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-card/square": {
    "type": "boolean",
    "description": "Removes border-radius so borders are squared"
  },
  "q-card/flat": {
    "type": "boolean",
    "description": "Applies a 'flat' design (no default shadow)"
  },
  "q-card/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-card/tag": {
    "type": "string",
    "description": "HTML tag to use"
  },
  "q-card-actions/align": {
    "type": "string",
    "description": "Specify how to align the actions"
  },
  "q-card-actions/vertical": {
    "type": "boolean",
    "description": "Display actions one below the other"
  },
  "q-card-section/horizontal": {
    "type": "boolean",
    "description": "Display a horizontal section (will have no padding and can contain other QCardSection)"
  },
  "q-card-section/tag": {
    "type": "string",
    "description": "HTML tag to use"
  },
  "q-carousel/fullscreen": {
    "type": "boolean",
    "description": "Fullscreen mode"
  },
  "q-carousel/no-route-fullscreen-exit": {
    "type": "boolean",
    "description": "Changing route app won't exit fullscreen"
  },
  "q-carousel/model-value": {
    "type": "any",
    "description": "Model of the component defining the current panel's name; If a Number is used, it does not define the panel's index, but rather the panel's name which can also be an Integer; Either use this property (along with a listener for 'update:model-value' event) OR use the v-model directive."
  },
  "q-carousel/keep-alive": {
    "type": "boolean",
    "description": "Equivalent to using Vue's native <keep-alive> component on the content"
  },
  "q-carousel/keep-alive-include": {
    "type": "string|array|regexp",
    "description": "Equivalent to using Vue's native include prop for <keep-alive>; Values must be valid Vue component names"
  },
  "q-carousel/keep-alive-exclude": {
    "type": "string|array|regexp",
    "description": "Equivalent to using Vue's native exclude prop for <keep-alive>; Values must be valid Vue component names"
  },
  "q-carousel/keep-alive-max": {
    "type": "number",
    "description": "Equivalent to using Vue's native max prop for <keep-alive>"
  },
  "q-carousel/animated": {
    "type": "boolean",
    "description": "Enable transitions between panel (also see 'transition-prev' and 'transition-next' props)"
  },
  "q-carousel/infinite": {
    "type": "boolean",
    "description": "Makes component appear as infinite (when reaching last panel, next one will become the first one)"
  },
  "q-carousel/swipeable": {
    "type": "boolean",
    "description": "Enable swipe events (may interfere with content's touch/mouse events)"
  },
  "q-carousel/vertical": {
    "type": "boolean",
    "description": "Default transitions and swipe actions will be on the vertical axis"
  },
  "q-carousel/transition-prev": {
    "type": "string",
    "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)"
  },
  "q-carousel/transition-next": {
    "type": "string",
    "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)"
  },
  "q-carousel/transition-duration": {
    "type": "string|number",
    "description": "Transition duration (in milliseconds, without unit)"
  },
  "q-carousel/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-carousel/height": {
    "type": "string",
    "description": "Height of Carousel in CSS units, including unit name"
  },
  "q-carousel/padding": {
    "type": "boolean",
    "description": "Applies a default padding to each slide, according to the usage of 'arrows' and 'navigation' props"
  },
  "q-carousel/control-color": {
    "type": "string",
    "description": "Color name for QCarousel button controls (arrows, navigation) from the Quasar Color Palette"
  },
  "q-carousel/control-text-color": {
    "type": "string",
    "description": "Color name for text color of QCarousel button controls (arrows, navigation) from the Quasar Color Palette"
  },
  "q-carousel/control-type": {
    "type": "string",
    "description": "Type of button to use for controls (arrows, navigation)"
  },
  "q-carousel/autoplay": {
    "type": "number|boolean",
    "description": "Jump to next slide (if 'true' or val > 0) or previous slide (if val < 0) at fixed time intervals (in milliseconds); 'false' disables autoplay, 'true' enables it for 5000ms intervals"
  },
  "q-carousel/arrows": {
    "type": "boolean",
    "description": "Show navigation arrow buttons"
  },
  "q-carousel/prev-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-carousel/next-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-carousel/navigation": {
    "type": "boolean",
    "description": "Show navigation dots"
  },
  "q-carousel/navigation-position": {
    "type": "string",
    "description": "Side to stick navigation to"
  },
  "q-carousel/navigation-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-carousel/navigation-active-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention for the active (current slide) navigation icon; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-carousel/thumbnails": {
    "type": "boolean",
    "description": "Show thumbnails"
  },
  "q-carousel-control/position": {
    "type": "string",
    "description": "Side/corner to stick to"
  },
  "q-carousel-control/offset": {
    "type": "array",
    "description": "An array of two numbers to offset the component horizontally and vertically (in pixels)"
  },
  "q-carousel-slide/name": {
    "type": "any",
    "description": "Slide name"
  },
  "q-carousel-slide/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-carousel-slide/img-src": {
    "type": "string",
    "description": "URL pointing to a slide background image (use public folder)"
  },
  "q-chat-message/sent": {
    "type": "boolean",
    "description": "Render as a sent message (so from current user)"
  },
  "q-chat-message/label": {
    "type": "string",
    "description": "Renders a label header/section only"
  },
  "q-chat-message/bg-color": {
    "type": "string",
    "description": "Color name (from the Quasar Color Palette) for chat bubble background"
  },
  "q-chat-message/text-color": {
    "type": "string",
    "description": "Color name (from the Quasar Color Palette) for chat bubble text"
  },
  "q-chat-message/name": {
    "type": "string",
    "description": "Author's name"
  },
  "q-chat-message/avatar": {
    "type": "string",
    "description": "URL to the avatar image of the author"
  },
  "q-chat-message/text": {
    "type": "array",
    "description": "Array of strings that are the message body. Strings are not sanitized (see details in docs)"
  },
  "q-chat-message/stamp": {
    "type": "string",
    "description": "Creation timestamp"
  },
  "q-chat-message/size": {
    "type": "string",
    "description": "1-12 out of 12 (same as col-*)"
  },
  "q-chat-message/label-html": {
    "type": "boolean",
    "description": "Render the label as HTML; This can lead to XSS attacks so make sure that you sanitize the message first"
  },
  "q-chat-message/name-html": {
    "type": "boolean",
    "description": "Render the name as HTML; This can lead to XSS attacks so make sure that you sanitize the message first"
  },
  "q-chat-message/text-html": {
    "type": "boolean",
    "description": "Render the text as HTML; This can lead to XSS attacks so make sure that you sanitize the message first"
  },
  "q-chat-message/stamp-html": {
    "type": "boolean",
    "description": "Render the stamp as HTML; This can lead to XSS attacks so make sure that you sanitize the message first"
  },
  "q-checkbox/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL"
  },
  "q-checkbox/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-checkbox/model-value": {
    "type": "any|array",
    "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-checkbox/val": {
    "type": "any",
    "description": "Works when model ('value') is Array. It tells the component which value should add/remove when ticked/unticked"
  },
  "q-checkbox/true-value": {
    "type": "any",
    "description": "What model value should be considered as checked/ticked/on?"
  },
  "q-checkbox/false-value": {
    "type": "any",
    "description": "What model value should be considered as unchecked/unticked/off?"
  },
  "q-checkbox/indeterminate-value": {
    "type": "any",
    "description": "What model value should be considered as 'indeterminate'?"
  },
  "q-checkbox/toggle-order": {
    "type": "string",
    "description": "Determines toggle order of the two states ('t' stands for state of true, 'f' for state of false); If 'toggle-indeterminate' is true, then the order is: indet -> first state -> second state -> indet (and repeat), otherwise: indet -> first state -> second state -> first state -> second state -> ..."
  },
  "q-checkbox/toggle-indeterminate": {
    "type": "boolean",
    "description": "When user clicks/taps on the component, should we toggle through the indeterminate state too?"
  },
  "q-checkbox/label": {
    "type": "string",
    "description": "Label to display along the component (or use the default slot instead of this prop)"
  },
  "q-checkbox/left-label": {
    "type": "boolean",
    "description": "Label (if any specified) should be displayed on the left side of the component"
  },
  "q-checkbox/checked-icon": {
    "type": "string",
    "description": "The icon to be used when the model is truthy (instead of the default design)"
  },
  "q-checkbox/unchecked-icon": {
    "type": "string",
    "description": "The icon to be used when the toggle is falsy (instead of the default design)"
  },
  "q-checkbox/indeterminate-icon": {
    "type": "string",
    "description": "The icon to be used when the model is indeterminate (instead of the default design)"
  },
  "q-checkbox/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-checkbox/keep-color": {
    "type": "boolean",
    "description": "Should the color (if specified any) be kept when the component is unticked/ off?"
  },
  "q-checkbox/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-checkbox/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-checkbox/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-checkbox/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-chip/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-chip/size": {
    "type": "string",
    "description": "QChip size name or a CSS unit including unit name"
  },
  "q-chip/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-chip/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-chip/icon-right": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-chip/icon-remove": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-chip/icon-selected": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-chip/label": {
    "type": "string|number",
    "description": "Chip's content as string; overrides default slot if specified"
  },
  "q-chip/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-chip/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-chip/model-value": {
    "type": "boolean",
    "description": "Model of the component determining if QChip should be rendered or not"
  },
  "q-chip/selected": {
    "type": "boolean",
    "description": "Model for QChip if it's selected or not"
  },
  "q-chip/square": {
    "type": "boolean",
    "description": "Sets a low value for border-radius instead of the default one, making it close to a square"
  },
  "q-chip/outline": {
    "type": "boolean",
    "description": "Display using the 'outline' design"
  },
  "q-chip/clickable": {
    "type": "boolean",
    "description": "Is QChip clickable? If it's the case, then it will add hover effects and emit 'click' events"
  },
  "q-chip/removable": {
    "type": "boolean",
    "description": "If set, then it displays a 'remove' icon that when clicked the QChip emits 'remove' event"
  },
  "q-chip/ripple": {
    "type": "boolean|object",
    "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)"
  },
  "q-chip/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-chip/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-circular-progress/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-circular-progress/value": {
    "type": "number",
    "description": "Current progress (must be between min/max)"
  },
  "q-circular-progress/min": {
    "type": "number",
    "description": "Minimum value defining 'no progress' (must be lower than 'max')"
  },
  "q-circular-progress/max": {
    "type": "number",
    "description": "Maximum value defining 100% progress made (must be higher than 'min')"
  },
  "q-circular-progress/color": {
    "type": "string",
    "description": "Color name for the arc progress from the Quasar Color Palette"
  },
  "q-circular-progress/center-color": {
    "type": "string",
    "description": "Color name for the center part of the component from the Quasar Color Palette"
  },
  "q-circular-progress/track-color": {
    "type": "string",
    "description": "Color name for the track of the component from the Quasar Color Palette"
  },
  "q-circular-progress/font-size": {
    "type": "string",
    "description": "Size of text in CSS units, including unit name. Suggestion: use 'em' units to sync with component size"
  },
  "q-circular-progress/thickness": {
    "type": "number",
    "description": "Thickness of progress arc as a ratio (0.0 < x < 1.0) of component size"
  },
  "q-circular-progress/angle": {
    "type": "number",
    "description": "Angle to rotate progress arc by"
  },
  "q-circular-progress/indeterminate": {
    "type": "boolean",
    "description": "Put component into 'indeterminate' state; Ignores 'value' prop"
  },
  "q-circular-progress/show-value": {
    "type": "boolean",
    "description": "Enables the default slot and uses it (if available), otherwise it displays the 'value' prop as text; Make sure the text has enough space to be displayed inside the component"
  },
  "q-circular-progress/reverse": {
    "type": "boolean",
    "description": "Reverses the direction of progress; Only for determined state"
  },
  "q-circular-progress/instant-feedback": {
    "type": "boolean",
    "description": "No animation when model changes"
  },
  "q-circular-progress/animation-speed": {
    "type": "string|number",
    "description": "Animation speed (in milliseconds, without unit)"
  },
  "q-color/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL"
  },
  "q-color/model-value": {
    "type": "string|null|undefined",
    "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-color/default-value": {
    "type": "string",
    "description": "The default value to show when the model doesn't have one"
  },
  "q-color/default-view": {
    "type": "string",
    "description": "The default view of the picker"
  },
  "q-color/format-model": {
    "type": "string",
    "description": "Forces a certain model format upon the model"
  },
  "q-color/palette": {
    "type": "array",
    "description": "Use a custom palette of colors for the palette tab"
  },
  "q-color/square": {
    "type": "boolean",
    "description": "Removes border-radius so borders are squared"
  },
  "q-color/flat": {
    "type": "boolean",
    "description": "Applies a 'flat' design (no default shadow)"
  },
  "q-color/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-color/no-header": {
    "type": "boolean",
    "description": "Do not render header"
  },
  "q-color/no-header-tabs": {
    "type": "boolean",
    "description": "Do not render header tabs (only the input)"
  },
  "q-color/no-footer": {
    "type": "boolean",
    "description": "Do not render footer; Useful when you want a specific view ('default-view' prop) and don't want the user to be able to switch it"
  },
  "q-color/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-color/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-color/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-date/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL"
  },
  "q-date/landscape": {
    "type": "boolean",
    "description": "Display the component in landscape mode"
  },
  "q-date/mask": {
    "type": "string",
    "description": "Mask (formatting string) used for parsing and formatting value"
  },
  "q-date/locale": {
    "type": "object",
    "description": "Locale formatting options"
  },
  "q-date/calendar": {
    "type": "string",
    "description": "Specify calendar type"
  },
  "q-date/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-date/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-date/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-date/square": {
    "type": "boolean",
    "description": "Removes border-radius so borders are squared"
  },
  "q-date/flat": {
    "type": "boolean",
    "description": "Applies a 'flat' design (no default shadow)"
  },
  "q-date/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-date/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-date/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-date/model-value": {
    "type": "string|array|object|null|undefined",
    "description": "Date(s) of the component; Must be Array if using 'multiple' prop; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-date/title": {
    "type": "string",
    "description": "When specified, it overrides the default header title; Makes sense when not in 'minimal' mode"
  },
  "q-date/subtitle": {
    "type": "string",
    "description": "When specified, it overrides the default header subtitle; Makes sense when not in 'minimal' mode"
  },
  "q-date/default-year-month": {
    "type": "string",
    "description": "The default year and month to display (in YYYY/MM format) when model is unfilled (undefined or null); Please ensure it is within the navigation min/max year-month (if using them)"
  },
  "q-date/default-view": {
    "type": "string",
    "description": "The view which will be displayed by default"
  },
  "q-date/years-in-month-view": {
    "type": "boolean",
    "description": "Show the years selector in months view"
  },
  "q-date/events": {
    "type": "array|function",
    "description": "A list of events to highlight on the calendar; If using a function, it receives the date as a String and must return a Boolean (matches or not); If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-date/event-color": {
    "type": "string|function",
    "description": "Color name (from the Quasar Color Palette); If using a function, it receives the date as a String and must return a String (color for the received date); If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-date/options": {
    "type": "array|function",
    "description": "Optionally configure the days that are selectable; If using a function, it receives the date as a String and must return a Boolean (is date acceptable or not); If using a function then for best performance, reference it from your scope and do not define it inline; Incompatible with 'range' prop"
  },
  "q-date/navigation-min-year-month": {
    "type": "string",
    "description": "Lock user from navigating below a specific year+month (in YYYY/MM format); This prop is not used to correct the model; You might want to also use 'default-year-month' prop"
  },
  "q-date/navigation-max-year-month": {
    "type": "string",
    "description": "Lock user from navigating above a specific year+month (in YYYY/MM format); This prop is not used to correct the model; You might want to also use 'default-year-month' prop"
  },
  "q-date/no-unset": {
    "type": "boolean",
    "description": "Remove ability to unselect a date; It does not apply to selecting a range over already selected dates"
  },
  "q-date/first-day-of-week": {
    "type": "string|number",
    "description": "Sets the day of the week that is considered the first day (0 - Sunday, 1 - Monday, ...); This day will show in the left-most column of the calendar"
  },
  "q-date/today-btn": {
    "type": "boolean",
    "description": "Display a button that selects the current day"
  },
  "q-date/minimal": {
    "type": "boolean",
    "description": "Don’t display the header"
  },
  "q-date/multiple": {
    "type": "boolean",
    "description": "Allow multiple selection; Model must be Array"
  },
  "q-date/range": {
    "type": "boolean",
    "description": "Allow range selection; Partial compatibility with 'options' prop: selected ranges might also include 'unselectable' days"
  },
  "q-date/emit-immediately": {
    "type": "boolean",
    "description": "Emit model when user browses month and year too; ONLY for single selection (non-multiple, non-range)"
  },
  "q-dialog/transition-show": {
    "type": "string",
    "description": "One of Quasar's embedded transitions"
  },
  "q-dialog/transition-hide": {
    "type": "string",
    "description": "One of Quasar's embedded transitions"
  },
  "q-dialog/transition-duration": {
    "type": "string|number",
    "description": "Transition duration (in milliseconds, without unit)"
  },
  "q-dialog/model-value": {
    "type": "boolean",
    "description": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-dialog/persistent": {
    "type": "boolean",
    "description": "User cannot dismiss Dialog if clicking outside of it or hitting ESC key; Also, an app route change won't dismiss it"
  },
  "q-dialog/no-esc-dismiss": {
    "type": "boolean",
    "description": "User cannot dismiss Dialog by hitting ESC key; No need to set it if 'persistent' prop is also set"
  },
  "q-dialog/no-backdrop-dismiss": {
    "type": "boolean",
    "description": "User cannot dismiss Dialog by clicking outside of it; No need to set it if 'persistent' prop is also set"
  },
  "q-dialog/no-route-dismiss": {
    "type": "boolean",
    "description": "Changing route app won't dismiss Dialog; No need to set it if 'persistent' prop is also set"
  },
  "q-dialog/auto-close": {
    "type": "boolean",
    "description": "Any click/tap inside of the dialog will close it"
  },
  "q-dialog/seamless": {
    "type": "boolean",
    "description": "Put Dialog into seamless mode; Does not use a backdrop so user is able to interact with the rest of the page too"
  },
  "q-dialog/maximized": {
    "type": "boolean",
    "description": "Put Dialog into maximized mode"
  },
  "q-dialog/full-width": {
    "type": "boolean",
    "description": "Dialog will try to render with same width as the window"
  },
  "q-dialog/full-height": {
    "type": "boolean",
    "description": "Dialog will try to render with same height as the window"
  },
  "q-dialog/position": {
    "type": "string",
    "description": "Stick dialog to one of the sides (top, right, bottom or left)"
  },
  "q-dialog/square": {
    "type": "boolean",
    "description": "Forces content to have squared borders"
  },
  "q-dialog/no-refocus": {
    "type": "boolean",
    "description": "(Accessibility) When Dialog gets hidden, do not refocus on the DOM element that previously had focus"
  },
  "q-dialog/no-focus": {
    "type": "boolean",
    "description": "(Accessibility) When Dialog gets shown, do not switch focus on it"
  },
  "q-dialog/no-shake": {
    "type": "boolean",
    "description": "Do not shake up the Dialog to catch user's attention"
  },
  "q-drawer/model-value": {
    "type": "boolean",
    "description": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-drawer/side": {
    "type": "string",
    "description": "Side to attach to"
  },
  "q-drawer/overlay": {
    "type": "boolean",
    "description": "Puts drawer into overlay mode (does not occupy space on screen, narrowing the page)"
  },
  "q-drawer/width": {
    "type": "number",
    "description": "Width of drawer (in pixels)"
  },
  "q-drawer/mini": {
    "type": "boolean",
    "description": "Puts drawer into mini mode"
  },
  "q-drawer/mini-width": {
    "type": "number",
    "description": "Width of drawer (in pixels) when in mini mode"
  },
  "q-drawer/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-drawer/mini-to-overlay": {
    "type": "boolean",
    "description": "Mini mode will expand as an overlay"
  },
  "q-drawer/breakpoint": {
    "type": "number",
    "description": "Breakpoint (in pixels) of layout width up to which mobile mode is used"
  },
  "q-drawer/behavior": {
    "type": "string",
    "description": "Overrides the default dynamic mode into which the drawer is put on"
  },
  "q-drawer/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-drawer/elevated": {
    "type": "boolean",
    "description": "Adds a default shadow to the header"
  },
  "q-drawer/persistent": {
    "type": "boolean",
    "description": "Prevents drawer from auto-closing when app's route changes"
  },
  "q-drawer/show-if-above": {
    "type": "boolean",
    "description": "Forces drawer to be shown on screen on initial render if the layout width is above breakpoint, regardless of v-model; This is the default behavior when SSR is taken over by client on initial render"
  },
  "q-drawer/no-swipe-open": {
    "type": "boolean",
    "description": "Disables the default behavior where drawer can be swiped into view; Useful for iOS platforms where it might interfere with Safari's 'swipe to go to previous/next page' feature"
  },
  "q-drawer/no-swipe-close": {
    "type": "boolean",
    "description": "Disables the default behavior where drawer can be swiped out of view (applies to drawer content only); Useful for iOS platforms where it might interfere with Safari's 'swipe to go to previous/next page' feature"
  },
  "q-drawer/no-swipe-backdrop": {
    "type": "boolean",
    "description": "Disables the default behavior where drawer backdrop can be swiped"
  },
  "q-editor/fullscreen": {
    "type": "boolean",
    "description": "Fullscreen mode"
  },
  "q-editor/no-route-fullscreen-exit": {
    "type": "boolean",
    "description": "Changing route app won't exit fullscreen"
  },
  "q-editor/model-value": {
    "type": "string",
    "description": "Model of the component; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-editor/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-editor/square": {
    "type": "boolean",
    "description": "Removes border-radius so borders are squared"
  },
  "q-editor/flat": {
    "type": "boolean",
    "description": "Applies a 'flat' design (no borders)"
  },
  "q-editor/dense": {
    "type": "boolean",
    "description": "Dense mode; toolbar buttons are shown on one-line only"
  },
  "q-editor/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-editor/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-editor/min-height": {
    "type": "string",
    "description": "CSS unit for the minimum height of the editable area"
  },
  "q-editor/max-height": {
    "type": "string",
    "description": "CSS unit for maximum height of the input area"
  },
  "q-editor/height": {
    "type": "string",
    "description": "CSS value to set the height of the editable area"
  },
  "q-editor/definitions": {
    "type": "object",
    "description": "Definition of commands and their buttons to be included in the 'toolbar' prop"
  },
  "q-editor/fonts": {
    "type": "object",
    "description": "Object with definitions of fonts"
  },
  "q-editor/toolbar": {
    "type": "array",
    "description": "An array of arrays of Objects/Strings that you use to define the construction of the elements and commands available in the toolbar"
  },
  "q-editor/toolbar-color": {
    "type": "string",
    "description": "Font color (from the Quasar Palette) of buttons and text in the toolbar"
  },
  "q-editor/toolbar-text-color": {
    "type": "string",
    "description": "Text color (from the Quasar Palette) of toolbar commands"
  },
  "q-editor/toolbar-toggle-color": {
    "type": "string",
    "description": "Choose the active color (from the Quasar Palette) of toolbar commands button"
  },
  "q-editor/toolbar-bg": {
    "type": "string",
    "description": "Toolbar background color (from Quasar Palette)"
  },
  "q-editor/toolbar-outline": {
    "type": "boolean",
    "description": "Toolbar buttons are rendered \"outlined\""
  },
  "q-editor/toolbar-push": {
    "type": "boolean",
    "description": "Toolbar buttons are rendered as a \"push-button\" type"
  },
  "q-editor/toolbar-rounded": {
    "type": "boolean",
    "description": "Toolbar buttons are rendered \"rounded\""
  },
  "q-editor/paragraph-tag": {
    "type": "string",
    "description": "Paragraph tag to be used"
  },
  "q-editor/content-style": {
    "type": "object",
    "description": "Object with CSS properties and values for styling the container of QEditor"
  },
  "q-editor/content-class": {
    "type": "string|array|object",
    "description": "CSS classes for the input area"
  },
  "q-editor/placeholder": {
    "type": "string",
    "description": "Text to display as placeholder"
  },
  "q-expansion-item/to": {
    "type": "string|object",
    "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used"
  },
  "q-expansion-item/exact": {
    "type": "boolean",
    "description": "Equivalent to Vue Router <router-link> 'exact' property; Superseeded by 'href' prop if used"
  },
  "q-expansion-item/replace": {
    "type": "boolean",
    "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used"
  },
  "q-expansion-item/active-class": {
    "type": "string",
    "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used"
  },
  "q-expansion-item/exact-active-class": {
    "type": "string",
    "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used"
  },
  "q-expansion-item/href": {
    "type": "string",
    "description": "Native <a> link href attribute; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props"
  },
  "q-expansion-item/target": {
    "type": "string",
    "description": "Native <a> link target attribute; Use it only along with 'href' prop; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props"
  },
  "q-expansion-item/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-expansion-item/model-value": {
    "type": "boolean",
    "description": "Model of the component defining 'open' state; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-expansion-item/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-expansion-item/expand-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-expansion-item/expanded-icon": {
    "type": "string",
    "description": "Expand icon name (following Quasar convention) for when QExpansionItem is expanded; When used, it also disables the rotation animation of the expand icon; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-expansion-item/expand-icon-class": {
    "type": "string|array|object",
    "description": "Apply custom class(es) to the expand icon item section"
  },
  "q-expansion-item/label": {
    "type": "string",
    "description": "Header label (unless using 'header' slot)"
  },
  "q-expansion-item/label-lines": {
    "type": "number|string",
    "description": "Apply ellipsis when there's not enough space to render on the specified number of lines; If more than one line specified, then it will only work on webkit browsers because it uses the '-webkit-line-clamp' CSS property!"
  },
  "q-expansion-item/caption": {
    "type": "string",
    "description": "Header sub-label (unless using 'header' slot)"
  },
  "q-expansion-item/caption-lines": {
    "type": "number|string",
    "description": "Apply ellipsis when there's not enough space to render on the specified number of lines; If more than one line specified, then it will only work on webkit browsers because it uses the '-webkit-line-clamp' CSS property!"
  },
  "q-expansion-item/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-expansion-item/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-expansion-item/duration": {
    "type": "number",
    "description": "Animation duration (in milliseconds)"
  },
  "q-expansion-item/header-inset-level": {
    "type": "number",
    "description": "Apply an inset to header (unless using 'header' slot); Useful when header avatar/left side is missing but you want to align content with other items that do have a left side, or when you're building a menu"
  },
  "q-expansion-item/content-inset-level": {
    "type": "number",
    "description": "Apply an inset to content (changes content padding)"
  },
  "q-expansion-item/expand-separator": {
    "type": "boolean",
    "description": "Apply a top and bottom separator when expansion item is opened"
  },
  "q-expansion-item/default-opened": {
    "type": "boolean",
    "description": "Puts expansion item into open state on initial render; Overridden by v-model if used"
  },
  "q-expansion-item/expand-icon-toggle": {
    "type": "boolean",
    "description": "Applies the expansion events to the expand icon only and not to the whole header"
  },
  "q-expansion-item/switch-toggle-side": {
    "type": "boolean",
    "description": "Switch expand icon side (from default 'right' to 'left')"
  },
  "q-expansion-item/dense-toggle": {
    "type": "boolean",
    "description": "Use dense mode for expand icon"
  },
  "q-expansion-item/group": {
    "type": "string",
    "description": "Register expansion item into a group (unique name that must be applied to all expansion items in that group) for coordinated open/close state within the group a.k.a. 'accordion mode'"
  },
  "q-expansion-item/popup": {
    "type": "boolean",
    "description": "Put expansion list into 'popup' mode"
  },
  "q-expansion-item/header-style": {
    "type": "string|array|object",
    "description": "Apply custom style to the header"
  },
  "q-expansion-item/header-class": {
    "type": "string|array|object",
    "description": "Apply custom class(es) to the header"
  },
  "q-fab/type": {
    "type": "string",
    "description": "Define the button HTML DOM type"
  },
  "q-fab/outline": {
    "type": "boolean",
    "description": "Use 'outline' design for Fab button"
  },
  "q-fab/push": {
    "type": "boolean",
    "description": "Use 'push' design for Fab button"
  },
  "q-fab/flat": {
    "type": "boolean",
    "description": "Use 'flat' design for Fab button"
  },
  "q-fab/unelevated": {
    "type": "boolean",
    "description": "Remove shadow"
  },
  "q-fab/padding": {
    "type": "string",
    "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set"
  },
  "q-fab/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-fab/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-fab/glossy": {
    "type": "boolean",
    "description": "Apply the glossy effect over the button"
  },
  "q-fab/external-label": {
    "type": "boolean",
    "description": "Display label besides the FABs, as external content"
  },
  "q-fab/label": {
    "type": "string|number",
    "description": "The label that will be shown when Fab is extended"
  },
  "q-fab/label-position": {
    "type": "string",
    "description": "Position of the label around the icon"
  },
  "q-fab/hide-label": {
    "type": "boolean",
    "description": "Hide the label; Useful for animation purposes where you toggle the visibility of the label"
  },
  "q-fab/label-class": {
    "type": "string|array|object",
    "description": "Class definitions to be attributed to the label container"
  },
  "q-fab/label-style": {
    "type": "string|array|object",
    "description": "Style definitions to be attributed to the label container"
  },
  "q-fab/square": {
    "type": "boolean",
    "description": "Apply a rectangle aspect to the FAB"
  },
  "q-fab/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-fab/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-fab/model-value": {
    "type": "boolean",
    "description": "Controls state of fab actions (showing/hidden); Works best with v-model directive, otherwise use along listening to 'update:modelValue' event"
  },
  "q-fab/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-fab/active-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-fab/hide-icon": {
    "type": "boolean",
    "description": "Hide the icon (don't use any)"
  },
  "q-fab/direction": {
    "type": "string",
    "description": "Direction to expand Fab Actions to"
  },
  "q-fab/vertical-actions-align": {
    "type": "string",
    "description": "The side of the Fab where Fab Actions will expand (only when direction is 'up' or 'down')"
  },
  "q-fab/persistent": {
    "type": "boolean",
    "description": "By default, Fab Actions are hidden when user navigates to another route and this prop disables this behavior"
  },
  "q-fab-action/type": {
    "type": "string",
    "description": "Define the button HTML DOM type"
  },
  "q-fab-action/outline": {
    "type": "boolean",
    "description": "Use 'outline' design for Fab button"
  },
  "q-fab-action/push": {
    "type": "boolean",
    "description": "Use 'push' design for Fab button"
  },
  "q-fab-action/flat": {
    "type": "boolean",
    "description": "Use 'flat' design for Fab button"
  },
  "q-fab-action/unelevated": {
    "type": "boolean",
    "description": "Remove shadow"
  },
  "q-fab-action/padding": {
    "type": "string",
    "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set"
  },
  "q-fab-action/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-fab-action/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-fab-action/glossy": {
    "type": "boolean",
    "description": "Apply the glossy effect over the button"
  },
  "q-fab-action/external-label": {
    "type": "boolean",
    "description": "Display label besides the FABs, as external content"
  },
  "q-fab-action/label": {
    "type": "string|number",
    "description": "The label that will be shown when Fab is extended"
  },
  "q-fab-action/label-position": {
    "type": "string",
    "description": "Position of the label around the icon"
  },
  "q-fab-action/hide-label": {
    "type": "boolean",
    "description": "Hide the label; Useful for animation purposes where you toggle the visibility of the label"
  },
  "q-fab-action/label-class": {
    "type": "string|array|object",
    "description": "Class definitions to be attributed to the label container"
  },
  "q-fab-action/label-style": {
    "type": "string|array|object",
    "description": "Style definitions to be attributed to the label container"
  },
  "q-fab-action/square": {
    "type": "boolean",
    "description": "Apply a rectangle aspect to the FAB"
  },
  "q-fab-action/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-fab-action/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-fab-action/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-fab-action/anchor": {
    "type": "string",
    "description": "How to align the Fab Action relative to Fab expand side; By default it uses the align specified in QFab"
  },
  "q-fab-action/to": {
    "type": "string|object",
    "description": "Equivalent to Vue Router <router-link> 'to' property"
  },
  "q-fab-action/replace": {
    "type": "boolean",
    "description": "Equivalent to Vue Router <router-link> 'replace' property"
  },
  "q-field/model-value": {
    "type": "any",
    "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-field/error": {
    "type": "boolean",
    "description": "Does field have validation errors?"
  },
  "q-field/error-message": {
    "type": "string",
    "description": "Validation error message (gets displayed only if 'error' is set to 'true')"
  },
  "q-field/no-error-icon": {
    "type": "boolean",
    "description": "Hide error icon when there is an error"
  },
  "q-field/rules": {
    "type": "array",
    "description": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules"
  },
  "q-field/reactive-rules": {
    "type": "boolean",
    "description": "By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it"
  },
  "q-field/lazy-rules": {
    "type": "boolean|string",
    "description": "If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper QForm submits itself"
  },
  "q-field/label": {
    "type": "string",
    "description": "A text label that will “float” up above the input field, once the field gets focus"
  },
  "q-field/stack-label": {
    "type": "boolean",
    "description": "Label will be always shown above the field regardless of field content (if any)"
  },
  "q-field/hint": {
    "type": "string",
    "description": "Helper (hint) text which gets placed below your wrapped form component"
  },
  "q-field/hide-hint": {
    "type": "boolean",
    "description": "Hide the helper (hint) text when field doesn't have focus"
  },
  "q-field/prefix": {
    "type": "string",
    "description": "Prefix"
  },
  "q-field/suffix": {
    "type": "string",
    "description": "Suffix"
  },
  "q-field/label-color": {
    "type": "string",
    "description": "Color name for the label from the Quasar Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused"
  },
  "q-field/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-field/bg-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-field/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-field/loading": {
    "type": "boolean",
    "description": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot."
  },
  "q-field/clearable": {
    "type": "boolean",
    "description": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null"
  },
  "q-field/clear-icon": {
    "type": "string",
    "description": "Custom icon to use for the clear button when using along with 'clearable' prop"
  },
  "q-field/filled": {
    "type": "boolean",
    "description": "Use 'filled' design for the field"
  },
  "q-field/outlined": {
    "type": "boolean",
    "description": "Use 'outlined' design for the field"
  },
  "q-field/borderless": {
    "type": "boolean",
    "description": "Use 'borderless' design for the field"
  },
  "q-field/standout": {
    "type": "boolean|string",
    "description": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)"
  },
  "q-field/label-slot": {
    "type": "boolean",
    "description": "Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set"
  },
  "q-field/bottom-slots": {
    "type": "boolean",
    "description": "Enables bottom slots ('error', 'hint', 'counter')"
  },
  "q-field/hide-bottom-space": {
    "type": "boolean",
    "description": "Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content"
  },
  "q-field/counter": {
    "type": "boolean",
    "description": "Show an automatic counter on bottom right"
  },
  "q-field/rounded": {
    "type": "boolean",
    "description": "Applies a small standard border-radius for a squared shape of the component"
  },
  "q-field/square": {
    "type": "boolean",
    "description": "Remove border-radius so borders are squared; Overrides 'rounded' prop"
  },
  "q-field/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-field/item-aligned": {
    "type": "boolean",
    "description": "Match inner content alignment to that of QItem"
  },
  "q-field/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-field/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-field/autofocus": {
    "type": "boolean",
    "description": "Focus field on initial component render"
  },
  "q-field/for": {
    "type": "string",
    "description": "Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well"
  },
  "q-field/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists"
  },
  "q-field/maxlength": {
    "type": "string|number",
    "description": "Specify a max length of model"
  },
  "q-file/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists"
  },
  "q-file/multiple": {
    "type": "boolean",
    "description": "Allow multiple file uploads"
  },
  "q-file/accept": {
    "type": "string",
    "description": "Comma separated list of unique file type specifiers. Maps to 'accept' attribute of native input type=file element"
  },
  "q-file/capture": {
    "type": "string",
    "description": "Optionally, specify that a new file should be captured, and which device should be used to capture that new media of a type defined by the 'accept' prop. Maps to 'capture' attribute of native input type=file element"
  },
  "q-file/max-file-size": {
    "type": "number|string",
    "description": "Maximum size of individual file in bytes"
  },
  "q-file/max-total-size": {
    "type": "number|string",
    "description": "Maximum size of all files combined in bytes"
  },
  "q-file/max-files": {
    "type": "number|string",
    "description": "Maximum number of files to contain"
  },
  "q-file/filter": {
    "type": "function",
    "description": "Custom filter for added files; Only files that pass this filter will be added to the queue and uploaded; For best performance, reference it from your scope and do not define it inline"
  },
  "q-file/model-value": {
    "type": "file|filelist|array|null|undefined",
    "description": "Model of the component; Must be FileList or Array if using 'multiple' prop; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-file/error": {
    "type": "boolean",
    "description": "Does field have validation errors?"
  },
  "q-file/error-message": {
    "type": "string",
    "description": "Validation error message (gets displayed only if 'error' is set to 'true')"
  },
  "q-file/no-error-icon": {
    "type": "boolean",
    "description": "Hide error icon when there is an error"
  },
  "q-file/rules": {
    "type": "array",
    "description": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules"
  },
  "q-file/reactive-rules": {
    "type": "boolean",
    "description": "By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it"
  },
  "q-file/lazy-rules": {
    "type": "boolean|string",
    "description": "If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper QForm submits itself"
  },
  "q-file/label": {
    "type": "string",
    "description": "A text label that will “float” up above the input field, once the field gets focus"
  },
  "q-file/stack-label": {
    "type": "boolean",
    "description": "Label will be always shown above the field regardless of field content (if any)"
  },
  "q-file/hint": {
    "type": "string",
    "description": "Helper (hint) text which gets placed below your wrapped form component"
  },
  "q-file/hide-hint": {
    "type": "boolean",
    "description": "Hide the helper (hint) text when field doesn't have focus"
  },
  "q-file/prefix": {
    "type": "string",
    "description": "Prefix"
  },
  "q-file/suffix": {
    "type": "string",
    "description": "Suffix"
  },
  "q-file/label-color": {
    "type": "string",
    "description": "Color name for the label from the Quasar Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused"
  },
  "q-file/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-file/bg-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-file/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-file/loading": {
    "type": "boolean",
    "description": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot."
  },
  "q-file/clearable": {
    "type": "boolean",
    "description": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null"
  },
  "q-file/clear-icon": {
    "type": "string",
    "description": "Custom icon to use for the clear button when using along with 'clearable' prop"
  },
  "q-file/filled": {
    "type": "boolean",
    "description": "Use 'filled' design for the field"
  },
  "q-file/outlined": {
    "type": "boolean",
    "description": "Use 'outlined' design for the field"
  },
  "q-file/borderless": {
    "type": "boolean",
    "description": "Use 'borderless' design for the field"
  },
  "q-file/standout": {
    "type": "boolean|string",
    "description": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)"
  },
  "q-file/label-slot": {
    "type": "boolean",
    "description": "Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set"
  },
  "q-file/bottom-slots": {
    "type": "boolean",
    "description": "Enables bottom slots ('error', 'hint', 'counter')"
  },
  "q-file/hide-bottom-space": {
    "type": "boolean",
    "description": "Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content"
  },
  "q-file/counter": {
    "type": "boolean",
    "description": "Show an automatic counter on bottom right"
  },
  "q-file/rounded": {
    "type": "boolean",
    "description": "Applies a small standard border-radius for a squared shape of the component"
  },
  "q-file/square": {
    "type": "boolean",
    "description": "Remove border-radius so borders are squared; Overrides 'rounded' prop"
  },
  "q-file/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-file/item-aligned": {
    "type": "boolean",
    "description": "Match inner content alignment to that of QItem"
  },
  "q-file/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-file/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-file/autofocus": {
    "type": "boolean",
    "description": "Focus field on initial component render"
  },
  "q-file/for": {
    "type": "string",
    "description": "Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well"
  },
  "q-file/append": {
    "type": "boolean",
    "description": "Append file(s) to current model rather than replacing them; Has effect only when using 'multiple' mode"
  },
  "q-file/display-value": {
    "type": "number|string",
    "description": "Override default selection string, if not using 'file' or 'selected' scoped slots and if not using 'use-chips' prop"
  },
  "q-file/use-chips": {
    "type": "boolean",
    "description": "Use QChip to show picked files"
  },
  "q-file/counter-label": {
    "type": "function",
    "description": "Label for the counter; The 'counter' prop is necessary to enable this one"
  },
  "q-file/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-file/input-class": {
    "type": "string|array|object",
    "description": "Class definitions to be attributed to the underlying selection container"
  },
  "q-file/input-style": {
    "type": "string|array|object",
    "description": "Style definitions to be attributed to the underlying selection container"
  },
  "q-footer/model-value": {
    "type": "boolean",
    "description": "Model of the component defining if it is shown or hidden to the user; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-footer/reveal": {
    "type": "boolean",
    "description": "Enable 'reveal' mode; Takes into account user scroll to temporarily show/hide footer"
  },
  "q-footer/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-footer/elevated": {
    "type": "boolean",
    "description": "Adds a default shadow to the footer"
  },
  "q-footer/height-hint": {
    "type": "number|string",
    "description": "When using SSR, you can optionally hint of the height (in pixels) of the QFooter"
  },
  "q-form/autofocus": {
    "type": "boolean",
    "description": "Focus first focusable element on initial component render"
  },
  "q-form/no-error-focus": {
    "type": "boolean",
    "description": "Do not try to focus on first component that has a validation error when submitting form"
  },
  "q-form/no-reset-focus": {
    "type": "boolean",
    "description": "Do not try to focus on first component when resetting form"
  },
  "q-form/greedy": {
    "type": "boolean",
    "description": "Validate all fields in form (by default it stops after finding the first invalid field with synchronous validation)"
  },
  "q-header/model-value": {
    "type": "boolean",
    "description": "Model of the component defining if it is shown or hidden to the user; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-header/reveal": {
    "type": "boolean",
    "description": "Enable 'reveal' mode; Takes into account user scroll to temporarily show/hide header"
  },
  "q-header/reveal-offset": {
    "type": "number",
    "description": "Amount of scroll (in pixels) that should trigger a 'reveal' state change"
  },
  "q-header/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-header/elevated": {
    "type": "boolean",
    "description": "Adds a default shadow to the header"
  },
  "q-header/height-hint": {
    "type": "number|string",
    "description": "When using SSR, you can optionally hint of the height (in pixels) of the QHeader"
  },
  "q-icon/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-icon/tag": {
    "type": "string",
    "description": "HTML tag to render, unless no icon is supplied or it's an svg icon"
  },
  "q-icon/name": {
    "type": "string",
    "description": "Name of the icon, following Quasar convention"
  },
  "q-icon/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-icon/left": {
    "type": "boolean",
    "description": "Useful if icon is on the left side of something: applies a standard margin on the right side of Icon"
  },
  "q-icon/right": {
    "type": "boolean",
    "description": "Useful if icon is on the right side of something: applies a standard margin on the left side of Icon"
  },
  "q-img/ratio": {
    "type": "string|number",
    "description": "Force the component to maintain an aspect ratio"
  },
  "q-img/src": {
    "type": "string",
    "description": "Path to image"
  },
  "q-img/srcset": {
    "type": "string",
    "description": "Same syntax as <img> srcset attribute"
  },
  "q-img/sizes": {
    "type": "string",
    "description": "Same syntax as <img> sizes attribute"
  },
  "q-img/placeholder-src": {
    "type": "string",
    "description": "While waiting for your image to load, you can use a placeholder image"
  },
  "q-img/initial-ratio": {
    "type": "string|number",
    "description": "Use it when not specifying 'ratio' but still wanting an initial aspect ratio"
  },
  "q-img/width": {
    "type": "string",
    "description": "Forces image width; Must also include the unit (px or %)"
  },
  "q-img/height": {
    "type": "string",
    "description": "Forces image height; Must also include the unit (px or %)"
  },
  "q-img/loading": {
    "type": "string",
    "description": "Lazy or immediate load; Same syntax as <img> loading attribute"
  },
  "q-img/crossorigin": {
    "type": "string",
    "description": "Same syntax as <img> crossorigin attribute"
  },
  "q-img/decoding": {
    "type": "string",
    "description": "Same syntax as <img> decoding attribute"
  },
  "q-img/referrerpolicy": {
    "type": "string",
    "description": "Same syntax as <img> referrerpolicy attribute"
  },
  "q-img/fit": {
    "type": "string",
    "description": "How the image will fit into the container; Equivalent of the object-fit prop; Can be coordinated with 'position' prop"
  },
  "q-img/position": {
    "type": "string",
    "description": "The alignment of the image into the container; Equivalent of the object-position CSS prop"
  },
  "q-img/alt": {
    "type": "string",
    "description": "Specifies an alternate text for the image, if the image cannot be displayed"
  },
  "q-img/draggable": {
    "type": "boolean",
    "description": "Adds the native 'draggable' attribute"
  },
  "q-img/img-class": {
    "type": "string",
    "description": "CSS classes to be attributed to the native img element"
  },
  "q-img/img-style": {
    "type": "object",
    "description": "Apply CSS to the native img element"
  },
  "q-img/spinner-color": {
    "type": "string",
    "description": "Color name for default Spinner (unless using a 'loading' slot)"
  },
  "q-img/spinner-size": {
    "type": "string",
    "description": "Size in CSS units, including unit name, for default Spinner (unless using a 'loading' slot)"
  },
  "q-img/no-spinner": {
    "type": "boolean",
    "description": "Do not display the default spinner while waiting for the image to be loaded; It is overriden by the 'loading' slot when one is present"
  },
  "q-img/no-native-menu": {
    "type": "boolean",
    "description": "Disables the native context menu for the image"
  },
  "q-img/no-transition": {
    "type": "boolean",
    "description": "Disable default transition when switching between old and new image"
  },
  "q-infinite-scroll/offset": {
    "type": "number",
    "description": "Offset (pixels) to bottom of Infinite Scroll container from which the component should start loading more content in advance"
  },
  "q-infinite-scroll/debounce": {
    "type": "string|number",
    "description": "Debounce amount (in milliseconds)"
  },
  "q-infinite-scroll/initial-index": {
    "type": "number",
    "description": "Initialize the pagination index (used for the @load event)"
  },
  "q-infinite-scroll/scroll-target": {
    "type": "element|string",
    "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one"
  },
  "q-infinite-scroll/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-infinite-scroll/reverse": {
    "type": "boolean",
    "description": "Scroll area should behave like a messenger - starting scrolled to bottom and loading when reaching the top"
  },
  "q-inner-loading/transition-show": {
    "type": "string",
    "description": "One of Quasar's embedded transitions"
  },
  "q-inner-loading/transition-hide": {
    "type": "string",
    "description": "One of Quasar's embedded transitions"
  },
  "q-inner-loading/transition-duration": {
    "type": "string|number",
    "description": "Transition duration (in milliseconds, without unit)"
  },
  "q-inner-loading/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name, or standard size name (xs|sm|md|lg|xl), for the inner Spinner (unless using the default slot)"
  },
  "q-inner-loading/showing": {
    "type": "boolean",
    "description": "State - loading or not"
  },
  "q-inner-loading/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette for the inner Spinner (unless using the default slot)"
  },
  "q-inner-loading/label": {
    "type": "string",
    "description": "Add a label; Gets overriden when using the default slot"
  },
  "q-inner-loading/label-class": {
    "type": "string",
    "description": "Add CSS class(es) to the label; Works along the 'label' prop only"
  },
  "q-inner-loading/label-style": {
    "type": "string|array|object",
    "description": "Apply custom style to the label; Works along the 'label' prop only"
  },
  "q-inner-loading/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-input/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists"
  },
  "q-input/mask": {
    "type": "string",
    "description": "Custom mask or one of the predefined mask names"
  },
  "q-input/fill-mask": {
    "type": "boolean|string",
    "description": "Fills string with specified characters (or underscore if value is not string) to fill mask's length"
  },
  "q-input/reverse-fill-mask": {
    "type": "boolean",
    "description": "Fills string from the right side of the mask"
  },
  "q-input/unmasked-value": {
    "type": "boolean",
    "description": "Model will be unmasked (won't contain tokens/separation characters)"
  },
  "q-input/model-value": {
    "type": "string|number|null|undefined",
    "description": "Model of the component; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-input/error": {
    "type": "boolean",
    "description": "Does field have validation errors?"
  },
  "q-input/error-message": {
    "type": "string",
    "description": "Validation error message (gets displayed only if 'error' is set to 'true')"
  },
  "q-input/no-error-icon": {
    "type": "boolean",
    "description": "Hide error icon when there is an error"
  },
  "q-input/rules": {
    "type": "array",
    "description": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules"
  },
  "q-input/reactive-rules": {
    "type": "boolean",
    "description": "By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it"
  },
  "q-input/lazy-rules": {
    "type": "boolean|string",
    "description": "If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper QForm submits itself"
  },
  "q-input/label": {
    "type": "string",
    "description": "A text label that will “float” up above the input field, once the field gets focus"
  },
  "q-input/stack-label": {
    "type": "boolean",
    "description": "Label will be always shown above the field regardless of field content (if any)"
  },
  "q-input/hint": {
    "type": "string",
    "description": "Helper (hint) text which gets placed below your wrapped form component"
  },
  "q-input/hide-hint": {
    "type": "boolean",
    "description": "Hide the helper (hint) text when field doesn't have focus"
  },
  "q-input/prefix": {
    "type": "string",
    "description": "Prefix"
  },
  "q-input/suffix": {
    "type": "string",
    "description": "Suffix"
  },
  "q-input/label-color": {
    "type": "string",
    "description": "Color name for the label from the Quasar Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused"
  },
  "q-input/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-input/bg-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-input/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-input/loading": {
    "type": "boolean",
    "description": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot."
  },
  "q-input/clearable": {
    "type": "boolean",
    "description": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null"
  },
  "q-input/clear-icon": {
    "type": "string",
    "description": "Custom icon to use for the clear button when using along with 'clearable' prop"
  },
  "q-input/filled": {
    "type": "boolean",
    "description": "Use 'filled' design for the field"
  },
  "q-input/outlined": {
    "type": "boolean",
    "description": "Use 'outlined' design for the field"
  },
  "q-input/borderless": {
    "type": "boolean",
    "description": "Use 'borderless' design for the field"
  },
  "q-input/standout": {
    "type": "boolean|string",
    "description": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)"
  },
  "q-input/label-slot": {
    "type": "boolean",
    "description": "Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set"
  },
  "q-input/bottom-slots": {
    "type": "boolean",
    "description": "Enables bottom slots ('error', 'hint', 'counter')"
  },
  "q-input/hide-bottom-space": {
    "type": "boolean",
    "description": "Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content"
  },
  "q-input/counter": {
    "type": "boolean",
    "description": "Show an automatic counter on bottom right"
  },
  "q-input/rounded": {
    "type": "boolean",
    "description": "Applies a small standard border-radius for a squared shape of the component"
  },
  "q-input/square": {
    "type": "boolean",
    "description": "Remove border-radius so borders are squared; Overrides 'rounded' prop"
  },
  "q-input/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-input/item-aligned": {
    "type": "boolean",
    "description": "Match inner content alignment to that of QItem"
  },
  "q-input/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-input/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-input/autofocus": {
    "type": "boolean",
    "description": "Focus field on initial component render"
  },
  "q-input/for": {
    "type": "string",
    "description": "Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well"
  },
  "q-input/shadow-text": {
    "type": "string",
    "description": "Text to be displayed as shadow at the end of the text in the control; Does NOT applies to type=file"
  },
  "q-input/type": {
    "type": "string",
    "description": "Input type"
  },
  "q-input/debounce": {
    "type": "string|number",
    "description": "Debounce amount (in milliseconds) when updating model"
  },
  "q-input/maxlength": {
    "type": "string|number",
    "description": "Specify a max length of model"
  },
  "q-input/autogrow": {
    "type": "boolean",
    "description": "Make field autogrow along with its content (uses a textarea)"
  },
  "q-input/input-class": {
    "type": "string|array|object",
    "description": "Class definitions to be attributed to the underlying input tag"
  },
  "q-input/input-style": {
    "type": "string|array|object",
    "description": "Style definitions to be attributed to the underlying input tag"
  },
  "q-intersection/tag": {
    "type": "string",
    "description": "HTML tag to use"
  },
  "q-intersection/once": {
    "type": "boolean",
    "description": "Get triggered only once"
  },
  "q-intersection/ssr-prerender": {
    "type": "boolean",
    "description": "Pre-render content on server side if using SSR (use it to pre-render above the fold content)"
  },
  "q-intersection/root": {
    "type": "element",
    "description": "[Intersection API root prop] Lets you define an alternative to the viewport as your root (through its DOM element); It is important to keep in mind that root needs to be an ancestor of the observed element"
  },
  "q-intersection/margin": {
    "type": "string",
    "description": "[Intersection API rootMargin prop] Allows you to specify the margins for the root, effectively allowing you to either grow or shrink the area used for intersections"
  },
  "q-intersection/threshold": {
    "type": "array|number",
    "description": "[Intersection API threshold prop] Threshold(s) at which to trigger, specified as a ratio, or list of ratios, of (visible area / total area) of the observed element"
  },
  "q-intersection/transition": {
    "type": "string",
    "description": "One of Quasar's embedded transitions"
  },
  "q-intersection/transition-duration": {
    "type": "string|number",
    "description": "Transition duration (in milliseconds, without unit)"
  },
  "q-intersection/disable": {
    "type": "boolean",
    "description": "Disable visibility observable (content will remain as it was, visible or hidden)"
  },
  "q-item/to": {
    "type": "string|object",
    "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used"
  },
  "q-item/exact": {
    "type": "boolean",
    "description": "Equivalent to Vue Router <router-link> 'exact' property; Superseeded by 'href' prop if used"
  },
  "q-item/replace": {
    "type": "boolean",
    "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used"
  },
  "q-item/active-class": {
    "type": "string",
    "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used"
  },
  "q-item/exact-active-class": {
    "type": "string",
    "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used"
  },
  "q-item/href": {
    "type": "string",
    "description": "Native <a> link href attribute; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props"
  },
  "q-item/target": {
    "type": "string",
    "description": "Native <a> link target attribute; Use it only along with 'href' prop; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props"
  },
  "q-item/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-item/active": {
    "type": "boolean",
    "description": "Put item into 'active' state"
  },
  "q-item/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-item/clickable": {
    "type": "boolean",
    "description": "Is QItem clickable? If it's the case, then it will add hover effects and emit 'click' events"
  },
  "q-item/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-item/inset-level": {
    "type": "number",
    "description": "Apply an inset; Useful when avatar/left side is missing but you want to align content with other items that do have a left side, or when you're building a menu"
  },
  "q-item/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-item/tag": {
    "type": "string",
    "description": "HTML tag to render; Suggestion: use 'label' when encapsulating a QCheckbox/QRadio/QToggle so that when user clicks/taps on the whole item it will trigger a model change for the mentioned components"
  },
  "q-item/manual-focus": {
    "type": "boolean",
    "description": "Put item into a manual focus state; Enables 'focused' prop which will determine if item is focused or not, rather than relying on native hover/focus states"
  },
  "q-item/focused": {
    "type": "boolean",
    "description": "Determines focus state, ONLY if 'manual-focus' is enabled / set to true"
  },
  "q-item-label/overline": {
    "type": "boolean",
    "description": "Renders an overline label"
  },
  "q-item-label/caption": {
    "type": "boolean",
    "description": "Renders a caption label"
  },
  "q-item-label/header": {
    "type": "boolean",
    "description": "Renders a header label"
  },
  "q-item-label/lines": {
    "type": "number|string",
    "description": "Apply ellipsis when there's not enough space to render on the specified number of lines;"
  },
  "q-item-section/avatar": {
    "type": "boolean",
    "description": "Render an avatar item side (does not needs 'side' prop to be set)"
  },
  "q-item-section/thumbnail": {
    "type": "boolean",
    "description": "Render a thumbnail item side (does not needs 'side' prop to be set)"
  },
  "q-item-section/side": {
    "type": "boolean",
    "description": "Renders as a side of the item"
  },
  "q-item-section/top": {
    "type": "boolean",
    "description": "Align content to top (useful for multi-line items)"
  },
  "q-item-section/no-wrap": {
    "type": "boolean",
    "description": "Do not wrap text (useful for item's main content)"
  },
  "q-list/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-list/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-list/separator": {
    "type": "boolean",
    "description": "Applies a separator between contained items"
  },
  "q-list/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-list/padding": {
    "type": "boolean",
    "description": "Applies a material design-like padding on top and bottom"
  },
  "q-knob/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL"
  },
  "q-knob/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-knob/model-value": {
    "type": "number",
    "description": "Any number to indicate the given value of the knob. Either use this property (along with a listener for 'update:modelValue' event) OR use the v-model directive"
  },
  "q-knob/min": {
    "type": "number",
    "description": "The minimum value that the model (the knob value) should start at"
  },
  "q-knob/max": {
    "type": "number",
    "description": "The maximum value that the model (the knob value) should go to"
  },
  "q-knob/step": {
    "type": "number",
    "description": "A number representing steps in the value of the model, while adjusting the knob"
  },
  "q-knob/instant-feedback": {
    "type": "boolean",
    "description": "No animation when model changes"
  },
  "q-knob/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-knob/center-color": {
    "type": "string",
    "description": "Color name for the center part of the component from the Quasar Color Palette"
  },
  "q-knob/track-color": {
    "type": "string",
    "description": "Color name for the track of the component from the Quasar Color Palette"
  },
  "q-knob/font-size": {
    "type": "string",
    "description": "Size of text in CSS units, including unit name. Suggestion: use 'em' units to sync with component size"
  },
  "q-knob/thickness": {
    "type": "number",
    "description": "Thickness of progress arc as a ratio (0.0 < x < 1.0) of component size"
  },
  "q-knob/angle": {
    "type": "number",
    "description": "Angle to rotate progress arc by"
  },
  "q-knob/show-value": {
    "type": "boolean",
    "description": "Enables the default slot and uses it (if available), otherwise it displays the 'value' prop as text; Make sure the text has enough space to be displayed inside the component"
  },
  "q-knob/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-knob/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-knob/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-layout/view": {
    "type": "string",
    "description": "Defines how your layout components (header/footer/drawer) should be placed on screen; See docs examples"
  },
  "q-layout/container": {
    "type": "boolean",
    "description": "Containerize the layout which means it changes the default behavior of expanding to the whole window; Useful (but not limited to) for when using on a QDialog"
  },
  "q-linear-progress/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-linear-progress/value": {
    "type": "number",
    "description": "Progress value (0.0 < x < 1.0)"
  },
  "q-linear-progress/buffer": {
    "type": "number",
    "description": "Optional buffer value (0.0 < x < 1.0)"
  },
  "q-linear-progress/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-linear-progress/track-color": {
    "type": "string",
    "description": "Color name for component's track from the Quasar Color Palette"
  },
  "q-linear-progress/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-linear-progress/reverse": {
    "type": "boolean",
    "description": "Reverse direction of progress"
  },
  "q-linear-progress/stripe": {
    "type": "boolean",
    "description": "Draw stripes; For determinate state only (for performance reasons)"
  },
  "q-linear-progress/indeterminate": {
    "type": "boolean",
    "description": "Put component into indeterminate mode"
  },
  "q-linear-progress/query": {
    "type": "boolean",
    "description": "Put component into query mode"
  },
  "q-linear-progress/rounded": {
    "type": "boolean",
    "description": "Applies a small standard border-radius for a squared shape of the component"
  },
  "q-linear-progress/instant-feedback": {
    "type": "boolean",
    "description": "No transition when model changes"
  },
  "q-linear-progress/animation-speed": {
    "type": "string|number",
    "description": "Animation speed (in milliseconds, without unit)"
  },
  "q-markup-table/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-markup-table/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-markup-table/flat": {
    "type": "boolean",
    "description": "Applies a 'flat' design (no default shadow)"
  },
  "q-markup-table/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-markup-table/square": {
    "type": "boolean",
    "description": "Removes border-radius so borders are squared"
  },
  "q-markup-table/separator": {
    "type": "string",
    "description": "Use a separator/border between rows, columns or all cells"
  },
  "q-markup-table/wrap-cells": {
    "type": "boolean",
    "description": "Wrap text within table cells"
  },
  "q-menu/transition-show": {
    "type": "string",
    "description": "One of Quasar's embedded transitions"
  },
  "q-menu/transition-hide": {
    "type": "string",
    "description": "One of Quasar's embedded transitions"
  },
  "q-menu/transition-duration": {
    "type": "string|number",
    "description": "Transition duration (in milliseconds, without unit)"
  },
  "q-menu/target": {
    "type": "boolean|string|element",
    "description": "Configure a target element to trigger component toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) or a DOM element it attaches the events to the specified DOM element (if it exists)"
  },
  "q-menu/no-parent-event": {
    "type": "boolean",
    "description": "Skips attaching events to the target DOM element (that trigger the element to get shown)"
  },
  "q-menu/context-menu": {
    "type": "boolean",
    "description": "Allows the component to behave like a context menu, which opens with a right mouse click (or long tap on mobile)"
  },
  "q-menu/model-value": {
    "type": "boolean",
    "description": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-menu/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-menu/fit": {
    "type": "boolean",
    "description": "Allows the menu to match at least the full width of its target"
  },
  "q-menu/cover": {
    "type": "boolean",
    "description": "Allows the menu to cover its target. When used, the 'self' and 'fit' props are no longer effective"
  },
  "q-menu/anchor": {
    "type": "string",
    "description": "Two values setting the starting position or anchor point of the menu relative to its target"
  },
  "q-menu/self": {
    "type": "string",
    "description": "Two values setting the menu's own position relative to its target"
  },
  "q-menu/offset": {
    "type": "array",
    "description": "An array of two numbers to offset the menu horizontally and vertically in pixels"
  },
  "q-menu/scroll-target": {
    "type": "element|string",
    "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one"
  },
  "q-menu/touch-position": {
    "type": "boolean",
    "description": "Allows for the target position to be set by the mouse position, when the target of the menu is either clicked or touched"
  },
  "q-menu/persistent": {
    "type": "boolean",
    "description": "Allows the menu to not be dismissed by a click/tap outside of the menu or by hitting the ESC key"
  },
  "q-menu/no-route-dismiss": {
    "type": "boolean",
    "description": "Changing route app won't dismiss the popup; No need to set it if 'persistent' prop is also set"
  },
  "q-menu/auto-close": {
    "type": "boolean",
    "description": "Allows any click/tap in the menu to close it; Useful instead of attaching events to each menu item that should close the menu on click/tap"
  },
  "q-menu/separate-close-popup": {
    "type": "boolean",
    "description": "Separate from parent menu, marking it as a separate closing point for v-close-popup (without this, chained menus close all together)"
  },
  "q-menu/square": {
    "type": "boolean",
    "description": "Forces content to have squared borders"
  },
  "q-menu/no-refocus": {
    "type": "boolean",
    "description": "(Accessibility) When Menu gets hidden, do not refocus on the DOM element that previously had focus"
  },
  "q-menu/no-focus": {
    "type": "boolean",
    "description": "(Accessibility) When Menu gets shown, do not switch focus on it"
  },
  "q-menu/max-height": {
    "type": "string",
    "description": "The maximum height of the menu; Size in CSS units, including unit name"
  },
  "q-menu/max-width": {
    "type": "string",
    "description": "The maximum width of the menu; Size in CSS units, including unit name"
  },
  "q-no-ssr/tag": {
    "type": "string",
    "description": "HTML tag to use"
  },
  "q-no-ssr/placeholder": {
    "type": "string",
    "description": "Text to display on server-side render (unless using 'placeholder' slot)"
  },
  "q-option-group/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-option-group/model-value": {
    "type": "any",
    "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-option-group/options": {
    "type": "array",
    "description": "Array of objects with value, label, and disable (optional) props. The binary components will be created according to this array; Props from QToggle, QCheckbox or QRadio can also be added as key/value pairs to control the components singularly"
  },
  "q-option-group/name": {
    "type": "string",
    "description": "Used to specify the name of the controls; Useful if dealing with forms submitted directly to a URL"
  },
  "q-option-group/type": {
    "type": "string",
    "description": "The type of input component to be used"
  },
  "q-option-group/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-option-group/keep-color": {
    "type": "boolean",
    "description": "Should the color (if specified any) be kept when input components are unticked?"
  },
  "q-option-group/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-option-group/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-option-group/left-label": {
    "type": "boolean",
    "description": "Label (if any specified) should be displayed on the left side of the input components"
  },
  "q-option-group/inline": {
    "type": "boolean",
    "description": "Show input components as inline-block rather than each having their own row"
  },
  "q-option-group/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-page-scroller/position": {
    "type": "string",
    "description": "Page side/corner to stick to"
  },
  "q-page-scroller/offset": {
    "type": "array",
    "description": "An array of two numbers to offset the component horizontally and vertically in pixels"
  },
  "q-page-scroller/expand": {
    "type": "boolean",
    "description": "By default the component shrinks to content's size; By using this prop you make the component fully expand horizontally or vertically, based on 'position' prop"
  },
  "q-page-scroller/scroll-offset": {
    "type": "number",
    "description": "Scroll offset (in pixels) from which point the component is shown on page; Measured from the top of the page (or from the bottom if in 'reverse' mode)"
  },
  "q-page-scroller/reverse": {
    "type": "boolean",
    "description": "Work in reverse (shows when scrolling to the top of the page and scrolls to bottom when triggered)"
  },
  "q-page-scroller/duration": {
    "type": "number",
    "description": "Duration (in milliseconds) of the scrolling until it reaches its target"
  },
  "q-page-sticky/position": {
    "type": "string",
    "description": "Page side/corner to stick to"
  },
  "q-page-sticky/offset": {
    "type": "array",
    "description": "An array of two numbers to offset the component horizontally and vertically in pixels"
  },
  "q-page-sticky/expand": {
    "type": "boolean",
    "description": "By default the component shrinks to content's size; By using this prop you make the component fully expand horizontally or vertically, based on 'position' prop"
  },
  "q-page/padding": {
    "type": "boolean",
    "description": "Applies a default responsive page padding"
  },
  "q-page/style-fn": {
    "type": "function",
    "description": "Override default CSS style applied to the component (sets minHeight); Function(offset: Number) => CSS props/value: Object; For best performance, reference it from your scope and do not define it inline"
  },
  "q-pagination/model-value": {
    "type": "number",
    "description": "Current page (must be between min/max)"
  },
  "q-pagination/min": {
    "type": "number",
    "description": "Minimum page (must be lower than 'max')"
  },
  "q-pagination/max": {
    "type": "number",
    "description": "Number of last page (must be higher than 'min')"
  },
  "q-pagination/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-pagination/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-pagination/active-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-pagination/active-text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-pagination/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color (useful when you are using it along with the 'input' prop)"
  },
  "q-pagination/input-style": {
    "type": "string|array|object",
    "description": "Style definitions to be attributed to the input (if using one)"
  },
  "q-pagination/input-class": {
    "type": "string|array|object",
    "description": "Class definitions to be attributed to the input (if using one)"
  },
  "q-pagination/size": {
    "type": "string",
    "description": "Button size in CSS units, including unit name"
  },
  "q-pagination/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-pagination/input": {
    "type": "boolean",
    "description": "Use an input instead of buttons"
  },
  "q-pagination/icon-prev": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-pagination/icon-next": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-pagination/icon-first": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-pagination/icon-last": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-pagination/to-fn": {
    "type": "function",
    "description": "Generate link for page buttons; For best performance, reference it from your scope and do not define it inline"
  },
  "q-pagination/boundary-links": {
    "type": "boolean",
    "description": "Show boundary button links"
  },
  "q-pagination/boundary-numbers": {
    "type": "boolean",
    "description": "Always show first and last page buttons (if not using 'input')"
  },
  "q-pagination/direction-links": {
    "type": "boolean",
    "description": "Show direction buttons"
  },
  "q-pagination/ellipses": {
    "type": "boolean",
    "description": "Show ellipses (...) when pages are available"
  },
  "q-pagination/max-pages": {
    "type": "number",
    "description": "Maximum number of page links to display at a time; 0 means Infinite"
  },
  "q-pagination/ripple": {
    "type": "boolean|object",
    "description": "Configure buttons material ripple (disable it by setting it to 'false' or supply a config object); Does not applies to boundary and ellipsis buttons"
  },
  "q-pagination/round": {
    "type": "boolean",
    "description": "Makes a circle shaped button for all buttons"
  },
  "q-pagination/rounded": {
    "type": "boolean",
    "description": "Applies a more prominent border-radius for a squared shape button for all buttons"
  },
  "q-pagination/flat": {
    "type": "boolean",
    "description": "Use 'flat' design for current page button"
  },
  "q-pagination/outline": {
    "type": "boolean",
    "description": "Use 'outline' design for current page button"
  },
  "q-pagination/unelevated": {
    "type": "boolean",
    "description": "Remove shadow for current page button"
  },
  "q-pagination/push": {
    "type": "boolean",
    "description": "Use 'push' design for current page button"
  },
  "q-pagination/glossy": {
    "type": "boolean",
    "description": "Applies a glossy effect for all buttons"
  },
  "q-pagination/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-pagination/padding": {
    "type": "string",
    "description": "Apply custom padding (vertical [horizontal]); Size in CSS units, including unit name or standard size name (none|xs|sm|md|lg|xl); Also removes the min width and height when set"
  },
  "q-parallax/src": {
    "type": "string",
    "description": "Path to image (unless a 'media' slot is used)"
  },
  "q-parallax/height": {
    "type": "number",
    "description": "Height of component (in pixels)"
  },
  "q-parallax/speed": {
    "type": "number",
    "description": "Speed of parallax effect (0.0 < x < 1.0)"
  },
  "q-parallax/scroll-target": {
    "type": "element|string",
    "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one"
  },
  "q-popup-edit/model-value": {
    "type": "any",
    "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-popup-edit/title": {
    "type": "string",
    "description": "Optional title (unless 'title' slot is used)"
  },
  "q-popup-edit/buttons": {
    "type": "boolean",
    "description": "Show Set and Cancel buttons"
  },
  "q-popup-edit/label-set": {
    "type": "string",
    "description": "Override Set button label"
  },
  "q-popup-edit/label-cancel": {
    "type": "string",
    "description": "Override Cancel button label"
  },
  "q-popup-edit/auto-save": {
    "type": "boolean",
    "description": "Automatically save the model (if changed) when user clicks/taps outside of the popup; It does not apply to ESC key"
  },
  "q-popup-edit/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-popup-edit/validate": {
    "type": "function",
    "description": "Validates model then triggers 'save' and closes Popup; Returns a Boolean ('true' means valid, 'false' means abort); Syntax: validate(value); For best performance, reference it from your scope and do not define it inline"
  },
  "q-popup-edit/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-popup-edit/fit": {
    "type": "boolean",
    "description": "Allows the menu to match at least the full width of its target"
  },
  "q-popup-edit/cover": {
    "type": "boolean",
    "description": "Allows the menu to cover its target. When used, the 'self' and 'fit' props are no longer effective"
  },
  "q-popup-edit/anchor": {
    "type": "string",
    "description": "Two values setting the starting position or anchor point of the menu relative to its target"
  },
  "q-popup-edit/self": {
    "type": "string",
    "description": "Two values setting the menu's own position relative to its target"
  },
  "q-popup-edit/offset": {
    "type": "array",
    "description": "An array of two numbers to offset the menu horizontally and vertically in pixels"
  },
  "q-popup-edit/touch-position": {
    "type": "boolean",
    "description": "Allows for the target position to be set by the mouse position, when the target of the menu is either clicked or touched"
  },
  "q-popup-edit/persistent": {
    "type": "boolean",
    "description": "Avoid menu closing by hitting ESC key or by clicking/tapping outside of the Popup"
  },
  "q-popup-edit/separate-close-popup": {
    "type": "boolean",
    "description": "Separate from parent menu, marking it as a separate closing point for v-close-popup (without this, chained menus close all together)"
  },
  "q-popup-edit/square": {
    "type": "boolean",
    "description": "Forces menu to have squared borders"
  },
  "q-popup-edit/max-height": {
    "type": "string",
    "description": "The maximum height of the menu; Size in CSS units, including unit name"
  },
  "q-popup-edit/max-width": {
    "type": "string",
    "description": "The maximum width of the menu; Size in CSS units, including unit name"
  },
  "q-popup-proxy/target": {
    "type": "boolean|string|element",
    "description": "Configure a target element to trigger component toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) or a DOM element it attaches the events to the specified DOM element (if it exists)"
  },
  "q-popup-proxy/no-parent-event": {
    "type": "boolean",
    "description": "Skips attaching events to the target DOM element (that trigger the element to get shown)"
  },
  "q-popup-proxy/context-menu": {
    "type": "boolean",
    "description": "Allows the component to behave like a context menu, which opens with a right mouse click (or long tap on mobile)"
  },
  "q-popup-proxy/model-value": {
    "type": "boolean",
    "description": "Defines the state of the component (shown/hidden); Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-popup-proxy/breakpoint": {
    "type": "number|string",
    "description": "Breakpoint (in pixels) of window width/height (whichever is smaller) from where a Menu will get to be used instead of a Dialog"
  },
  "q-pull-to-refresh/color": {
    "type": "string",
    "description": "Color name for the icon from the Quasar Color Palette"
  },
  "q-pull-to-refresh/bg-color": {
    "type": "string",
    "description": "Color name for background of the icon container from the Quasar Color Palette"
  },
  "q-pull-to-refresh/icon": {
    "type": "string",
    "description": "Icon to display when refreshing the content"
  },
  "q-pull-to-refresh/no-mouse": {
    "type": "boolean",
    "description": "Don't listen for mouse events"
  },
  "q-pull-to-refresh/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-pull-to-refresh/scroll-target": {
    "type": "element|string",
    "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one"
  },
  "q-radio/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL"
  },
  "q-radio/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-radio/model-value": {
    "type": "number|string|null|undefined",
    "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-radio/val": {
    "type": "number|string|null|undefined",
    "description": "The actual value of the option with which model value is changed"
  },
  "q-radio/label": {
    "type": "string",
    "description": "Label to display along the radio control (or use the default slot instead of this prop)"
  },
  "q-radio/left-label": {
    "type": "boolean",
    "description": "Label (if any specified) should be displayed on the left side of the checkbox"
  },
  "q-radio/checked-icon": {
    "type": "string",
    "description": "The icon to be used when selected (instead of the default design)"
  },
  "q-radio/unchecked-icon": {
    "type": "string",
    "description": "The icon to be used when un-selected (instead of the default design)"
  },
  "q-radio/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-radio/keep-color": {
    "type": "boolean",
    "description": "Should the color (if specified any) be kept when checkbox is unticked?"
  },
  "q-radio/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-radio/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-radio/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-radio/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-range/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL"
  },
  "q-range/min": {
    "type": "number",
    "description": "Minimum value of the model; Set track's minimum value"
  },
  "q-range/max": {
    "type": "number",
    "description": "Maximum value of the model; Set track's maximum value"
  },
  "q-range/inner-min": {
    "type": "number",
    "description": "Inner minimum value of the model; Use in case you need the model value to be inside of the track's min-max values; Needs to be higher or equal to 'min' prop; Defaults to 'min' prop"
  },
  "q-range/inner-max": {
    "type": "number",
    "description": "Inner maximum value of the model; Use in case you need the model value to be inside of the track's min-max values; Needs to be lower or equal to 'max' prop; Defaults to 'max' prop"
  },
  "q-range/step": {
    "type": "number",
    "description": "Specify step amount between valid values (> 0.0); When step equals to 0 it defines infinite granularity"
  },
  "q-range/snap": {
    "type": "boolean",
    "description": "Snap on valid values, rather than sliding freely; Suggestion: use with 'step' prop"
  },
  "q-range/reverse": {
    "type": "boolean",
    "description": "Work in reverse (changes direction)"
  },
  "q-range/vertical": {
    "type": "boolean",
    "description": "Display in vertical direction"
  },
  "q-range/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-range/track-color": {
    "type": "string",
    "description": "Color name for the track (can be 'transparent' too) from the Quasar Color Palette"
  },
  "q-range/track-img": {
    "type": "string",
    "description": "Apply a pattern image on the track"
  },
  "q-range/inner-track-color": {
    "type": "string",
    "description": "Color name for the inner track (can be 'transparent' too) from the Quasar Color Palette"
  },
  "q-range/inner-track-img": {
    "type": "string",
    "description": "Apply a pattern image on the inner track"
  },
  "q-range/selection-color": {
    "type": "string",
    "description": "Color name for the selection bar (can be 'transparent' too) from the Quasar Color Palette"
  },
  "q-range/selection-img": {
    "type": "string",
    "description": "Apply a pattern image on the selection bar"
  },
  "q-range/label": {
    "type": "boolean",
    "description": "Popup a label when user clicks/taps on the slider thumb and moves it"
  },
  "q-range/label-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-range/label-text-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-range/switch-label-side": {
    "type": "boolean",
    "description": "Switch the position of the label (top <-> bottom or left <-> right)"
  },
  "q-range/label-always": {
    "type": "boolean",
    "description": "Always display the label"
  },
  "q-range/markers": {
    "type": "boolean|number",
    "description": "Display markers on the track, one for each possible value for the model or using a custom step (when specifying a Number)"
  },
  "q-range/marker-labels": {
    "type": "boolean|array|object|function",
    "description": "Configure the marker labels (or show the default ones if 'true'); Array of definition Objects or Object with key-value where key is the model and the value is the marker label definition"
  },
  "q-range/marker-labels-class": {
    "type": "string",
    "description": "CSS class(es) to apply to the marker labels container"
  },
  "q-range/switch-marker-labels-side": {
    "type": "boolean",
    "description": "Switch the position of the marker labels (top <-> bottom or left <-> right)"
  },
  "q-range/track-size": {
    "type": "string",
    "description": "Track size (including CSS unit)"
  },
  "q-range/thumb-size": {
    "type": "string",
    "description": "Thumb size (including CSS unit)"
  },
  "q-range/thumb-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-range/thumb-path": {
    "type": "string",
    "description": "Set custom thumb svg path"
  },
  "q-range/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-range/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-range/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-range/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-range/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-range/model-value": {
    "type": "object|null|undefined",
    "description": "Model of the component of type { min, max } (both values must be between global min/max); Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-range/drag-range": {
    "type": "boolean",
    "description": "User can drag range instead of just the two thumbs"
  },
  "q-range/drag-only-range": {
    "type": "boolean",
    "description": "User can drag only the range instead and NOT the two thumbs"
  },
  "q-range/left-label-color": {
    "type": "string",
    "description": "Color name for left label background from the Quasar Color Palette"
  },
  "q-range/left-label-text-color": {
    "type": "string",
    "description": "Color name for left label text from the Quasar Color Palette"
  },
  "q-range/right-label-color": {
    "type": "string",
    "description": "Color name for right label background from the Quasar Color Palette"
  },
  "q-range/right-label-text-color": {
    "type": "string",
    "description": "Color name for right label text from the Quasar Color Palette"
  },
  "q-range/left-label-value": {
    "type": "string|number",
    "description": "Override default label for min value"
  },
  "q-range/right-label-value": {
    "type": "string|number",
    "description": "Override default label for max value"
  },
  "q-range/left-thumb-color": {
    "type": "string",
    "description": "Color name (from the Quasar Color Palette) for left thumb"
  },
  "q-range/right-thumb-color": {
    "type": "string",
    "description": "Color name (from the Quasar Color Palette) for right thumb"
  },
  "q-rating/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL"
  },
  "q-rating/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-rating/model-value": {
    "type": "number",
    "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-rating/max": {
    "type": "number|string",
    "description": "Number of icons to display"
  },
  "q-rating/icon": {
    "type": "string|array",
    "description": "Icon name following Quasar convention; make sure you have the icon library installed unless you are using 'img:' prefix; If an array is provided each rating value will use the corresponding icon in the array (0 based)"
  },
  "q-rating/icon-selected": {
    "type": "string|array",
    "description": "Icon name following Quasar convention to be used when selected (optional); make sure you have the icon library installed unless you are using 'img:' prefix; If an array is provided each rating value will use the corresponding icon in the array (0 based)"
  },
  "q-rating/icon-half": {
    "type": "string|array",
    "description": "Icon name following Quasar convention to be used when selected (optional); make sure you have the icon library installed unless you are using 'img:' prefix; If an array is provided each rating value will use the corresponding icon in the array (0 based)"
  },
  "q-rating/color": {
    "type": "string|array",
    "description": "Color name for component from the Quasar Color Palette; v1.5.0+: If an array is provided each rating value will use the corresponding color in the array (0 based)"
  },
  "q-rating/color-selected": {
    "type": "string|array",
    "description": "Color name from the Quasar Palette for selected icons"
  },
  "q-rating/color-half": {
    "type": "string|array",
    "description": "Color name from the Quasar Palette for half selected icons"
  },
  "q-rating/no-dimming": {
    "type": "boolean",
    "description": "Does not lower opacity for unselected icons"
  },
  "q-rating/no-reset": {
    "type": "boolean",
    "description": "When used, disables default behavior of clicking/tapping on icon which represents current model value to reset model to 0"
  },
  "q-rating/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-rating/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-resize-observer/debounce": {
    "type": "string|number",
    "description": "Debounce amount (in milliseconds)"
  },
  "q-responsive/ratio": {
    "type": "string|number",
    "description": "Aspect ratio for the content; If value is a String, then avoid using a computational statement (like '16/9') and instead specify the String value of the result directly (eg. '1.7777')"
  },
  "q-scroll-area/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-scroll-area/bar-style": {
    "type": "string|array|object",
    "description": "Object with CSS properties and values for custom styling the scrollbars (both vertical and horizontal)"
  },
  "q-scroll-area/vertical-bar-style": {
    "type": "string|array|object",
    "description": "Object with CSS properties and values for custom styling the vertical scrollbar; Is applied on top of 'bar-style' prop"
  },
  "q-scroll-area/horizontal-bar-style": {
    "type": "string|array|object",
    "description": "Object with CSS properties and values for custom styling the horizontal scrollbar; Is applied on top of 'bar-style' prop"
  },
  "q-scroll-area/thumb-style": {
    "type": "object",
    "description": "Object with CSS properties and values for custom styling the thumb of scrollbars (both vertical and horizontal)"
  },
  "q-scroll-area/vertical-thumb-style": {
    "type": "object",
    "description": "Object with CSS properties and values for custom styling the thumb of the vertical scrollbar; Is applied on top of 'thumb-style' prop"
  },
  "q-scroll-area/horizontal-thumb-style": {
    "type": "object",
    "description": "Object with CSS properties and values for custom styling the thumb of the horizontal scrollbar; Is applied on top of 'thumb-style' prop"
  },
  "q-scroll-area/content-style": {
    "type": "string|array|object",
    "description": "Object with CSS properties and values for styling the container of QScrollArea"
  },
  "q-scroll-area/content-active-style": {
    "type": "string|array|object",
    "description": "Object with CSS properties and values for styling the container of QScrollArea when scroll area becomes active (is mouse hovered)"
  },
  "q-scroll-area/visible": {
    "type": "boolean",
    "description": "Manually control the visibility of the scrollbar; Overrides default mouse over/leave behavior"
  },
  "q-scroll-area/delay": {
    "type": "number|string",
    "description": "When content changes, the scrollbar appears; this delay defines the amount of time (in milliseconds) before scrollbars disappear again (if component is not hovered)"
  },
  "q-scroll-area/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-scroll-observer/debounce": {
    "type": "string|number",
    "description": "Debounce amount (in milliseconds)"
  },
  "q-scroll-observer/axis": {
    "type": "string",
    "description": "Axis on which to detect changes"
  },
  "q-scroll-observer/scroll-target": {
    "type": "element|string",
    "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one"
  },
  "q-select/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms; If not specified, it takes the value of 'for' prop, if it exists"
  },
  "q-select/virtual-scroll-horizontal": {
    "type": "boolean",
    "description": "Make virtual list work in horizontal mode"
  },
  "q-select/virtual-scroll-slice-size": {
    "type": "number|string",
    "description": "Minimum number of items to render in the virtual list"
  },
  "q-select/virtual-scroll-slice-ratio-before": {
    "type": "number|string",
    "description": "Ratio of number of items in visible zone to render before it"
  },
  "q-select/virtual-scroll-slice-ratio-after": {
    "type": "number|string",
    "description": "Ratio of number of items in visible zone to render after it"
  },
  "q-select/virtual-scroll-item-size": {
    "type": "number|string",
    "description": "Default size in pixels (height if vertical, width if horizontal) of an item; This value is used for rendering the initial list; Try to use a value close to the minimum size of an item"
  },
  "q-select/virtual-scroll-sticky-size-start": {
    "type": "number|string",
    "description": "Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the start of the list; A correct value will improve scroll precision"
  },
  "q-select/virtual-scroll-sticky-size-end": {
    "type": "number|string",
    "description": "Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the end of the list; A correct value will improve scroll precision"
  },
  "q-select/table-colspan": {
    "type": "number|string",
    "description": "The number of columns in the table (you need this if you use table-layout: fixed)"
  },
  "q-select/model-value": {
    "type": "any",
    "description": "Model of the component; Must be Array if using 'multiple' prop; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-select/error": {
    "type": "boolean",
    "description": "Does field have validation errors?"
  },
  "q-select/error-message": {
    "type": "string",
    "description": "Validation error message (gets displayed only if 'error' is set to 'true')"
  },
  "q-select/no-error-icon": {
    "type": "boolean",
    "description": "Hide error icon when there is an error"
  },
  "q-select/rules": {
    "type": "array",
    "description": "Array of Functions/Strings; If String, then it must be a name of one of the embedded validation rules"
  },
  "q-select/reactive-rules": {
    "type": "boolean",
    "description": "By default a change in the rules does not trigger a new validation until the model changes; If set to true then a change in the rules will trigger a validation; Has a performance penalty, so use it only when you really need it"
  },
  "q-select/lazy-rules": {
    "type": "boolean|string",
    "description": "If set to boolean true then it checks validation status against the 'rules' only after field loses focus for first time; If set to 'ondemand' then it will trigger only when component's validate() method is manually called or when the wrapper QForm submits itself"
  },
  "q-select/label": {
    "type": "string",
    "description": "A text label that will “float” up above the input field, once the field gets focus"
  },
  "q-select/stack-label": {
    "type": "boolean",
    "description": "Label will be always shown above the field regardless of field content (if any)"
  },
  "q-select/hint": {
    "type": "string",
    "description": "Helper (hint) text which gets placed below your wrapped form component"
  },
  "q-select/hide-hint": {
    "type": "boolean",
    "description": "Hide the helper (hint) text when field doesn't have focus"
  },
  "q-select/prefix": {
    "type": "string",
    "description": "Prefix"
  },
  "q-select/suffix": {
    "type": "string",
    "description": "Suffix"
  },
  "q-select/label-color": {
    "type": "string",
    "description": "Color name for the label from the Quasar Color Palette; Overrides the 'color' prop; The difference from 'color' prop is that the label will always have this color, even when field is not focused"
  },
  "q-select/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-select/bg-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-select/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-select/loading": {
    "type": "boolean",
    "description": "Signals the user a process is in progress by displaying a spinner; Spinner can be customized by using the 'loading' slot."
  },
  "q-select/clearable": {
    "type": "boolean",
    "description": "Appends clearable icon when a value (not undefined or null) is set; When clicked, model becomes null"
  },
  "q-select/clear-icon": {
    "type": "string",
    "description": "Custom icon to use for the clear button when using along with 'clearable' prop"
  },
  "q-select/filled": {
    "type": "boolean",
    "description": "Use 'filled' design for the field"
  },
  "q-select/outlined": {
    "type": "boolean",
    "description": "Use 'outlined' design for the field"
  },
  "q-select/borderless": {
    "type": "boolean",
    "description": "Use 'borderless' design for the field"
  },
  "q-select/standout": {
    "type": "boolean|string",
    "description": "Use 'standout' design for the field; Specifies classes to be applied when focused (overriding default ones)"
  },
  "q-select/label-slot": {
    "type": "boolean",
    "description": "Enables label slot; You need to set it to force use of the 'label' slot if the 'label' prop is not set"
  },
  "q-select/bottom-slots": {
    "type": "boolean",
    "description": "Enables bottom slots ('error', 'hint', 'counter')"
  },
  "q-select/hide-bottom-space": {
    "type": "boolean",
    "description": "Do not reserve space for hint/error/counter anymore when these are not used; As a result, it also disables the animation for those; It also allows the hint/error area to stretch vertically based on its content"
  },
  "q-select/counter": {
    "type": "boolean",
    "description": "Show an automatic counter on bottom right"
  },
  "q-select/rounded": {
    "type": "boolean",
    "description": "Applies a small standard border-radius for a squared shape of the component"
  },
  "q-select/square": {
    "type": "boolean",
    "description": "Remove border-radius so borders are squared; Overrides 'rounded' prop"
  },
  "q-select/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-select/item-aligned": {
    "type": "boolean",
    "description": "Match inner content alignment to that of QItem"
  },
  "q-select/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-select/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-select/autofocus": {
    "type": "boolean",
    "description": "Focus field on initial component render"
  },
  "q-select/for": {
    "type": "string",
    "description": "Used to specify the 'id' of the control and also the 'for' attribute of the label that wraps it; If no 'name' prop is specified, then it is used for this attribute as well"
  },
  "q-select/multiple": {
    "type": "boolean",
    "description": "Allow multiple selection; Model must be Array"
  },
  "q-select/display-value": {
    "type": "number|string",
    "description": "Override default selection string, if not using 'selected' slot/scoped slot and if not using 'use-chips' prop"
  },
  "q-select/display-value-html": {
    "type": "boolean",
    "description": "Force render the selected option(s) as HTML; This can lead to XSS attacks so make sure that you sanitize the content; Does NOT apply when using 'selected' or 'selected-item' slots!"
  },
  "q-select/options": {
    "type": "array",
    "description": "Available options that the user can select from. For best performance freeze the list of options."
  },
  "q-select/option-value": {
    "type": "function|string",
    "description": "Property of option which holds the 'value'; If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-select/option-label": {
    "type": "function|string",
    "description": "Property of option which holds the 'label'; If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-select/option-disable": {
    "type": "function|string",
    "description": "Property of option which tells it's disabled; The value of the property must be a Boolean; If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-select/hide-selected": {
    "type": "boolean",
    "description": "Hides selection; Use the underlying input tag to hold the label (instead of showing it to the right of the input) of the selected option; Only works for non 'multiple' Selects"
  },
  "q-select/hide-dropdown-icon": {
    "type": "boolean",
    "description": "Hides dropdown icon"
  },
  "q-select/dropdown-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-select/max-values": {
    "type": "number|string",
    "description": "Allow a maximum number of selections that the user can do"
  },
  "q-select/options-dense": {
    "type": "boolean",
    "description": "Dense mode for options list; occupies less space"
  },
  "q-select/options-dark": {
    "type": "boolean",
    "description": "Options menu will be colored with a dark color"
  },
  "q-select/options-selected-class": {
    "type": "string",
    "description": "CSS class name for options that are active/selected; Set it to an empty string to stop applying the default (which is text-* where * is the 'color' prop value)"
  },
  "q-select/options-html": {
    "type": "boolean",
    "description": "Force render the options as HTML; This can lead to XSS attacks so make sure that you sanitize the content; Does NOT apply when using 'option' slot!"
  },
  "q-select/options-cover": {
    "type": "boolean",
    "description": "Expanded menu will cover the component (will not work along with 'use-input' prop for obvious reasons)"
  },
  "q-select/menu-shrink": {
    "type": "boolean",
    "description": "Allow the options list to be narrower than the field (only in menu mode)"
  },
  "q-select/menu-anchor": {
    "type": "string",
    "description": "Two values setting the starting position or anchor point of the options list relative to the field (only in menu mode)"
  },
  "q-select/menu-self": {
    "type": "string",
    "description": "Two values setting the options list's own position relative to its target (only in menu mode)"
  },
  "q-select/menu-offset": {
    "type": "array",
    "description": "An array of two numbers to offset the options list horizontally and vertically in pixels (only in menu mode)"
  },
  "q-select/popup-content-class": {
    "type": "string",
    "description": "Class definitions to be attributed to the popup content"
  },
  "q-select/popup-content-style": {
    "type": "string|array|object",
    "description": "Style definitions to be attributed to the popup content"
  },
  "q-select/use-input": {
    "type": "boolean",
    "description": "Use an input tag where users can type"
  },
  "q-select/use-chips": {
    "type": "boolean",
    "description": "Use QChip to show what is currently selected"
  },
  "q-select/fill-input": {
    "type": "boolean",
    "description": "Fills the input with current value; Useful along with 'hide-selected'; Does NOT works along with 'multiple' selection"
  },
  "q-select/new-value-mode": {
    "type": "string",
    "description": "Enables creation of new values and defines behavior when a new value is added: 'add' means it adds the value (even if possible duplicate), 'add-unique' adds only unique values, and 'toggle' adds or removes the value (based on if it exists or not already); When using this prop then listening for @new-value becomes optional (only to override the behavior defined by 'new-value-mode')"
  },
  "q-select/map-options": {
    "type": "boolean",
    "description": "Try to map labels of model from 'options' Array; has a small performance penalty; If you are using emit-value you will probably need to use map-options to display the label text in the select field rather than the value;  Refer to the 'Affecting model' section above"
  },
  "q-select/emit-value": {
    "type": "boolean",
    "description": "Update model with the value of the selected option instead of the whole option"
  },
  "q-select/input-debounce": {
    "type": "number|string",
    "description": "Debounce the input model update with an amount of milliseconds"
  },
  "q-select/input-class": {
    "type": "string|array|object",
    "description": "Class definitions to be attributed to the underlying input tag"
  },
  "q-select/input-style": {
    "type": "string|array|object",
    "description": "Style definitions to be attributed to the underlying input tag"
  },
  "q-select/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-select/autocomplete": {
    "type": "string",
    "description": "Autocomplete attribute for field"
  },
  "q-select/transition-show": {
    "type": "string",
    "description": "Transition when showing the menu/dialog; One of Quasar's embedded transitions"
  },
  "q-select/transition-hide": {
    "type": "string",
    "description": "Transition when hiding the menu/dialog; One of Quasar's embedded transitions"
  },
  "q-select/transition-duration": {
    "type": "string|number",
    "description": "Transition duration when hiding the menu/dialog (in milliseconds, without unit)"
  },
  "q-select/behavior": {
    "type": "string",
    "description": "Overrides the default dynamic mode of showing as menu on desktop and dialog on mobiles"
  },
  "q-separator/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-separator/spaced": {
    "type": "boolean|string",
    "description": "If set to true, the corresponding direction margins will be set to 8px; It can also be set to a size in CSS units, including unit name, or one of the xs|sm|md|lg|xl predefined sizes"
  },
  "q-separator/inset": {
    "type": "boolean|string",
    "description": "If set to Boolean true, the left and right margins will be set to 16px. If set to 'item' then it will match a QItem's design. If set to 'item-thumbnail' then it will match the design of a QItem with a thumbnail on the left side"
  },
  "q-separator/vertical": {
    "type": "boolean",
    "description": "If set to true, the separator will be vertical."
  },
  "q-separator/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name"
  },
  "q-separator/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-skeleton/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-skeleton/type": {
    "type": "string",
    "description": "Type of skeleton placeholder"
  },
  "q-skeleton/animation": {
    "type": "string",
    "description": "The animation effect of the skeleton placeholder"
  },
  "q-skeleton/animation-speed": {
    "type": "string|number",
    "description": "Animation speed (in milliseconds, without unit)"
  },
  "q-skeleton/square": {
    "type": "boolean",
    "description": "Removes border-radius so borders are squared"
  },
  "q-skeleton/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-skeleton/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name; Overrides 'height' and 'width' props and applies the value to both height and width"
  },
  "q-skeleton/width": {
    "type": "string",
    "description": "Width in CSS units, including unit name; Apply custom width; Use this prop or through CSS; Overridden by 'size' prop if used"
  },
  "q-skeleton/height": {
    "type": "string",
    "description": "Height in CSS units, including unit name; Apply custom height; Use this prop or through CSS; Overridden by 'size' prop if used"
  },
  "q-skeleton/tag": {
    "type": "string",
    "description": "HTML tag to use"
  },
  "q-slide-item/left-color": {
    "type": "string",
    "description": "Color name for left-side background from the Quasar Color Palette"
  },
  "q-slide-item/right-color": {
    "type": "string",
    "description": "Color name for right-side background from the Quasar Color Palette"
  },
  "q-slide-item/top-color": {
    "type": "string",
    "description": "Color name for top-side background from the Quasar Color Palette"
  },
  "q-slide-item/bottom-color": {
    "type": "string",
    "description": "Color name for bottom-side background from the Quasar Color Palette"
  },
  "q-slide-item/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-slide-transition/appear": {
    "type": "boolean",
    "description": "If set to true, the transition will be applied on the initial render."
  },
  "q-slide-transition/duration": {
    "type": "number",
    "description": "Duration (in milliseconds) enabling animated scroll."
  },
  "q-slider/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL"
  },
  "q-slider/min": {
    "type": "number",
    "description": "Minimum value of the model; Set track's minimum value"
  },
  "q-slider/max": {
    "type": "number",
    "description": "Maximum value of the model; Set track's maximum value"
  },
  "q-slider/inner-min": {
    "type": "number",
    "description": "Inner minimum value of the model; Use in case you need the model value to be inside of the track's min-max values; Needs to be higher or equal to 'min' prop; Defaults to 'min' prop"
  },
  "q-slider/inner-max": {
    "type": "number",
    "description": "Inner maximum value of the model; Use in case you need the model value to be inside of the track's min-max values; Needs to be lower or equal to 'max' prop; Defaults to 'max' prop"
  },
  "q-slider/step": {
    "type": "number",
    "description": "Specify step amount between valid values (> 0.0); When step equals to 0 it defines infinite granularity"
  },
  "q-slider/snap": {
    "type": "boolean",
    "description": "Snap on valid values, rather than sliding freely; Suggestion: use with 'step' prop"
  },
  "q-slider/reverse": {
    "type": "boolean",
    "description": "Work in reverse (changes direction)"
  },
  "q-slider/vertical": {
    "type": "boolean",
    "description": "Display in vertical direction"
  },
  "q-slider/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-slider/track-color": {
    "type": "string",
    "description": "Color name for the track (can be 'transparent' too) from the Quasar Color Palette"
  },
  "q-slider/track-img": {
    "type": "string",
    "description": "Apply a pattern image on the track"
  },
  "q-slider/inner-track-color": {
    "type": "string",
    "description": "Color name for the inner track (can be 'transparent' too) from the Quasar Color Palette"
  },
  "q-slider/inner-track-img": {
    "type": "string",
    "description": "Apply a pattern image on the inner track"
  },
  "q-slider/selection-color": {
    "type": "string",
    "description": "Color name for the selection bar (can be 'transparent' too) from the Quasar Color Palette"
  },
  "q-slider/selection-img": {
    "type": "string",
    "description": "Apply a pattern image on the selection bar"
  },
  "q-slider/label": {
    "type": "boolean",
    "description": "Popup a label when user clicks/taps on the slider thumb and moves it"
  },
  "q-slider/label-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-slider/label-text-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-slider/switch-label-side": {
    "type": "boolean",
    "description": "Switch the position of the label (top <-> bottom or left <-> right)"
  },
  "q-slider/label-always": {
    "type": "boolean",
    "description": "Always display the label"
  },
  "q-slider/markers": {
    "type": "boolean|number",
    "description": "Display markers on the track, one for each possible value for the model or using a custom step (when specifying a Number)"
  },
  "q-slider/marker-labels": {
    "type": "boolean|array|object|function",
    "description": "Configure the marker labels (or show the default ones if 'true'); Array of definition Objects or Object with key-value where key is the model and the value is the marker label definition"
  },
  "q-slider/marker-labels-class": {
    "type": "string",
    "description": "CSS class(es) to apply to the marker labels container"
  },
  "q-slider/switch-marker-labels-side": {
    "type": "boolean",
    "description": "Switch the position of the marker labels (top <-> bottom or left <-> right)"
  },
  "q-slider/track-size": {
    "type": "string",
    "description": "Track size (including CSS unit)"
  },
  "q-slider/thumb-size": {
    "type": "string",
    "description": "Thumb size (including CSS unit)"
  },
  "q-slider/thumb-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-slider/thumb-path": {
    "type": "string",
    "description": "Set custom thumb svg path"
  },
  "q-slider/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-slider/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-slider/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-slider/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-slider/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-slider/model-value": {
    "type": "number|null|undefined",
    "description": "Model of the component (must be between min/max); Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-slider/label-value": {
    "type": "string|number",
    "description": "Override default label value"
  },
  "q-spinner/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner/thickness": {
    "type": "number",
    "description": "Override value to use for stroke-width"
  },
  "q-spinner-audio/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-audio/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-ball/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-ball/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-bars/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-bars/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-box/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-box/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-clock/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-clock/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-comment/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-comment/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-cube/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-cube/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-dots/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-dots/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-facebook/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-facebook/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-gears/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-gears/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-grid/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-grid/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-hearts/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-hearts/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-hourglass/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-hourglass/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-infinity/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-infinity/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-ios/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-ios/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-orbit/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-orbit/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-oval/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-oval/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-pie/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-pie/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-puff/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-puff/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-radio/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-radio/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-rings/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-rings/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-spinner-tail/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-spinner-tail/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-splitter/model-value": {
    "type": "number",
    "description": "Model of the component defining the size of first panel (or second if using reverse) in the unit specified (for '%' it's the split ratio percent - 0.0 < x < 100.0; for 'px' it's the size in px); Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-splitter/reverse": {
    "type": "boolean",
    "description": "Apply the model size to the second panel (by default it applies to the first)"
  },
  "q-splitter/unit": {
    "type": "string",
    "description": "CSS unit for the model"
  },
  "q-splitter/emit-immediately": {
    "type": "boolean",
    "description": "Emit model while user is panning on the separator"
  },
  "q-splitter/horizontal": {
    "type": "boolean",
    "description": "Allows the splitter to split its two panels horizontally, instead of vertically"
  },
  "q-splitter/limits": {
    "type": "array",
    "description": "An array of two values representing the minimum and maximum split size of the two panels; When 'px' unit is set then you can use Infinity as the second value to make it unbound on the other side"
  },
  "q-splitter/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-splitter/before-class": {
    "type": "string|array|object",
    "description": "Class definitions to be attributed to the 'before' panel"
  },
  "q-splitter/after-class": {
    "type": "string|array|object",
    "description": "Class definitions to be attributed to the 'after' panel"
  },
  "q-splitter/separator-class": {
    "type": "string|array|object",
    "description": "Class definitions to be attributed to the splitter separator"
  },
  "q-splitter/separator-style": {
    "type": "string|array|object",
    "description": "Style definitions to be attributed to the splitter separator"
  },
  "q-splitter/dark": {
    "type": "boolean",
    "description": "Applies a default lighter color on the separator; To be used when background is darker; Avoid using when you are overriding through separator-class or separator-style props"
  },
  "q-step/name": {
    "type": "any",
    "description": "Panel name"
  },
  "q-step/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-step/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-step/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-step/title": {
    "type": "string",
    "description": "Step title"
  },
  "q-step/caption": {
    "type": "string",
    "description": "Step’s additional information that appears beneath the title"
  },
  "q-step/prefix": {
    "type": "string|number",
    "description": "Step's prefix (max 2 characters) which replaces the icon if step does not has error, is being edited or is marked as done"
  },
  "q-step/done-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-step/done-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-step/active-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-step/active-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-step/error-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-step/error-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-step/header-nav": {
    "type": "boolean",
    "description": "Allow navigation through the header"
  },
  "q-step/done": {
    "type": "boolean",
    "description": "Mark the step as 'done'"
  },
  "q-step/error": {
    "type": "boolean",
    "description": "Mark the step as having an error"
  },
  "q-stepper/model-value": {
    "type": "any",
    "description": "Model of the component defining the current panel's name; If a Number is used, it does not define the panel's index, but rather the panel's name which can also be an Integer; Either use this property (along with a listener for 'update:model-value' event) OR use the v-model directive."
  },
  "q-stepper/keep-alive": {
    "type": "boolean",
    "description": "Equivalent to using Vue's native <keep-alive> component on the content"
  },
  "q-stepper/keep-alive-include": {
    "type": "string|array|regexp",
    "description": "Equivalent to using Vue's native include prop for <keep-alive>; Values must be valid Vue component names"
  },
  "q-stepper/keep-alive-exclude": {
    "type": "string|array|regexp",
    "description": "Equivalent to using Vue's native exclude prop for <keep-alive>; Values must be valid Vue component names"
  },
  "q-stepper/keep-alive-max": {
    "type": "number",
    "description": "Equivalent to using Vue's native max prop for <keep-alive>"
  },
  "q-stepper/animated": {
    "type": "boolean",
    "description": "Enable transitions between panel (also see 'transition-prev' and 'transition-next' props)"
  },
  "q-stepper/infinite": {
    "type": "boolean",
    "description": "Makes component appear as infinite (when reaching last panel, next one will become the first one)"
  },
  "q-stepper/swipeable": {
    "type": "boolean",
    "description": "Enable swipe events (may interfere with content's touch/mouse events)"
  },
  "q-stepper/vertical": {
    "type": "boolean",
    "description": "Put Stepper in vertical mode (instead of horizontal by default)"
  },
  "q-stepper/transition-prev": {
    "type": "string",
    "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)"
  },
  "q-stepper/transition-next": {
    "type": "string",
    "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)"
  },
  "q-stepper/transition-duration": {
    "type": "string|number",
    "description": "Transition duration (in milliseconds, without unit)"
  },
  "q-stepper/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-stepper/flat": {
    "type": "boolean",
    "description": "Applies a 'flat' design (no default shadow)"
  },
  "q-stepper/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-stepper/alternative-labels": {
    "type": "boolean",
    "description": "Use alternative labels - stacks the icon on top of the label (applies only to horizontal stepper)"
  },
  "q-stepper/header-nav": {
    "type": "boolean",
    "description": "Allow navigation through the header"
  },
  "q-stepper/contracted": {
    "type": "boolean",
    "description": "Hide header labels on narrow windows"
  },
  "q-stepper/inactive-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-stepper/inactive-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-stepper/done-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-stepper/done-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-stepper/active-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-stepper/active-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-stepper/error-icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-stepper/error-color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-stepper/header-class": {
    "type": "string",
    "description": "Class definitions to be attributed to the header"
  },
  "q-tab-panel/name": {
    "type": "any",
    "description": "Panel name"
  },
  "q-tab-panel/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-tab-panel/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-tab-panels/model-value": {
    "type": "any",
    "description": "Model of the component defining the current panel's name; If a Number is used, it does not define the panel's index, but rather the panel's name which can also be an Integer; Either use this property (along with a listener for 'update:model-value' event) OR use the v-model directive."
  },
  "q-tab-panels/keep-alive": {
    "type": "boolean",
    "description": "Equivalent to using Vue's native <keep-alive> component on the content"
  },
  "q-tab-panels/keep-alive-include": {
    "type": "string|array|regexp",
    "description": "Equivalent to using Vue's native include prop for <keep-alive>; Values must be valid Vue component names"
  },
  "q-tab-panels/keep-alive-exclude": {
    "type": "string|array|regexp",
    "description": "Equivalent to using Vue's native exclude prop for <keep-alive>; Values must be valid Vue component names"
  },
  "q-tab-panels/keep-alive-max": {
    "type": "number",
    "description": "Equivalent to using Vue's native max prop for <keep-alive>"
  },
  "q-tab-panels/animated": {
    "type": "boolean",
    "description": "Enable transitions between panel (also see 'transition-prev' and 'transition-next' props)"
  },
  "q-tab-panels/infinite": {
    "type": "boolean",
    "description": "Makes component appear as infinite (when reaching last panel, next one will become the first one)"
  },
  "q-tab-panels/swipeable": {
    "type": "boolean",
    "description": "Enable swipe events (may interfere with content's touch/mouse events)"
  },
  "q-tab-panels/vertical": {
    "type": "boolean",
    "description": "Default transitions and swipe actions will be on the vertical axis"
  },
  "q-tab-panels/transition-prev": {
    "type": "string",
    "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)"
  },
  "q-tab-panels/transition-next": {
    "type": "string",
    "description": "One of Quasar's embedded transitions (has effect only if 'animated' prop is set)"
  },
  "q-tab-panels/transition-duration": {
    "type": "string|number",
    "description": "Transition duration (in milliseconds, without unit)"
  },
  "q-table/fullscreen": {
    "type": "boolean",
    "description": "Fullscreen mode"
  },
  "q-table/no-route-fullscreen-exit": {
    "type": "boolean",
    "description": "Changing route app won't exit fullscreen"
  },
  "q-table/rows": {
    "type": "array",
    "description": "Rows of data to display"
  },
  "q-table/row-key": {
    "type": "string|function",
    "description": "Property of each row that defines the unique key of each row (the result must be a primitive, not Object, Array, etc); The value of property must be string or a function taking a row and returning the desired (nested) key in the row; If supplying a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-table/virtual-scroll": {
    "type": "boolean",
    "description": "Display data using QVirtualScroll (for non-grid mode only)"
  },
  "q-table/virtual-scroll-slice-size": {
    "type": "number|string",
    "description": "Minimum number of rows to render in the virtual list"
  },
  "q-table/virtual-scroll-slice-ratio-before": {
    "type": "number|string",
    "description": "Ratio of number of rows in visible zone to render before it"
  },
  "q-table/virtual-scroll-slice-ratio-after": {
    "type": "number|string",
    "description": "Ratio of number of rows in visible zone to render after it"
  },
  "q-table/virtual-scroll-item-size": {
    "type": "number|string",
    "description": "Default size in pixels of a row; This value is used for rendering the initial table; Try to use a value close to the minimum size of a row"
  },
  "q-table/virtual-scroll-sticky-size-start": {
    "type": "number|string",
    "description": "Size in pixels of the sticky header (if using one); A correct value will improve scroll precision"
  },
  "q-table/virtual-scroll-sticky-size-end": {
    "type": "number|string",
    "description": "Size in pixels of the sticky footer part (if using one); A correct value will improve scroll precision"
  },
  "q-table/table-colspan": {
    "type": "number|string",
    "description": "The number of columns in the table (you need this if you use table-layout: fixed)"
  },
  "q-table/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-table/icon-first-page": {
    "type": "string",
    "description": "Icon name following Quasar convention for stepping to first page; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-table/icon-prev-page": {
    "type": "string",
    "description": "Icon name following Quasar convention for stepping to previous page; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-table/icon-next-page": {
    "type": "string",
    "description": "Icon name following Quasar convention for stepping to next page; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-table/icon-last-page": {
    "type": "string",
    "description": "Icon name following Quasar convention for stepping to last page; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-table/grid": {
    "type": "boolean",
    "description": "Display data as a grid instead of the default table"
  },
  "q-table/grid-header": {
    "type": "boolean",
    "description": "Display header for grid-mode also"
  },
  "q-table/dense": {
    "type": "boolean",
    "description": "Dense mode; Connect with $q.screen for responsive behavior"
  },
  "q-table/columns": {
    "type": "array",
    "description": "The column definitions (Array of Objects)"
  },
  "q-table/visible-columns": {
    "type": "array",
    "description": "Array of Strings defining column names ('name' property of each column from 'columns' prop definitions); Columns marked as 'required' are not affected by this property"
  },
  "q-table/loading": {
    "type": "boolean",
    "description": "Put Table into 'loading' state; Notify the user something is happening behind the scenes"
  },
  "q-table/title": {
    "type": "string",
    "description": "Table title"
  },
  "q-table/hide-header": {
    "type": "boolean",
    "description": "Hide table header layer"
  },
  "q-table/hide-bottom": {
    "type": "boolean",
    "description": "Hide table bottom layer regardless of what it has to display"
  },
  "q-table/hide-selected-banner": {
    "type": "boolean",
    "description": "Hide the selected rows banner (if any)"
  },
  "q-table/hide-no-data": {
    "type": "boolean",
    "description": "Hide the default no data bottom layer"
  },
  "q-table/hide-pagination": {
    "type": "boolean",
    "description": "Hide the pagination controls at the bottom"
  },
  "q-table/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-table/flat": {
    "type": "boolean",
    "description": "Applies a 'flat' design (no default shadow)"
  },
  "q-table/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-table/square": {
    "type": "boolean",
    "description": "Removes border-radius so borders are squared"
  },
  "q-table/separator": {
    "type": "string",
    "description": "Use a separator/border between rows, columns or all cells"
  },
  "q-table/wrap-cells": {
    "type": "boolean",
    "description": "Wrap text within table cells"
  },
  "q-table/binary-state-sort": {
    "type": "boolean",
    "description": "Skip the third state (unsorted) when user toggles column sort direction"
  },
  "q-table/column-sort-order": {
    "type": "string",
    "description": "Set column sort order: 'ad' (ascending-descending) or 'da' (descending-ascending); It gets applied to all columns unless a column has its own sortOrder specified in the 'columns' definition prop"
  },
  "q-table/no-data-label": {
    "type": "string",
    "description": "Override default text to display when no data is available"
  },
  "q-table/no-results-label": {
    "type": "string",
    "description": "Override default text to display when user filters the table and no matched results are found"
  },
  "q-table/loading-label": {
    "type": "string",
    "description": "Override default text to display when table is in loading state (see 'loading' prop)"
  },
  "q-table/selected-rows-label": {
    "type": "function",
    "description": "Text to display when user selected at least one row; For best performance, reference it from your scope and do not define it inline"
  },
  "q-table/rows-per-page-label": {
    "type": "string",
    "description": "Text to override default rows per page label at bottom of table"
  },
  "q-table/pagination-label": {
    "type": "function",
    "description": "Text to override default pagination label at bottom of table (unless 'pagination' scoped slot is used); For best performance, reference it from your scope and do not define it inline"
  },
  "q-table/table-style": {
    "type": "string|array|object",
    "description": "CSS style to apply to native HTML <table> element's wrapper (which is a DIV)"
  },
  "q-table/table-class": {
    "type": "string|array|object",
    "description": "CSS classes to apply to native HTML <table> element's wrapper (which is a DIV)"
  },
  "q-table/table-header-style": {
    "type": "string|array|object",
    "description": "CSS style to apply to header of native HTML <table> (which is a TR)"
  },
  "q-table/table-header-class": {
    "type": "string|array|object",
    "description": "CSS classes to apply to header of native HTML <table> (which is a TR)"
  },
  "q-table/card-container-style": {
    "type": "string|array|object",
    "description": "CSS style to apply to the cards container (when in grid mode)"
  },
  "q-table/card-container-class": {
    "type": "string|array|object",
    "description": "CSS classes to apply to the cards container (when in grid mode)"
  },
  "q-table/card-style": {
    "type": "string|array|object",
    "description": "CSS style to apply to the card (when in grid mode) or container card (when not in grid mode)"
  },
  "q-table/card-class": {
    "type": "string|array|object",
    "description": "CSS classes to apply to the card (when in grid mode) or container card (when not in grid mode)"
  },
  "q-table/title-class": {
    "type": "string|array|object",
    "description": "CSS classes to apply to the title (if using 'title' prop)"
  },
  "q-table/filter": {
    "type": "string|object",
    "description": "String/Object to filter table with; When using an Object it requires 'filter-method' to also be specified since it will be a custom filtering"
  },
  "q-table/filter-method": {
    "type": "function",
    "description": "The actual filtering mechanism; For best performance, reference it from your scope and do not define it inline"
  },
  "q-table/pagination": {
    "type": "object",
    "description": "Pagination object; You can also use the 'v-model:pagination' for synching; When not synching it simply initializes the pagination on first render"
  },
  "q-table/rows-per-page-options": {
    "type": "array",
    "description": "Options for user to pick (Numbers); Number 0 means 'Show all rows in one page'"
  },
  "q-table/selection": {
    "type": "string",
    "description": "Selection type"
  },
  "q-table/selected": {
    "type": "array",
    "description": "Keeps the user selection array"
  },
  "q-table/expanded": {
    "type": "array",
    "description": "Keeps the array with expanded rows keys"
  },
  "q-table/sort-method": {
    "type": "function",
    "description": "The actual sort mechanism. Function (rows, sortBy, descending) => sorted rows; For best performance, reference it from your scope and do not define it inline"
  },
  "q-td/props": {
    "type": "object",
    "description": "QTable's column scoped slot property"
  },
  "q-td/auto-width": {
    "type": "boolean",
    "description": "Tries to shrink column width size; Useful for columns with a checkbox/radio/toggle"
  },
  "q-td/no-hover": {
    "type": "boolean",
    "description": "Disable hover effect"
  },
  "q-th/props": {
    "type": "object",
    "description": "QTable's header column scoped slot property"
  },
  "q-th/auto-width": {
    "type": "boolean",
    "description": "Tries to shrink header column width size; Useful for columns with a checkbox/radio/toggle"
  },
  "q-tr/props": {
    "type": "object",
    "description": "QTable's row scoped slot property"
  },
  "q-tr/no-hover": {
    "type": "boolean",
    "description": "Disable hover effect"
  },
  "q-route-tab/to": {
    "type": "string|object",
    "description": "Equivalent to Vue Router <router-link> 'to' property; Superseeded by 'href' prop if used"
  },
  "q-route-tab/exact": {
    "type": "boolean",
    "description": "Equivalent to Vue Router <router-link> 'exact' property; Superseeded by 'href' prop if used"
  },
  "q-route-tab/replace": {
    "type": "boolean",
    "description": "Equivalent to Vue Router <router-link> 'replace' property; Superseeded by 'href' prop if used"
  },
  "q-route-tab/active-class": {
    "type": "string",
    "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used"
  },
  "q-route-tab/exact-active-class": {
    "type": "string",
    "description": "Equivalent to Vue Router <router-link> 'active-class' property; Superseeded by 'href' prop if used"
  },
  "q-route-tab/href": {
    "type": "string",
    "description": "Native <a> link href attribute; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props"
  },
  "q-route-tab/target": {
    "type": "string",
    "description": "Native <a> link target attribute; Use it only along with 'href' prop; Has priority over the 'to'/'exact'/'replace'/'active-class'/'exact-active-class' props"
  },
  "q-route-tab/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-route-tab/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-route-tab/label": {
    "type": "number|string",
    "description": "A number or string to label the tab"
  },
  "q-route-tab/alert": {
    "type": "boolean|string",
    "description": "Adds an alert symbol to the tab, notifying the user there are some updates; If its value is not a Boolean, then you can specify a color"
  },
  "q-route-tab/alert-icon": {
    "type": "string",
    "description": "Adds a floating icon to the tab, notifying the user there are some updates; It's displayed only if 'alert' is set; Can use the color specified by 'alert' prop"
  },
  "q-route-tab/name": {
    "type": "number|string",
    "description": "Panel name"
  },
  "q-route-tab/no-caps": {
    "type": "boolean",
    "description": "Turns off capitalizing all letters within the tab (which is the default)"
  },
  "q-route-tab/content-class": {
    "type": "string",
    "description": "Class definitions to be attributed to the content wrapper"
  },
  "q-route-tab/ripple": {
    "type": "boolean|object",
    "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)"
  },
  "q-route-tab/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-tab/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-tab/label": {
    "type": "number|string",
    "description": "A number or string to label the tab"
  },
  "q-tab/alert": {
    "type": "boolean|string",
    "description": "Adds an alert symbol to the tab, notifying the user there are some updates; If its value is not a Boolean, then you can specify a color"
  },
  "q-tab/alert-icon": {
    "type": "string",
    "description": "Adds a floating icon to the tab, notifying the user there are some updates; It's displayed only if 'alert' is set; Can use the color specified by 'alert' prop"
  },
  "q-tab/name": {
    "type": "number|string",
    "description": "Panel name"
  },
  "q-tab/no-caps": {
    "type": "boolean",
    "description": "Turns off capitalizing all letters within the tab (which is the default)"
  },
  "q-tab/content-class": {
    "type": "string",
    "description": "Class definitions to be attributed to the content wrapper"
  },
  "q-tab/ripple": {
    "type": "boolean|object",
    "description": "Configure material ripple (disable it by setting it to 'false' or supply a config object)"
  },
  "q-tab/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-tab/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-tabs/model-value": {
    "type": "number|string|null|undefined",
    "description": "Model of the component defining current panel name; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-tabs/vertical": {
    "type": "boolean",
    "description": "Use vertical design (tabs one on top of each other rather than one next to the other horizontally)"
  },
  "q-tabs/outside-arrows": {
    "type": "boolean",
    "description": "Reserve space for arrows to place them on each side of the tabs (the arrows fade when inactive)"
  },
  "q-tabs/mobile-arrows": {
    "type": "boolean",
    "description": "Force display of arrows (if needed) on mobile"
  },
  "q-tabs/align": {
    "type": "string",
    "description": "Horizontal alignment the tabs within the tabs container"
  },
  "q-tabs/breakpoint": {
    "type": "number|string",
    "description": "Breakpoint (in pixels) of tabs container width at which the tabs automatically turn to a justify alignment"
  },
  "q-tabs/active-color": {
    "type": "string",
    "description": "The color to be attributed to the text of the active tab"
  },
  "q-tabs/active-bg-color": {
    "type": "string",
    "description": "The color to be attributed to the background of the active tab"
  },
  "q-tabs/indicator-color": {
    "type": "string",
    "description": "The color to be attributed to the indicator (the underline) of the active tab"
  },
  "q-tabs/content-class": {
    "type": "string",
    "description": "Class definitions to be attributed to the content wrapper"
  },
  "q-tabs/active-class": {
    "type": "string",
    "description": "The class to be set on the active tab"
  },
  "q-tabs/left-icon": {
    "type": "string",
    "description": "The name of an icon to replace the default arrow used to scroll through the tabs to the left, when the tabs extend past the width of the tabs container"
  },
  "q-tabs/right-icon": {
    "type": "string",
    "description": "The name of an icon to replace the default arrow used to scroll through the tabs to the right, when the tabs extend past the width of the tabs container"
  },
  "q-tabs/stretch": {
    "type": "boolean",
    "description": "When used on flexbox parent, tabs will stretch to parent's height"
  },
  "q-tabs/shrink": {
    "type": "boolean",
    "description": "By default, QTabs is set to grow to the available space; However, you can reverse that with this prop; Useful (and required) when placing the component in a QToolbar"
  },
  "q-tabs/switch-indicator": {
    "type": "boolean",
    "description": "Switches the indicator position (on left of tab for vertical mode or above the tab for default horizontal mode)"
  },
  "q-tabs/narrow-indicator": {
    "type": "boolean",
    "description": "Allows the indicator to be the same width as the tab's content (text or icon), instead of the whole width of the tab"
  },
  "q-tabs/inline-label": {
    "type": "boolean",
    "description": "Allows the text to be inline with the icon, should one be used"
  },
  "q-tabs/no-caps": {
    "type": "boolean",
    "description": "Turns off capitalizing all letters within the tab (which is the default)"
  },
  "q-tabs/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-time/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL"
  },
  "q-time/landscape": {
    "type": "boolean",
    "description": "Display the component in landscape mode"
  },
  "q-time/mask": {
    "type": "string",
    "description": "Mask (formatting string) used for parsing and formatting value"
  },
  "q-time/locale": {
    "type": "object",
    "description": "Locale formatting options"
  },
  "q-time/calendar": {
    "type": "string",
    "description": "Specify calendar type"
  },
  "q-time/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-time/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-time/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-time/square": {
    "type": "boolean",
    "description": "Removes border-radius so borders are squared"
  },
  "q-time/flat": {
    "type": "boolean",
    "description": "Applies a 'flat' design (no default shadow)"
  },
  "q-time/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-time/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-time/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-time/model-value": {
    "type": "string|null|undefined",
    "description": "Time of the component; Either use this property (along with a listener for 'update:modelValue' event) OR use v-model directive"
  },
  "q-time/format24h": {
    "type": "boolean",
    "description": "Forces 24 hour time display instead of AM/PM system"
  },
  "q-time/default-date": {
    "type": "string",
    "description": "The default date to use (in YYYY/MM/DD format) when model is unfilled (undefined or null)"
  },
  "q-time/options": {
    "type": "function",
    "description": "Optionally configure what time is the user allowed to set; Overridden by 'hour-options', 'minute-options' and 'second-options' if those are set; For best performance, reference it from your scope and do not define it inline"
  },
  "q-time/hour-options": {
    "type": "array",
    "description": "Optionally configure what hours is the user allowed to set; Overrides 'options' prop if that is also set"
  },
  "q-time/minute-options": {
    "type": "array",
    "description": "Optionally configure what minutes is the user allowed to set; Overrides 'options' prop if that is also set"
  },
  "q-time/second-options": {
    "type": "array",
    "description": "Optionally configure what seconds is the user allowed to set; Overrides 'options' prop if that is also set"
  },
  "q-time/with-seconds": {
    "type": "boolean",
    "description": "Allow the time to be set with seconds"
  },
  "q-time/now-btn": {
    "type": "boolean",
    "description": "Display a button that selects the current time"
  },
  "q-timeline/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-timeline/side": {
    "type": "string",
    "description": "Side to place the timeline entries in dense and comfortable layout; For loose layout it gets overridden by QTimelineEntry side prop"
  },
  "q-timeline/layout": {
    "type": "string",
    "description": "Layout of the timeline. Dense keeps content and labels on one side. Comfortable keeps content on one side and labels on the opposite side. Loose puts content on both sides."
  },
  "q-timeline/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-timeline-entry/heading": {
    "type": "boolean",
    "description": "Defines a heading timeline item"
  },
  "q-timeline-entry/tag": {
    "type": "string",
    "description": "Tag to use, if of type 'heading' only"
  },
  "q-timeline-entry/side": {
    "type": "string",
    "description": "Side to place the timeline entry; Works only if QTimeline layout is loose."
  },
  "q-timeline-entry/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-timeline-entry/avatar": {
    "type": "string",
    "description": "URL to the avatar image; Icon takes precedence if used, so it replaces avatar"
  },
  "q-timeline-entry/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-timeline-entry/title": {
    "type": "string",
    "description": "Title of timeline entry; Is overridden if using 'title' slot"
  },
  "q-timeline-entry/subtitle": {
    "type": "string",
    "description": "Subtitle of timeline entry; Is overridden if using 'subtitle' slot"
  },
  "q-timeline-entry/body": {
    "type": "string",
    "description": "Body content of timeline entry; Use this prop or the default slot"
  },
  "q-toggle/name": {
    "type": "string",
    "description": "Used to specify the name of the control; Useful if dealing with forms submitted directly to a URL"
  },
  "q-toggle/size": {
    "type": "string",
    "description": "Size in CSS units, including unit name or standard size name (xs|sm|md|lg|xl)"
  },
  "q-toggle/model-value": {
    "type": "any|array",
    "description": "Model of the component; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-toggle/val": {
    "type": "any",
    "description": "Works when model ('value') is Array. It tells the component which value should add/remove when ticked/unticked"
  },
  "q-toggle/true-value": {
    "type": "any",
    "description": "What model value should be considered as checked/ticked/on?"
  },
  "q-toggle/false-value": {
    "type": "any",
    "description": "What model value should be considered as unchecked/unticked/off?"
  },
  "q-toggle/indeterminate-value": {
    "type": "any",
    "description": "What model value should be considered as 'indeterminate'?"
  },
  "q-toggle/toggle-order": {
    "type": "string",
    "description": "Determines toggle order of the two states ('t' stands for state of true, 'f' for state of false); If 'toggle-indeterminate' is true, then the order is: indet -> first state -> second state -> indet (and repeat), otherwise: indet -> first state -> second state -> first state -> second state -> ..."
  },
  "q-toggle/toggle-indeterminate": {
    "type": "boolean",
    "description": "When user clicks/taps on the component, should we toggle through the indeterminate state too?"
  },
  "q-toggle/label": {
    "type": "string",
    "description": "Label to display along the component (or use the default slot instead of this prop)"
  },
  "q-toggle/left-label": {
    "type": "boolean",
    "description": "Label (if any specified) should be displayed on the left side of the component"
  },
  "q-toggle/checked-icon": {
    "type": "string",
    "description": "The icon to be used when the toggle is on"
  },
  "q-toggle/unchecked-icon": {
    "type": "string",
    "description": "The icon to be used when the toggle is off"
  },
  "q-toggle/indeterminate-icon": {
    "type": "string",
    "description": "The icon to be used when the model is indeterminate"
  },
  "q-toggle/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-toggle/keep-color": {
    "type": "boolean",
    "description": "Should the color (if specified any) be kept when the component is unticked/ off?"
  },
  "q-toggle/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-toggle/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-toggle/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-toggle/tabindex": {
    "type": "number|string",
    "description": "Tabindex HTML attribute value"
  },
  "q-toggle/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-toggle/icon-color": {
    "type": "string",
    "description": "Override default icon color (for truthy state only); Color name for component from the Quasar Color Palette"
  },
  "q-toolbar/inset": {
    "type": "boolean",
    "description": "Apply an inset to content (useful for subsequent toolbars)"
  },
  "q-toolbar-title/shrink": {
    "type": "boolean",
    "description": "By default, QToolbarTitle is set to grow to the available space. However, you can reverse that with this prop"
  },
  "q-tooltip/transition-show": {
    "type": "string",
    "description": "One of Quasar's embedded transitions"
  },
  "q-tooltip/transition-hide": {
    "type": "string",
    "description": "One of Quasar's embedded transitions"
  },
  "q-tooltip/transition-duration": {
    "type": "string|number",
    "description": "Transition duration (in milliseconds, without unit)"
  },
  "q-tooltip/model-value": {
    "type": "boolean",
    "description": "Model of the component defining shown/hidden state; Either use this property (along with a listener for 'update:model-value' event) OR use v-model directive"
  },
  "q-tooltip/max-height": {
    "type": "string",
    "description": "The maximum height of the Tooltip; Size in CSS units, including unit name"
  },
  "q-tooltip/max-width": {
    "type": "string",
    "description": "The maximum width of the Tooltip; Size in CSS units, including unit name"
  },
  "q-tooltip/anchor": {
    "type": "string",
    "description": "Two values setting the starting position or anchor point of the Tooltip relative to its target"
  },
  "q-tooltip/self": {
    "type": "string",
    "description": "Two values setting the Tooltip's own position relative to its target"
  },
  "q-tooltip/offset": {
    "type": "array",
    "description": "An array of two numbers to offset the Tooltip horizontally and vertically in pixels"
  },
  "q-tooltip/scroll-target": {
    "type": "element|string",
    "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one"
  },
  "q-tooltip/target": {
    "type": "boolean|string",
    "description": "Configure a target element to trigger Tooltip toggle; 'true' means it enables the parent DOM element, 'false' means it disables attaching events to any DOM elements; By using a String (CSS selector) it attaches the events to the specified DOM element (if it exists)"
  },
  "q-tooltip/no-parent-event": {
    "type": "boolean",
    "description": "Skips attaching events to the target DOM element (that trigger the element to get shown)"
  },
  "q-tooltip/delay": {
    "type": "number",
    "description": "Configure Tooltip to appear with delay"
  },
  "q-tooltip/hide-delay": {
    "type": "number",
    "description": "Configure Tooltip to disappear with delay"
  },
  "q-tree/nodes": {
    "type": "array",
    "description": "The array of nodes that designates the tree structure"
  },
  "q-tree/node-key": {
    "type": "string",
    "description": "The property name of each node object that holds a unique node id"
  },
  "q-tree/label-key": {
    "type": "string",
    "description": "The property name of each node object that holds the label of the node"
  },
  "q-tree/children-key": {
    "type": "string",
    "description": "The property name of each node object that holds the list of children of the node"
  },
  "q-tree/no-connectors": {
    "type": "boolean",
    "description": "Do not display the connector lines between nodes"
  },
  "q-tree/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-tree/control-color": {
    "type": "string",
    "description": "Color name for controls (like checkboxes) from the Quasar Color Palette"
  },
  "q-tree/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-tree/selected-color": {
    "type": "string",
    "description": "Color name for selected nodes (from the Quasar Color Palette)"
  },
  "q-tree/dense": {
    "type": "boolean",
    "description": "Dense mode; occupies less space"
  },
  "q-tree/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-tree/icon": {
    "type": "string",
    "description": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix"
  },
  "q-tree/tick-strategy": {
    "type": "string",
    "description": "The type of strategy to use for the selection of the nodes"
  },
  "q-tree/ticked": {
    "type": "array",
    "description": "Keys of nodes that are ticked"
  },
  "q-tree/expanded": {
    "type": "array",
    "description": "Keys of nodes that are expanded"
  },
  "q-tree/selected": {
    "type": "any",
    "description": "Key of node currently selected"
  },
  "q-tree/no-selection-unset": {
    "type": "boolean",
    "description": "Do not allow un-selection when clicking currently selected node"
  },
  "q-tree/default-expand-all": {
    "type": "boolean",
    "description": "Allow the tree to have all its branches expanded, when first rendered"
  },
  "q-tree/accordion": {
    "type": "boolean",
    "description": "Allows the tree to be set in accordion mode"
  },
  "q-tree/filter": {
    "type": "string",
    "description": "The text value to be used for filtering nodes"
  },
  "q-tree/filter-method": {
    "type": "function",
    "description": "The function to use to filter the tree nodes; For best performance, reference it from your scope and do not define it inline"
  },
  "q-tree/duration": {
    "type": "number",
    "description": "Toggle animation duration (in milliseconds)"
  },
  "q-tree/no-nodes-label": {
    "type": "string",
    "description": "Override default such label for when no nodes are available"
  },
  "q-tree/no-results-label": {
    "type": "string",
    "description": "Override default such label for when no nodes are available due to filtering"
  },
  "q-uploader/factory": {
    "type": "function",
    "description": "Function which should return an Object or a Promise resolving with an Object; For best performance, reference it from your scope and do not define it inline"
  },
  "q-uploader/url": {
    "type": "string|function",
    "description": "URL or path to the server which handles the upload. Takes String or factory function, which returns String. Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-uploader/method": {
    "type": "string|function",
    "description": "HTTP method to use for upload; Takes String or factory function which returns a String; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-uploader/field-name": {
    "type": "string|function",
    "description": "Field name for each file upload; This goes into the following header: 'Content-Disposition: form-data; name=\"__HERE__\"; filename=\"somefile.png\"; If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-uploader/headers": {
    "type": "array|function",
    "description": "Array or a factory function which returns an array; Array consists of objects with header definitions; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-uploader/form-fields": {
    "type": "array|function",
    "description": "Array or a factory function which returns an array; Array consists of objects with additional fields definitions (used by Form to be uploaded); Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-uploader/with-credentials": {
    "type": "boolean|function",
    "description": "Sets withCredentials to true on the XHR that manages the upload; Takes boolean or factory function for Boolean; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-uploader/send-raw": {
    "type": "boolean|function",
    "description": "Send raw files without wrapping into a Form(); Takes boolean or factory function for Boolean; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-uploader/batch": {
    "type": "boolean|function",
    "description": "Upload files in batch (in one XHR request); Takes boolean or factory function for Boolean; Function is called right before upload; If using a function then for best performance, reference it from your scope and do not define it inline"
  },
  "q-uploader/multiple": {
    "type": "boolean",
    "description": "Allow multiple file uploads"
  },
  "q-uploader/accept": {
    "type": "string",
    "description": "Comma separated list of unique file type specifiers. Maps to 'accept' attribute of native input type=file element"
  },
  "q-uploader/capture": {
    "type": "string",
    "description": "Optionally, specify that a new file should be captured, and which device should be used to capture that new media of a type defined by the 'accept' prop. Maps to 'capture' attribute of native input type=file element"
  },
  "q-uploader/max-file-size": {
    "type": "number|string",
    "description": "Maximum size of individual file in bytes"
  },
  "q-uploader/max-total-size": {
    "type": "number|string",
    "description": "Maximum size of all files combined in bytes"
  },
  "q-uploader/max-files": {
    "type": "number|string",
    "description": "Maximum number of files to contain"
  },
  "q-uploader/filter": {
    "type": "function",
    "description": "Custom filter for added files; Only files that pass this filter will be added to the queue and uploaded; For best performance, reference it from your scope and do not define it inline"
  },
  "q-uploader/label": {
    "type": "string",
    "description": "Label for the uploader"
  },
  "q-uploader/color": {
    "type": "string",
    "description": "Color name for component from the Quasar Color Palette"
  },
  "q-uploader/text-color": {
    "type": "string",
    "description": "Overrides text color (if needed); Color name from the Quasar Color Palette"
  },
  "q-uploader/dark": {
    "type": "boolean",
    "description": "Notify the component that the background is a dark color"
  },
  "q-uploader/square": {
    "type": "boolean",
    "description": "Removes border-radius so borders are squared"
  },
  "q-uploader/flat": {
    "type": "boolean",
    "description": "Applies a 'flat' design (no default shadow)"
  },
  "q-uploader/bordered": {
    "type": "boolean",
    "description": "Applies a default border to the component"
  },
  "q-uploader/no-thumbnails": {
    "type": "boolean",
    "description": "Don't display thumbnails for image files"
  },
  "q-uploader/auto-upload": {
    "type": "boolean",
    "description": "Upload files immediately when added"
  },
  "q-uploader/hide-upload-btn": {
    "type": "boolean",
    "description": "Don't show the upload button"
  },
  "q-uploader/disable": {
    "type": "boolean",
    "description": "Put component in disabled mode"
  },
  "q-uploader/readonly": {
    "type": "boolean",
    "description": "Put component in readonly mode"
  },
  "q-video/ratio": {
    "type": "string|number",
    "description": "Aspect ratio for the content; If value is a String, then avoid using a computational statement (like '16/9') and instead specify the String value of the result directly (eg. '1.7777')"
  },
  "q-video/src": {
    "type": "string",
    "description": "The source url to display in an iframe"
  },
  "q-video/title": {
    "type": "string",
    "description": "(Accessibility) Set the native 'title' attribute value of the inner iframe being used"
  },
  "q-virtual-scroll/virtual-scroll-horizontal": {
    "type": "boolean",
    "description": "Make virtual list work in horizontal mode"
  },
  "q-virtual-scroll/virtual-scroll-slice-size": {
    "type": "number|string",
    "description": "Minimum number of items to render in the virtual list"
  },
  "q-virtual-scroll/virtual-scroll-slice-ratio-before": {
    "type": "number|string",
    "description": "Ratio of number of items in visible zone to render before it"
  },
  "q-virtual-scroll/virtual-scroll-slice-ratio-after": {
    "type": "number|string",
    "description": "Ratio of number of items in visible zone to render after it"
  },
  "q-virtual-scroll/virtual-scroll-item-size": {
    "type": "number|string",
    "description": "Default size in pixels (height if vertical, width if horizontal) of an item; This value is used for rendering the initial list; Try to use a value close to the minimum size of an item"
  },
  "q-virtual-scroll/virtual-scroll-sticky-size-start": {
    "type": "number|string",
    "description": "Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the start of the list; A correct value will improve scroll precision"
  },
  "q-virtual-scroll/virtual-scroll-sticky-size-end": {
    "type": "number|string",
    "description": "Size in pixels (height if vertical, width if horizontal) of the sticky part (if using one) at the end of the list; A correct value will improve scroll precision"
  },
  "q-virtual-scroll/table-colspan": {
    "type": "number|string",
    "description": "The number of columns in the table (you need this if you use table-layout: fixed)"
  },
  "q-virtual-scroll/type": {
    "type": "string",
    "description": "The type of content: list (default) or table"
  },
  "q-virtual-scroll/items": {
    "type": "array",
    "description": "Available list items that will be passed to the scoped slot; For best performance freeze the list of items; Required if 'itemsFn' is not supplied"
  },
  "q-virtual-scroll/items-size": {
    "type": "number",
    "description": "Number of available items in the list; Required and used only if 'itemsFn' is provided"
  },
  "q-virtual-scroll/items-fn": {
    "type": "function",
    "description": "Function to return the scope for the items to be displayed; Should return an array for items starting from 'from' index for size length; For best performance, reference it from your scope and do not define it inline"
  },
  "q-virtual-scroll/scroll-target": {
    "type": "element|string",
    "description": "CSS selector or DOM element to be used as a custom scroll container instead of the auto detected one"
  }
}